// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_stmt.proto

#include "query_stmt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto_plan {
constexpr NodeDefinition::NodeDefinition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nodehost_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nodehost1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nodeoid_(0u)
  , nodeid_(0)
  , nodeport_(0)
  , nodectlport_(0)
  , nodesctpport_(0)
  , nodeport1_(0)
  , nodectlport1_(0)
  , nodesctpport1_(0)
  , hostisprimary_(false)
  , nodeisprimary_(false)
  , nodeispreferred_(false)
  , nodeis_central_(false)
  , nodeis_active_(false)
  , shard_oid_(0u){}
struct NodeDefinitionDefaultTypeInternal {
  constexpr NodeDefinitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDefinitionDefaultTypeInternal() {}
  union {
    NodeDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefinitionDefaultTypeInternal _NodeDefinition_default_instance_;
constexpr Node::Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct NodeDefaultTypeInternal {
  constexpr NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_;
constexpr NodeGroupQueryMem::NodeGroupQueryMem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_mem_()
  , _query_mem_cached_byte_size_(0)
  , nodegroup_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ng_oid_(0u){}
struct NodeGroupQueryMemDefaultTypeInternal {
  constexpr NodeGroupQueryMemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeGroupQueryMemDefaultTypeInternal() {}
  union {
    NodeGroupQueryMem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeGroupQueryMemDefaultTypeInternal _NodeGroupQueryMem_default_instance_;
constexpr PlannedStmt::PlannedStmt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_mem_()
  , _query_mem_cached_byte_size_(0)
  , assigned_query_mem_()
  , _assigned_query_mem_cached_byte_size_(0)
  , bucketmap_()
  , _bucketmap_cached_byte_size_(0)
  , bucketcnt_()
  , _bucketcnt_cached_byte_size_(0)
  , query_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plantree_(nullptr)
  , rtable_(nullptr)
  , resultrelations_(nullptr)
  , utilitystmt_(nullptr)
  , subplans_(nullptr)
  , rewindplanids_(nullptr)
  , rowmarks_(nullptr)
  , relationoids_(nullptr)
  , invalitems_(nullptr)
  , nodesdefinition_(nullptr)
  , subplan_ids_(nullptr)
  , initplan_(nullptr)
  , plan_hint_warning_(nullptr)
  , noanalyze_rellist_(nullptr)
  , ng_querymem_(nullptr)
  , type_(0)

  , commandtype_(0)

  , queryid_(uint64_t{0u})
  , hasreturning_(false)
  , hasmodifyingcte_(false)
  , hasignore_(false)
  , cansettag_(false)
  , transientplan_(false)
  , dependsonrole_(false)
  , is_flt_frame_(false)
  , is_dynmaic_smp_(false)
  , nparamexec_(0)
  , num_streams_(0)
  , max_push_sql_num_(0)
  , gather_count_(0)
  , num_nodes_(0)
  , instrument_option_(0)
  , num_plannodes_(0)
  , dynsmp_max_cpu_(0)
  , dynsmp_avail_cpu_(0)
  , dynsmp_cpu_util_(0)
  , dynsmp_query_estimate_cpu_usge_(0)
  , dynsmp_active_statement_(0)
  , dynsmp_plan_optimal_dop_(0)
  , dynsmp_plan_original_dop_(0)
  , dynsmp_dop_mem_limit_(0)
  , dynsmp_min_non_spill_dop_(0)
  , num_bucketmaps_(0)
  , datadestrelindex_(0u)
  , maxbloomfilternum_(0)
  , plannertime_(0)
  , query_dop_(0)
  , in_compute_pool_(false)
  , has_obsrel_(false)
  , ng_use_plana_(false)
  , isrowtriggershippable_(false)
  , ng_num_(0)
  , is_stream_plan_(false)
  , multi_node_hint_(false)
  , uniquesqlid_(uint64_t{0u})
  , cause_type_(0u){}
struct PlannedStmtDefaultTypeInternal {
  constexpr PlannedStmtDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlannedStmtDefaultTypeInternal() {}
  union {
    PlannedStmt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlannedStmtDefaultTypeInternal _PlannedStmt_default_instance_;
}  // namespace proto_plan
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_query_5fstmt_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_query_5fstmt_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_query_5fstmt_2eproto = nullptr;

const uint32_t TableStruct_query_5fstmt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeoid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodename_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodehost_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeport_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodectlport_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodesctpport_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodehost1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeport1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodectlport1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodesctpport1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, hostisprimary_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeisprimary_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeispreferred_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeis_central_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeis_active_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, shard_oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Node, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, ng_oid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, nodegroup_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, query_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, commandtype_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, queryid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, hasreturning_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, hasmodifyingcte_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, hasignore_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, cansettag_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, transientplan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dependsonrole_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, is_flt_frame_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, plantree_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, rtable_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, resultrelations_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, utilitystmt_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, subplans_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, rewindplanids_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, rowmarks_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, relationoids_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, invalitems_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, nparamexec_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_streams_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, max_push_sql_num_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, gather_count_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_nodes_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, nodesdefinition_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, instrument_option_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_plannodes_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, query_mem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, assigned_query_mem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, is_dynmaic_smp_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_max_cpu_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_avail_cpu_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_cpu_util_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_active_statement_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_query_estimate_cpu_usge_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_plan_optimal_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_plan_original_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_dop_mem_limit_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_min_non_spill_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_bucketmaps_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, bucketmap_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, bucketcnt_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, query_string_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, subplan_ids_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, initplan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, datadestrelindex_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, maxbloomfilternum_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, query_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, plannertime_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, in_compute_pool_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, has_obsrel_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, plan_hint_warning_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, noanalyze_rellist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, ng_num_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, ng_querymem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, ng_use_plana_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, isrowtriggershippable_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, is_stream_plan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, multi_node_hint_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, uniquesqlid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, cause_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_plan::NodeDefinition)},
  { 23, -1, -1, sizeof(::proto_plan::Node)},
  { 30, -1, -1, sizeof(::proto_plan::NodeGroupQueryMem)},
  { 39, -1, -1, sizeof(::proto_plan::PlannedStmt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_NodeDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_NodeGroupQueryMem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_PlannedStmt_default_instance_),
};

const char descriptor_table_protodef_query_5fstmt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020query_stmt.proto\022\nproto_plan\032\020query_pl"
  "an.proto\032\renumtag.proto\032\017execNodes.proto"
  "\"\356\002\n\016NodeDefinition\022\017\n\007nodeoid\030\001 \001(\r\022\016\n\006"
  "nodeid\030\002 \001(\005\022\020\n\010nodename\030\003 \001(\t\022\020\n\010nodeho"
  "st\030\004 \001(\t\022\020\n\010nodeport\030\005 \001(\005\022\023\n\013nodectlpor"
  "t\030\006 \001(\005\022\024\n\014nodesctpport\030\007 \001(\005\022\021\n\tnodehos"
  "t1\030\010 \001(\t\022\021\n\tnodeport1\030\t \001(\005\022\024\n\014nodectlpo"
  "rt1\030\n \001(\005\022\025\n\rnodesctpport1\030\013 \001(\005\022\025\n\rhost"
  "isprimary\030\014 \001(\010\022\025\n\rnodeisprimary\030\r \001(\010\022\027"
  "\n\017nodeispreferred\030\016 \001(\010\022\026\n\016nodeis_centra"
  "l\030\017 \001(\010\022\025\n\rnodeis_active\030\020 \001(\010\022\021\n\tshard_"
  "oid\030\021 \001(\r\")\n\004Node\022!\n\004type\030\001 \001(\0162\023.proto_"
  "plan.NodeTag\"I\n\021NodeGroupQueryMem\022\016\n\006ng_"
  "oid\030\001 \001(\r\022\021\n\tnodegroup\030\002 \001(\t\022\021\n\tquery_me"
  "m\030\003 \003(\005\"\347\r\n\013PlannedStmt\022!\n\004type\030\001 \001(\0162\023."
  "proto_plan.NodeTag\022(\n\013commandType\030\002 \001(\0162"
  "\023.proto_plan.CmdType\022\017\n\007queryId\030\003 \001(\004\022\024\n"
  "\014hasReturning\030\004 \001(\010\022\027\n\017hasModifyingCTE\030\005"
  " \001(\010\022\021\n\thasIgnore\030\006 \001(\010\022\021\n\tcanSetTag\030\007 \001"
  "(\010\022\025\n\rtransientPlan\030\010 \001(\010\022\025\n\rdependsOnRo"
  "le\030\t \001(\010\022\024\n\014is_flt_frame\030\n \001(\010\022\"\n\010planTr"
  "ee\030\013 \001(\0132\020.proto_plan.Plan\022 \n\006rtable\030\014 \001"
  "(\0132\020.proto_plan.List\022)\n\017resultRelations\030"
  "\r \001(\0132\020.proto_plan.List\022%\n\013utilityStmt\030\016"
  " \001(\0132\020.proto_plan.Node\022\"\n\010subplans\030\017 \001(\013"
  "2\020.proto_plan.List\022,\n\rrewindPlanIDs\030\020 \001("
  "\0132\025.proto_plan.Bitmapset\022\"\n\010rowMarks\030\021 \001"
  "(\0132\020.proto_plan.List\022&\n\014relationOids\030\022 \001"
  "(\0132\020.proto_plan.List\022$\n\ninvalItems\030\023 \001(\013"
  "2\020.proto_plan.List\022\022\n\nnParamExec\030\024 \001(\005\022\023"
  "\n\013num_streams\030\025 \001(\005\022\030\n\020max_push_sql_num\030"
  "\026 \001(\005\022\024\n\014gather_count\030\027 \001(\005\022\021\n\tnum_nodes"
  "\030\030 \001(\005\0223\n\017nodesDefinition\030\031 \001(\0132\032.proto_"
  "plan.NodeDefinition\022\031\n\021instrument_option"
  "\030\032 \001(\005\022\025\n\rnum_plannodes\030\033 \001(\005\022\021\n\tquery_m"
  "em\030\034 \003(\005\022\032\n\022assigned_query_mem\030\035 \003(\005\022\026\n\016"
  "is_dynmaic_smp\030\036 \001(\010\022\026\n\016dynsmp_max_cpu\030\037"
  " \001(\005\022\030\n\020dynsmp_avail_cpu\030  \001(\005\022\027\n\017dynsmp"
  "_cpu_util\030! \001(\005\022\037\n\027dynsmp_active_stateme"
  "nt\030\" \001(\005\022&\n\036dynsmp_query_estimate_cpu_us"
  "ge\030# \001(\001\022\037\n\027dynsmp_plan_optimal_dop\030$ \001("
  "\005\022 \n\030dynsmp_plan_original_dop\030% \001(\005\022\034\n\024d"
  "ynsmp_dop_mem_limit\030& \001(\005\022 \n\030dynsmp_min_"
  "non_spill_dop\030\' \001(\005\022\026\n\016num_bucketmaps\030( "
  "\001(\005\022\021\n\tbucketMap\030) \003(\r\022\021\n\tbucketCnt\030* \003("
  "\005\022\024\n\014query_string\030+ \001(\t\022%\n\013subplan_ids\030,"
  " \001(\0132\020.proto_plan.List\022\"\n\010initPlan\030- \001(\013"
  "2\020.proto_plan.List\022\030\n\020dataDestRelIndex\030."
  " \001(\r\022\031\n\021MaxBloomFilterNum\030/ \001(\005\022\021\n\tquery"
  "_dop\0300 \001(\005\022\023\n\013plannertime\0301 \001(\001\022\027\n\017in_co"
  "mpute_pool\0302 \001(\010\022\022\n\nhas_obsrel\0303 \001(\010\022+\n\021"
  "plan_hint_warning\0304 \001(\0132\020.proto_plan.Lis"
  "t\022+\n\021noanalyze_rellist\0305 \001(\0132\020.proto_pla"
  "n.List\022\016\n\006ng_num\0306 \001(\005\0222\n\013ng_queryMem\0307 "
  "\001(\0132\035.proto_plan.NodeGroupQueryMem\022\024\n\014ng"
  "_use_planA\0308 \001(\010\022\035\n\025isRowTriggerShippabl"
  "e\0309 \001(\010\022\026\n\016is_stream_plan\030: \001(\010\022\027\n\017multi"
  "_node_hint\030; \001(\010\022\023\n\013uniqueSQLId\030< \001(\004\022\022\n"
  "\ncause_type\030= \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_query_5fstmt_2eproto_deps[3] = {
  &::descriptor_table_enumtag_2eproto,
  &::descriptor_table_execNodes_2eproto,
  &::descriptor_table_query_5fplan_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_query_5fstmt_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fstmt_2eproto = {
  false, false, 2345, descriptor_table_protodef_query_5fstmt_2eproto, "query_stmt.proto", 
  &descriptor_table_query_5fstmt_2eproto_once, descriptor_table_query_5fstmt_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_query_5fstmt_2eproto::offsets,
  file_level_metadata_query_5fstmt_2eproto, file_level_enum_descriptors_query_5fstmt_2eproto, file_level_service_descriptors_query_5fstmt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_query_5fstmt_2eproto_getter() {
  return &descriptor_table_query_5fstmt_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_query_5fstmt_2eproto(&descriptor_table_query_5fstmt_2eproto);
namespace proto_plan {

// ===================================================================

class NodeDefinition::_Internal {
 public:
};

NodeDefinition::NodeDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.NodeDefinition)
}
NodeDefinition::NodeDefinition(const NodeDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodename(), 
      GetArenaForAllocation());
  }
  nodehost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nodehost_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodehost().empty()) {
    nodehost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodehost(), 
      GetArenaForAllocation());
  }
  nodehost1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nodehost1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodehost1().empty()) {
    nodehost1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodehost1(), 
      GetArenaForAllocation());
  }
  ::memcpy(&nodeoid_, &from.nodeoid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_oid_) -
    reinterpret_cast<char*>(&nodeoid_)) + sizeof(shard_oid_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.NodeDefinition)
}

inline void NodeDefinition::SharedCtor() {
nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nodehost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nodehost_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nodehost1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nodehost1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nodeoid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shard_oid_) -
    reinterpret_cast<char*>(&nodeoid_)) + sizeof(shard_oid_));
}

NodeDefinition::~NodeDefinition() {
  // @@protoc_insertion_point(destructor:proto_plan.NodeDefinition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeDefinition::ArenaDtor(void* object) {
  NodeDefinition* _this = reinterpret_cast< NodeDefinition* >(object);
  (void)_this;
}
void NodeDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.NodeDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodename_.ClearToEmpty();
  nodehost_.ClearToEmpty();
  nodehost1_.ClearToEmpty();
  ::memset(&nodeoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_oid_) -
      reinterpret_cast<char*>(&nodeoid_)) + sizeof(shard_oid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 nodeoid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nodeoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nodename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeDefinition.nodename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nodehost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nodehost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeDefinition.nodehost"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodeport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          nodeport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodectlport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          nodectlport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodesctpport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          nodesctpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nodehost1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_nodehost1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeDefinition.nodehost1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodeport1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          nodeport1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodectlport1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          nodectlport1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodesctpport1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          nodesctpport1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hostisprimary = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          hostisprimary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nodeisprimary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          nodeisprimary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nodeispreferred = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          nodeispreferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nodeis_central = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          nodeis_central_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nodeis_active = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          nodeis_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shard_oid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          shard_oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.NodeDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nodeoid = 1;
  if (this->_internal_nodeoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nodeoid(), target);
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeid(), target);
  }

  // string nodename = 3;
  if (!this->_internal_nodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeDefinition.nodename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nodename(), target);
  }

  // string nodehost = 4;
  if (!this->_internal_nodehost().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodehost().data(), static_cast<int>(this->_internal_nodehost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeDefinition.nodehost");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nodehost(), target);
  }

  // int32 nodeport = 5;
  if (this->_internal_nodeport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nodeport(), target);
  }

  // int32 nodectlport = 6;
  if (this->_internal_nodectlport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nodectlport(), target);
  }

  // int32 nodesctpport = 7;
  if (this->_internal_nodesctpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nodesctpport(), target);
  }

  // string nodehost1 = 8;
  if (!this->_internal_nodehost1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodehost1().data(), static_cast<int>(this->_internal_nodehost1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeDefinition.nodehost1");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_nodehost1(), target);
  }

  // int32 nodeport1 = 9;
  if (this->_internal_nodeport1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_nodeport1(), target);
  }

  // int32 nodectlport1 = 10;
  if (this->_internal_nodectlport1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_nodectlport1(), target);
  }

  // int32 nodesctpport1 = 11;
  if (this->_internal_nodesctpport1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_nodesctpport1(), target);
  }

  // bool hostisprimary = 12;
  if (this->_internal_hostisprimary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_hostisprimary(), target);
  }

  // bool nodeisprimary = 13;
  if (this->_internal_nodeisprimary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_nodeisprimary(), target);
  }

  // bool nodeispreferred = 14;
  if (this->_internal_nodeispreferred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_nodeispreferred(), target);
  }

  // bool nodeis_central = 15;
  if (this->_internal_nodeis_central() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_nodeis_central(), target);
  }

  // bool nodeis_active = 16;
  if (this->_internal_nodeis_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_nodeis_active(), target);
  }

  // uint32 shard_oid = 17;
  if (this->_internal_shard_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_shard_oid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.NodeDefinition)
  return target;
}

size_t NodeDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.NodeDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodename = 3;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // string nodehost = 4;
  if (!this->_internal_nodehost().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodehost());
  }

  // string nodehost1 = 8;
  if (!this->_internal_nodehost1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodehost1());
  }

  // uint32 nodeoid = 1;
  if (this->_internal_nodeoid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_nodeoid());
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodeid());
  }

  // int32 nodeport = 5;
  if (this->_internal_nodeport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodeport());
  }

  // int32 nodectlport = 6;
  if (this->_internal_nodectlport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodectlport());
  }

  // int32 nodesctpport = 7;
  if (this->_internal_nodesctpport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodesctpport());
  }

  // int32 nodeport1 = 9;
  if (this->_internal_nodeport1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodeport1());
  }

  // int32 nodectlport1 = 10;
  if (this->_internal_nodectlport1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodectlport1());
  }

  // int32 nodesctpport1 = 11;
  if (this->_internal_nodesctpport1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodesctpport1());
  }

  // bool hostisprimary = 12;
  if (this->_internal_hostisprimary() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeisprimary = 13;
  if (this->_internal_nodeisprimary() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeispreferred = 14;
  if (this->_internal_nodeispreferred() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeis_central = 15;
  if (this->_internal_nodeis_central() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeis_active = 16;
  if (this->_internal_nodeis_active() != 0) {
    total_size += 2 + 1;
  }

  // uint32 shard_oid = 17;
  if (this->_internal_shard_oid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shard_oid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeDefinition::GetClassData() const { return &_class_data_; }

void NodeDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeDefinition *>(to)->MergeFrom(
      static_cast<const NodeDefinition &>(from));
}


void NodeDefinition::MergeFrom(const NodeDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.NodeDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_nodehost().empty()) {
    _internal_set_nodehost(from._internal_nodehost());
  }
  if (!from._internal_nodehost1().empty()) {
    _internal_set_nodehost1(from._internal_nodehost1());
  }
  if (from._internal_nodeoid() != 0) {
    _internal_set_nodeoid(from._internal_nodeoid());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_nodeport() != 0) {
    _internal_set_nodeport(from._internal_nodeport());
  }
  if (from._internal_nodectlport() != 0) {
    _internal_set_nodectlport(from._internal_nodectlport());
  }
  if (from._internal_nodesctpport() != 0) {
    _internal_set_nodesctpport(from._internal_nodesctpport());
  }
  if (from._internal_nodeport1() != 0) {
    _internal_set_nodeport1(from._internal_nodeport1());
  }
  if (from._internal_nodectlport1() != 0) {
    _internal_set_nodectlport1(from._internal_nodectlport1());
  }
  if (from._internal_nodesctpport1() != 0) {
    _internal_set_nodesctpport1(from._internal_nodesctpport1());
  }
  if (from._internal_hostisprimary() != 0) {
    _internal_set_hostisprimary(from._internal_hostisprimary());
  }
  if (from._internal_nodeisprimary() != 0) {
    _internal_set_nodeisprimary(from._internal_nodeisprimary());
  }
  if (from._internal_nodeispreferred() != 0) {
    _internal_set_nodeispreferred(from._internal_nodeispreferred());
  }
  if (from._internal_nodeis_central() != 0) {
    _internal_set_nodeis_central(from._internal_nodeis_central());
  }
  if (from._internal_nodeis_active() != 0) {
    _internal_set_nodeis_active(from._internal_nodeis_active());
  }
  if (from._internal_shard_oid() != 0) {
    _internal_set_shard_oid(from._internal_shard_oid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeDefinition::CopyFrom(const NodeDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.NodeDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDefinition::IsInitialized() const {
  return true;
}

void NodeDefinition::InternalSwap(NodeDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodename_, lhs_arena,
      &other->nodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodehost_, lhs_arena,
      &other->nodehost_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodehost1_, lhs_arena,
      &other->nodehost1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeDefinition, shard_oid_)
      + sizeof(NodeDefinition::shard_oid_)
      - PROTOBUF_FIELD_OFFSET(NodeDefinition, nodeoid_)>(
          reinterpret_cast<char*>(&nodeoid_),
          reinterpret_cast<char*>(&other->nodeoid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeDefinition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_5fstmt_2eproto_getter, &descriptor_table_query_5fstmt_2eproto_once,
      file_level_metadata_query_5fstmt_2eproto[0]);
}

// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto_plan.Node)
}

inline void Node::SharedCtor() {
type_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:proto_plan.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }

void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Node *>(to)->MergeFrom(
      static_cast<const Node &>(from));
}


void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_5fstmt_2eproto_getter, &descriptor_table_query_5fstmt_2eproto_once,
      file_level_metadata_query_5fstmt_2eproto[1]);
}

// ===================================================================

class NodeGroupQueryMem::_Internal {
 public:
};

NodeGroupQueryMem::NodeGroupQueryMem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  query_mem_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.NodeGroupQueryMem)
}
NodeGroupQueryMem::NodeGroupQueryMem(const NodeGroupQueryMem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      query_mem_(from.query_mem_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodegroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nodegroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodegroup().empty()) {
    nodegroup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodegroup(), 
      GetArenaForAllocation());
  }
  ng_oid_ = from.ng_oid_;
  // @@protoc_insertion_point(copy_constructor:proto_plan.NodeGroupQueryMem)
}

inline void NodeGroupQueryMem::SharedCtor() {
nodegroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nodegroup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ng_oid_ = 0u;
}

NodeGroupQueryMem::~NodeGroupQueryMem() {
  // @@protoc_insertion_point(destructor:proto_plan.NodeGroupQueryMem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeGroupQueryMem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nodegroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeGroupQueryMem::ArenaDtor(void* object) {
  NodeGroupQueryMem* _this = reinterpret_cast< NodeGroupQueryMem* >(object);
  (void)_this;
}
void NodeGroupQueryMem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeGroupQueryMem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeGroupQueryMem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.NodeGroupQueryMem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_mem_.Clear();
  nodegroup_.ClearToEmpty();
  ng_oid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeGroupQueryMem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ng_oid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ng_oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nodegroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nodegroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeGroupQueryMem.nodegroup"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 query_mem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_query_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeGroupQueryMem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.NodeGroupQueryMem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ng_oid = 1;
  if (this->_internal_ng_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ng_oid(), target);
  }

  // string nodegroup = 2;
  if (!this->_internal_nodegroup().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodegroup().data(), static_cast<int>(this->_internal_nodegroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeGroupQueryMem.nodegroup");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodegroup(), target);
  }

  // repeated int32 query_mem = 3;
  {
    int byte_size = _query_mem_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_query_mem(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.NodeGroupQueryMem)
  return target;
}

size_t NodeGroupQueryMem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.NodeGroupQueryMem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 query_mem = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->query_mem_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _query_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string nodegroup = 2;
  if (!this->_internal_nodegroup().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodegroup());
  }

  // uint32 ng_oid = 1;
  if (this->_internal_ng_oid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ng_oid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeGroupQueryMem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeGroupQueryMem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeGroupQueryMem::GetClassData() const { return &_class_data_; }

void NodeGroupQueryMem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NodeGroupQueryMem *>(to)->MergeFrom(
      static_cast<const NodeGroupQueryMem &>(from));
}


void NodeGroupQueryMem::MergeFrom(const NodeGroupQueryMem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.NodeGroupQueryMem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  query_mem_.MergeFrom(from.query_mem_);
  if (!from._internal_nodegroup().empty()) {
    _internal_set_nodegroup(from._internal_nodegroup());
  }
  if (from._internal_ng_oid() != 0) {
    _internal_set_ng_oid(from._internal_ng_oid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeGroupQueryMem::CopyFrom(const NodeGroupQueryMem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.NodeGroupQueryMem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGroupQueryMem::IsInitialized() const {
  return true;
}

void NodeGroupQueryMem::InternalSwap(NodeGroupQueryMem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  query_mem_.InternalSwap(&other->query_mem_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodegroup_, lhs_arena,
      &other->nodegroup_, rhs_arena
  );
  swap(ng_oid_, other->ng_oid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGroupQueryMem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_5fstmt_2eproto_getter, &descriptor_table_query_5fstmt_2eproto_once,
      file_level_metadata_query_5fstmt_2eproto[2]);
}

// ===================================================================

class PlannedStmt::_Internal {
 public:
  static const ::proto_plan::Plan& plantree(const PlannedStmt* msg);
  static const ::proto_plan::List& rtable(const PlannedStmt* msg);
  static const ::proto_plan::List& resultrelations(const PlannedStmt* msg);
  static const ::proto_plan::Node& utilitystmt(const PlannedStmt* msg);
  static const ::proto_plan::List& subplans(const PlannedStmt* msg);
  static const ::proto_plan::Bitmapset& rewindplanids(const PlannedStmt* msg);
  static const ::proto_plan::List& rowmarks(const PlannedStmt* msg);
  static const ::proto_plan::List& relationoids(const PlannedStmt* msg);
  static const ::proto_plan::List& invalitems(const PlannedStmt* msg);
  static const ::proto_plan::NodeDefinition& nodesdefinition(const PlannedStmt* msg);
  static const ::proto_plan::List& subplan_ids(const PlannedStmt* msg);
  static const ::proto_plan::List& initplan(const PlannedStmt* msg);
  static const ::proto_plan::List& plan_hint_warning(const PlannedStmt* msg);
  static const ::proto_plan::List& noanalyze_rellist(const PlannedStmt* msg);
  static const ::proto_plan::NodeGroupQueryMem& ng_querymem(const PlannedStmt* msg);
};

const ::proto_plan::Plan&
PlannedStmt::_Internal::plantree(const PlannedStmt* msg) {
  return *msg->plantree_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::rtable(const PlannedStmt* msg) {
  return *msg->rtable_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::resultrelations(const PlannedStmt* msg) {
  return *msg->resultrelations_;
}
const ::proto_plan::Node&
PlannedStmt::_Internal::utilitystmt(const PlannedStmt* msg) {
  return *msg->utilitystmt_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::subplans(const PlannedStmt* msg) {
  return *msg->subplans_;
}
const ::proto_plan::Bitmapset&
PlannedStmt::_Internal::rewindplanids(const PlannedStmt* msg) {
  return *msg->rewindplanids_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::rowmarks(const PlannedStmt* msg) {
  return *msg->rowmarks_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::relationoids(const PlannedStmt* msg) {
  return *msg->relationoids_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::invalitems(const PlannedStmt* msg) {
  return *msg->invalitems_;
}
const ::proto_plan::NodeDefinition&
PlannedStmt::_Internal::nodesdefinition(const PlannedStmt* msg) {
  return *msg->nodesdefinition_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::subplan_ids(const PlannedStmt* msg) {
  return *msg->subplan_ids_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::initplan(const PlannedStmt* msg) {
  return *msg->initplan_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::plan_hint_warning(const PlannedStmt* msg) {
  return *msg->plan_hint_warning_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::noanalyze_rellist(const PlannedStmt* msg) {
  return *msg->noanalyze_rellist_;
}
const ::proto_plan::NodeGroupQueryMem&
PlannedStmt::_Internal::ng_querymem(const PlannedStmt* msg) {
  return *msg->ng_querymem_;
}
void PlannedStmt::clear_plantree() {
  if (GetArenaForAllocation() == nullptr && plantree_ != nullptr) {
    delete plantree_;
  }
  plantree_ = nullptr;
}
void PlannedStmt::clear_rtable() {
  if (GetArenaForAllocation() == nullptr && rtable_ != nullptr) {
    delete rtable_;
  }
  rtable_ = nullptr;
}
void PlannedStmt::clear_resultrelations() {
  if (GetArenaForAllocation() == nullptr && resultrelations_ != nullptr) {
    delete resultrelations_;
  }
  resultrelations_ = nullptr;
}
void PlannedStmt::clear_subplans() {
  if (GetArenaForAllocation() == nullptr && subplans_ != nullptr) {
    delete subplans_;
  }
  subplans_ = nullptr;
}
void PlannedStmt::clear_rewindplanids() {
  if (GetArenaForAllocation() == nullptr && rewindplanids_ != nullptr) {
    delete rewindplanids_;
  }
  rewindplanids_ = nullptr;
}
void PlannedStmt::clear_rowmarks() {
  if (GetArenaForAllocation() == nullptr && rowmarks_ != nullptr) {
    delete rowmarks_;
  }
  rowmarks_ = nullptr;
}
void PlannedStmt::clear_relationoids() {
  if (GetArenaForAllocation() == nullptr && relationoids_ != nullptr) {
    delete relationoids_;
  }
  relationoids_ = nullptr;
}
void PlannedStmt::clear_invalitems() {
  if (GetArenaForAllocation() == nullptr && invalitems_ != nullptr) {
    delete invalitems_;
  }
  invalitems_ = nullptr;
}
void PlannedStmt::clear_subplan_ids() {
  if (GetArenaForAllocation() == nullptr && subplan_ids_ != nullptr) {
    delete subplan_ids_;
  }
  subplan_ids_ = nullptr;
}
void PlannedStmt::clear_initplan() {
  if (GetArenaForAllocation() == nullptr && initplan_ != nullptr) {
    delete initplan_;
  }
  initplan_ = nullptr;
}
void PlannedStmt::clear_plan_hint_warning() {
  if (GetArenaForAllocation() == nullptr && plan_hint_warning_ != nullptr) {
    delete plan_hint_warning_;
  }
  plan_hint_warning_ = nullptr;
}
void PlannedStmt::clear_noanalyze_rellist() {
  if (GetArenaForAllocation() == nullptr && noanalyze_rellist_ != nullptr) {
    delete noanalyze_rellist_;
  }
  noanalyze_rellist_ = nullptr;
}
PlannedStmt::PlannedStmt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  query_mem_(arena),
  assigned_query_mem_(arena),
  bucketmap_(arena),
  bucketcnt_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.PlannedStmt)
}
PlannedStmt::PlannedStmt(const PlannedStmt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      query_mem_(from.query_mem_),
      assigned_query_mem_(from.assigned_query_mem_),
      bucketmap_(from.bucketmap_),
      bucketcnt_(from.bucketcnt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_string().empty()) {
    query_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_plantree()) {
    plantree_ = new ::proto_plan::Plan(*from.plantree_);
  } else {
    plantree_ = nullptr;
  }
  if (from._internal_has_rtable()) {
    rtable_ = new ::proto_plan::List(*from.rtable_);
  } else {
    rtable_ = nullptr;
  }
  if (from._internal_has_resultrelations()) {
    resultrelations_ = new ::proto_plan::List(*from.resultrelations_);
  } else {
    resultrelations_ = nullptr;
  }
  if (from._internal_has_utilitystmt()) {
    utilitystmt_ = new ::proto_plan::Node(*from.utilitystmt_);
  } else {
    utilitystmt_ = nullptr;
  }
  if (from._internal_has_subplans()) {
    subplans_ = new ::proto_plan::List(*from.subplans_);
  } else {
    subplans_ = nullptr;
  }
  if (from._internal_has_rewindplanids()) {
    rewindplanids_ = new ::proto_plan::Bitmapset(*from.rewindplanids_);
  } else {
    rewindplanids_ = nullptr;
  }
  if (from._internal_has_rowmarks()) {
    rowmarks_ = new ::proto_plan::List(*from.rowmarks_);
  } else {
    rowmarks_ = nullptr;
  }
  if (from._internal_has_relationoids()) {
    relationoids_ = new ::proto_plan::List(*from.relationoids_);
  } else {
    relationoids_ = nullptr;
  }
  if (from._internal_has_invalitems()) {
    invalitems_ = new ::proto_plan::List(*from.invalitems_);
  } else {
    invalitems_ = nullptr;
  }
  if (from._internal_has_nodesdefinition()) {
    nodesdefinition_ = new ::proto_plan::NodeDefinition(*from.nodesdefinition_);
  } else {
    nodesdefinition_ = nullptr;
  }
  if (from._internal_has_subplan_ids()) {
    subplan_ids_ = new ::proto_plan::List(*from.subplan_ids_);
  } else {
    subplan_ids_ = nullptr;
  }
  if (from._internal_has_initplan()) {
    initplan_ = new ::proto_plan::List(*from.initplan_);
  } else {
    initplan_ = nullptr;
  }
  if (from._internal_has_plan_hint_warning()) {
    plan_hint_warning_ = new ::proto_plan::List(*from.plan_hint_warning_);
  } else {
    plan_hint_warning_ = nullptr;
  }
  if (from._internal_has_noanalyze_rellist()) {
    noanalyze_rellist_ = new ::proto_plan::List(*from.noanalyze_rellist_);
  } else {
    noanalyze_rellist_ = nullptr;
  }
  if (from._internal_has_ng_querymem()) {
    ng_querymem_ = new ::proto_plan::NodeGroupQueryMem(*from.ng_querymem_);
  } else {
    ng_querymem_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cause_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cause_type_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.PlannedStmt)
}

inline void PlannedStmt::SharedCtor() {
query_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plantree_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cause_type_) -
    reinterpret_cast<char*>(&plantree_)) + sizeof(cause_type_));
}

PlannedStmt::~PlannedStmt() {
  // @@protoc_insertion_point(destructor:proto_plan.PlannedStmt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlannedStmt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plantree_;
  if (this != internal_default_instance()) delete rtable_;
  if (this != internal_default_instance()) delete resultrelations_;
  if (this != internal_default_instance()) delete utilitystmt_;
  if (this != internal_default_instance()) delete subplans_;
  if (this != internal_default_instance()) delete rewindplanids_;
  if (this != internal_default_instance()) delete rowmarks_;
  if (this != internal_default_instance()) delete relationoids_;
  if (this != internal_default_instance()) delete invalitems_;
  if (this != internal_default_instance()) delete nodesdefinition_;
  if (this != internal_default_instance()) delete subplan_ids_;
  if (this != internal_default_instance()) delete initplan_;
  if (this != internal_default_instance()) delete plan_hint_warning_;
  if (this != internal_default_instance()) delete noanalyze_rellist_;
  if (this != internal_default_instance()) delete ng_querymem_;
}

void PlannedStmt::ArenaDtor(void* object) {
  PlannedStmt* _this = reinterpret_cast< PlannedStmt* >(object);
  (void)_this;
}
void PlannedStmt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlannedStmt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlannedStmt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.PlannedStmt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_mem_.Clear();
  assigned_query_mem_.Clear();
  bucketmap_.Clear();
  bucketcnt_.Clear();
  query_string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && plantree_ != nullptr) {
    delete plantree_;
  }
  plantree_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rtable_ != nullptr) {
    delete rtable_;
  }
  rtable_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resultrelations_ != nullptr) {
    delete resultrelations_;
  }
  resultrelations_ = nullptr;
  if (GetArenaForAllocation() == nullptr && utilitystmt_ != nullptr) {
    delete utilitystmt_;
  }
  utilitystmt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subplans_ != nullptr) {
    delete subplans_;
  }
  subplans_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rewindplanids_ != nullptr) {
    delete rewindplanids_;
  }
  rewindplanids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rowmarks_ != nullptr) {
    delete rowmarks_;
  }
  rowmarks_ = nullptr;
  if (GetArenaForAllocation() == nullptr && relationoids_ != nullptr) {
    delete relationoids_;
  }
  relationoids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && invalitems_ != nullptr) {
    delete invalitems_;
  }
  invalitems_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nodesdefinition_ != nullptr) {
    delete nodesdefinition_;
  }
  nodesdefinition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subplan_ids_ != nullptr) {
    delete subplan_ids_;
  }
  subplan_ids_ = nullptr;
  if (GetArenaForAllocation() == nullptr && initplan_ != nullptr) {
    delete initplan_;
  }
  initplan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && plan_hint_warning_ != nullptr) {
    delete plan_hint_warning_;
  }
  plan_hint_warning_ = nullptr;
  if (GetArenaForAllocation() == nullptr && noanalyze_rellist_ != nullptr) {
    delete noanalyze_rellist_;
  }
  noanalyze_rellist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ng_querymem_ != nullptr) {
    delete ng_querymem_;
  }
  ng_querymem_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cause_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cause_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlannedStmt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.CmdType commandType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commandtype(static_cast<::proto_plan::CmdType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 queryId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          queryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasReturning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          hasreturning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasModifyingCTE = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hasmodifyingcte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasIgnore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          hasignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool canSetTag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          cansettag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool transientPlan = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          transientplan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dependsOnRole = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          dependsonrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_flt_frame = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          is_flt_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.Plan planTree = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_plantree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List rtable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List resultRelations = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_resultrelations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.Node utilityStmt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_utilitystmt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List subplans = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_subplans(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.Bitmapset rewindPlanIDs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewindplanids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List rowMarks = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowmarks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List relationOids = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationoids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List invalItems = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_invalitems(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nParamExec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          nparamexec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_streams = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          num_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_push_sql_num = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          max_push_sql_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gather_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          gather_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_nodes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          num_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.NodeDefinition nodesDefinition = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodesdefinition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 instrument_option = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          instrument_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_plannodes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          num_plannodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 query_mem = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_query_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 224) {
          _internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 assigned_query_mem = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_assigned_query_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 232) {
          _internal_add_assigned_query_mem(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_dynmaic_smp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          is_dynmaic_smp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_max_cpu = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          dynsmp_max_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_avail_cpu = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          dynsmp_avail_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_cpu_util = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dynsmp_cpu_util_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_active_statement = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dynsmp_active_statement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double dynsmp_query_estimate_cpu_usge = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          dynsmp_query_estimate_cpu_usge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_plan_optimal_dop = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dynsmp_plan_optimal_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_plan_original_dop = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          dynsmp_plan_original_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_dop_mem_limit = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          dynsmp_dop_mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dynsmp_min_non_spill_dop = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          dynsmp_min_non_spill_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_bucketmaps = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          num_bucketmaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bucketMap = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bucketmap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_bucketmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bucketCnt = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bucketcnt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_bucketcnt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query_string = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_query_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.PlannedStmt.query_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List subplan_ids = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_subplan_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List initPlan = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_initplan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataDestRelIndex = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          datadestrelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxBloomFilterNum = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          maxbloomfilternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 query_dop = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          query_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double plannertime = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          plannertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool in_compute_pool = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          in_compute_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_obsrel = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          has_obsrel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List plan_hint_warning = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan_hint_warning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List noanalyze_rellist = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_noanalyze_rellist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ng_num = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ng_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ng_querymem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ng_use_planA = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          ng_use_plana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isRowTriggerShippable = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          isrowtriggershippable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_stream_plan = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          is_stream_plan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool multi_node_hint = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          multi_node_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uniqueSQLId = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uniquesqlid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cause_type = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          cause_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlannedStmt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.PlannedStmt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .proto_plan.CmdType commandType = 2;
  if (this->_internal_commandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commandtype(), target);
  }

  // uint64 queryId = 3;
  if (this->_internal_queryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_queryid(), target);
  }

  // bool hasReturning = 4;
  if (this->_internal_hasreturning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hasreturning(), target);
  }

  // bool hasModifyingCTE = 5;
  if (this->_internal_hasmodifyingcte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hasmodifyingcte(), target);
  }

  // bool hasIgnore = 6;
  if (this->_internal_hasignore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hasignore(), target);
  }

  // bool canSetTag = 7;
  if (this->_internal_cansettag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_cansettag(), target);
  }

  // bool transientPlan = 8;
  if (this->_internal_transientplan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_transientplan(), target);
  }

  // bool dependsOnRole = 9;
  if (this->_internal_dependsonrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_dependsonrole(), target);
  }

  // bool is_flt_frame = 10;
  if (this->_internal_is_flt_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_flt_frame(), target);
  }

  // .proto_plan.Plan planTree = 11;
  if (this->_internal_has_plantree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::plantree(this), target, stream);
  }

  // .proto_plan.List rtable = 12;
  if (this->_internal_has_rtable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rtable(this), target, stream);
  }

  // .proto_plan.List resultRelations = 13;
  if (this->_internal_has_resultrelations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::resultrelations(this), target, stream);
  }

  // .proto_plan.Node utilityStmt = 14;
  if (this->_internal_has_utilitystmt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::utilitystmt(this), target, stream);
  }

  // .proto_plan.List subplans = 15;
  if (this->_internal_has_subplans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::subplans(this), target, stream);
  }

  // .proto_plan.Bitmapset rewindPlanIDs = 16;
  if (this->_internal_has_rewindplanids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::rewindplanids(this), target, stream);
  }

  // .proto_plan.List rowMarks = 17;
  if (this->_internal_has_rowmarks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::rowmarks(this), target, stream);
  }

  // .proto_plan.List relationOids = 18;
  if (this->_internal_has_relationoids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::relationoids(this), target, stream);
  }

  // .proto_plan.List invalItems = 19;
  if (this->_internal_has_invalitems()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::invalitems(this), target, stream);
  }

  // int32 nParamExec = 20;
  if (this->_internal_nparamexec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_nparamexec(), target);
  }

  // int32 num_streams = 21;
  if (this->_internal_num_streams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_num_streams(), target);
  }

  // int32 max_push_sql_num = 22;
  if (this->_internal_max_push_sql_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_max_push_sql_num(), target);
  }

  // int32 gather_count = 23;
  if (this->_internal_gather_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_gather_count(), target);
  }

  // int32 num_nodes = 24;
  if (this->_internal_num_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_num_nodes(), target);
  }

  // .proto_plan.NodeDefinition nodesDefinition = 25;
  if (this->_internal_has_nodesdefinition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::nodesdefinition(this), target, stream);
  }

  // int32 instrument_option = 26;
  if (this->_internal_instrument_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_instrument_option(), target);
  }

  // int32 num_plannodes = 27;
  if (this->_internal_num_plannodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_num_plannodes(), target);
  }

  // repeated int32 query_mem = 28;
  {
    int byte_size = _query_mem_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          28, _internal_query_mem(), byte_size, target);
    }
  }

  // repeated int32 assigned_query_mem = 29;
  {
    int byte_size = _assigned_query_mem_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          29, _internal_assigned_query_mem(), byte_size, target);
    }
  }

  // bool is_dynmaic_smp = 30;
  if (this->_internal_is_dynmaic_smp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_is_dynmaic_smp(), target);
  }

  // int32 dynsmp_max_cpu = 31;
  if (this->_internal_dynsmp_max_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_dynsmp_max_cpu(), target);
  }

  // int32 dynsmp_avail_cpu = 32;
  if (this->_internal_dynsmp_avail_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_dynsmp_avail_cpu(), target);
  }

  // int32 dynsmp_cpu_util = 33;
  if (this->_internal_dynsmp_cpu_util() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_dynsmp_cpu_util(), target);
  }

  // int32 dynsmp_active_statement = 34;
  if (this->_internal_dynsmp_active_statement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_dynsmp_active_statement(), target);
  }

  // double dynsmp_query_estimate_cpu_usge = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dynsmp_query_estimate_cpu_usge = this->_internal_dynsmp_query_estimate_cpu_usge();
  uint64_t raw_dynsmp_query_estimate_cpu_usge;
  memcpy(&raw_dynsmp_query_estimate_cpu_usge, &tmp_dynsmp_query_estimate_cpu_usge, sizeof(tmp_dynsmp_query_estimate_cpu_usge));
  if (raw_dynsmp_query_estimate_cpu_usge != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_dynsmp_query_estimate_cpu_usge(), target);
  }

  // int32 dynsmp_plan_optimal_dop = 36;
  if (this->_internal_dynsmp_plan_optimal_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_dynsmp_plan_optimal_dop(), target);
  }

  // int32 dynsmp_plan_original_dop = 37;
  if (this->_internal_dynsmp_plan_original_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_dynsmp_plan_original_dop(), target);
  }

  // int32 dynsmp_dop_mem_limit = 38;
  if (this->_internal_dynsmp_dop_mem_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_dynsmp_dop_mem_limit(), target);
  }

  // int32 dynsmp_min_non_spill_dop = 39;
  if (this->_internal_dynsmp_min_non_spill_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_dynsmp_min_non_spill_dop(), target);
  }

  // int32 num_bucketmaps = 40;
  if (this->_internal_num_bucketmaps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_num_bucketmaps(), target);
  }

  // repeated uint32 bucketMap = 41;
  {
    int byte_size = _bucketmap_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          41, _internal_bucketmap(), byte_size, target);
    }
  }

  // repeated int32 bucketCnt = 42;
  {
    int byte_size = _bucketcnt_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          42, _internal_bucketcnt(), byte_size, target);
    }
  }

  // string query_string = 43;
  if (!this->_internal_query_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_string().data(), static_cast<int>(this->_internal_query_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.PlannedStmt.query_string");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_query_string(), target);
  }

  // .proto_plan.List subplan_ids = 44;
  if (this->_internal_has_subplan_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::subplan_ids(this), target, stream);
  }

  // .proto_plan.List initPlan = 45;
  if (this->_internal_has_initplan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::initplan(this), target, stream);
  }

  // uint32 dataDestRelIndex = 46;
  if (this->_internal_datadestrelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_datadestrelindex(), target);
  }

  // int32 MaxBloomFilterNum = 47;
  if (this->_internal_maxbloomfilternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_maxbloomfilternum(), target);
  }

  // int32 query_dop = 48;
  if (this->_internal_query_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_query_dop(), target);
  }

  // double plannertime = 49;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_plannertime = this->_internal_plannertime();
  uint64_t raw_plannertime;
  memcpy(&raw_plannertime, &tmp_plannertime, sizeof(tmp_plannertime));
  if (raw_plannertime != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_plannertime(), target);
  }

  // bool in_compute_pool = 50;
  if (this->_internal_in_compute_pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_in_compute_pool(), target);
  }

  // bool has_obsrel = 51;
  if (this->_internal_has_obsrel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_has_obsrel(), target);
  }

  // .proto_plan.List plan_hint_warning = 52;
  if (this->_internal_has_plan_hint_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::plan_hint_warning(this), target, stream);
  }

  // .proto_plan.List noanalyze_rellist = 53;
  if (this->_internal_has_noanalyze_rellist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::noanalyze_rellist(this), target, stream);
  }

  // int32 ng_num = 54;
  if (this->_internal_ng_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_ng_num(), target);
  }

  // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
  if (this->_internal_has_ng_querymem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::ng_querymem(this), target, stream);
  }

  // bool ng_use_planA = 56;
  if (this->_internal_ng_use_plana() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_ng_use_plana(), target);
  }

  // bool isRowTriggerShippable = 57;
  if (this->_internal_isrowtriggershippable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_isrowtriggershippable(), target);
  }

  // bool is_stream_plan = 58;
  if (this->_internal_is_stream_plan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_is_stream_plan(), target);
  }

  // bool multi_node_hint = 59;
  if (this->_internal_multi_node_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_multi_node_hint(), target);
  }

  // uint64 uniqueSQLId = 60;
  if (this->_internal_uniquesqlid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(60, this->_internal_uniquesqlid(), target);
  }

  // uint32 cause_type = 61;
  if (this->_internal_cause_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_cause_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.PlannedStmt)
  return target;
}

size_t PlannedStmt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.PlannedStmt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 query_mem = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->query_mem_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _query_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 assigned_query_mem = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->assigned_query_mem_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _assigned_query_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bucketMap = 41;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bucketmap_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucketmap_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bucketCnt = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bucketcnt_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucketcnt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string query_string = 43;
  if (!this->_internal_query_string().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_string());
  }

  // .proto_plan.Plan planTree = 11;
  if (this->_internal_has_plantree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plantree_);
  }

  // .proto_plan.List rtable = 12;
  if (this->_internal_has_rtable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rtable_);
  }

  // .proto_plan.List resultRelations = 13;
  if (this->_internal_has_resultrelations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resultrelations_);
  }

  // .proto_plan.Node utilityStmt = 14;
  if (this->_internal_has_utilitystmt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utilitystmt_);
  }

  // .proto_plan.List subplans = 15;
  if (this->_internal_has_subplans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subplans_);
  }

  // .proto_plan.Bitmapset rewindPlanIDs = 16;
  if (this->_internal_has_rewindplanids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewindplanids_);
  }

  // .proto_plan.List rowMarks = 17;
  if (this->_internal_has_rowmarks()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowmarks_);
  }

  // .proto_plan.List relationOids = 18;
  if (this->_internal_has_relationoids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relationoids_);
  }

  // .proto_plan.List invalItems = 19;
  if (this->_internal_has_invalitems()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invalitems_);
  }

  // .proto_plan.NodeDefinition nodesDefinition = 25;
  if (this->_internal_has_nodesdefinition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodesdefinition_);
  }

  // .proto_plan.List subplan_ids = 44;
  if (this->_internal_has_subplan_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subplan_ids_);
  }

  // .proto_plan.List initPlan = 45;
  if (this->_internal_has_initplan()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initplan_);
  }

  // .proto_plan.List plan_hint_warning = 52;
  if (this->_internal_has_plan_hint_warning()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_hint_warning_);
  }

  // .proto_plan.List noanalyze_rellist = 53;
  if (this->_internal_has_noanalyze_rellist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *noanalyze_rellist_);
  }

  // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
  if (this->_internal_has_ng_querymem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ng_querymem_);
  }

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .proto_plan.CmdType commandType = 2;
  if (this->_internal_commandtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commandtype());
  }

  // uint64 queryId = 3;
  if (this->_internal_queryid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_queryid());
  }

  // bool hasReturning = 4;
  if (this->_internal_hasreturning() != 0) {
    total_size += 1 + 1;
  }

  // bool hasModifyingCTE = 5;
  if (this->_internal_hasmodifyingcte() != 0) {
    total_size += 1 + 1;
  }

  // bool hasIgnore = 6;
  if (this->_internal_hasignore() != 0) {
    total_size += 1 + 1;
  }

  // bool canSetTag = 7;
  if (this->_internal_cansettag() != 0) {
    total_size += 1 + 1;
  }

  // bool transientPlan = 8;
  if (this->_internal_transientplan() != 0) {
    total_size += 1 + 1;
  }

  // bool dependsOnRole = 9;
  if (this->_internal_dependsonrole() != 0) {
    total_size += 1 + 1;
  }

  // bool is_flt_frame = 10;
  if (this->_internal_is_flt_frame() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dynmaic_smp = 30;
  if (this->_internal_is_dynmaic_smp() != 0) {
    total_size += 2 + 1;
  }

  // int32 nParamExec = 20;
  if (this->_internal_nparamexec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nparamexec());
  }

  // int32 num_streams = 21;
  if (this->_internal_num_streams() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_streams());
  }

  // int32 max_push_sql_num = 22;
  if (this->_internal_max_push_sql_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_push_sql_num());
  }

  // int32 gather_count = 23;
  if (this->_internal_gather_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gather_count());
  }

  // int32 num_nodes = 24;
  if (this->_internal_num_nodes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_nodes());
  }

  // int32 instrument_option = 26;
  if (this->_internal_instrument_option() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instrument_option());
  }

  // int32 num_plannodes = 27;
  if (this->_internal_num_plannodes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_plannodes());
  }

  // int32 dynsmp_max_cpu = 31;
  if (this->_internal_dynsmp_max_cpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_max_cpu());
  }

  // int32 dynsmp_avail_cpu = 32;
  if (this->_internal_dynsmp_avail_cpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_avail_cpu());
  }

  // int32 dynsmp_cpu_util = 33;
  if (this->_internal_dynsmp_cpu_util() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_cpu_util());
  }

  // double dynsmp_query_estimate_cpu_usge = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dynsmp_query_estimate_cpu_usge = this->_internal_dynsmp_query_estimate_cpu_usge();
  uint64_t raw_dynsmp_query_estimate_cpu_usge;
  memcpy(&raw_dynsmp_query_estimate_cpu_usge, &tmp_dynsmp_query_estimate_cpu_usge, sizeof(tmp_dynsmp_query_estimate_cpu_usge));
  if (raw_dynsmp_query_estimate_cpu_usge != 0) {
    total_size += 2 + 8;
  }

  // int32 dynsmp_active_statement = 34;
  if (this->_internal_dynsmp_active_statement() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_active_statement());
  }

  // int32 dynsmp_plan_optimal_dop = 36;
  if (this->_internal_dynsmp_plan_optimal_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_plan_optimal_dop());
  }

  // int32 dynsmp_plan_original_dop = 37;
  if (this->_internal_dynsmp_plan_original_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_plan_original_dop());
  }

  // int32 dynsmp_dop_mem_limit = 38;
  if (this->_internal_dynsmp_dop_mem_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_dop_mem_limit());
  }

  // int32 dynsmp_min_non_spill_dop = 39;
  if (this->_internal_dynsmp_min_non_spill_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_min_non_spill_dop());
  }

  // int32 num_bucketmaps = 40;
  if (this->_internal_num_bucketmaps() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_bucketmaps());
  }

  // uint32 dataDestRelIndex = 46;
  if (this->_internal_datadestrelindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_datadestrelindex());
  }

  // int32 MaxBloomFilterNum = 47;
  if (this->_internal_maxbloomfilternum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxbloomfilternum());
  }

  // double plannertime = 49;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_plannertime = this->_internal_plannertime();
  uint64_t raw_plannertime;
  memcpy(&raw_plannertime, &tmp_plannertime, sizeof(tmp_plannertime));
  if (raw_plannertime != 0) {
    total_size += 2 + 8;
  }

  // int32 query_dop = 48;
  if (this->_internal_query_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_query_dop());
  }

  // bool in_compute_pool = 50;
  if (this->_internal_in_compute_pool() != 0) {
    total_size += 2 + 1;
  }

  // bool has_obsrel = 51;
  if (this->_internal_has_obsrel() != 0) {
    total_size += 2 + 1;
  }

  // bool ng_use_planA = 56;
  if (this->_internal_ng_use_plana() != 0) {
    total_size += 2 + 1;
  }

  // bool isRowTriggerShippable = 57;
  if (this->_internal_isrowtriggershippable() != 0) {
    total_size += 2 + 1;
  }

  // int32 ng_num = 54;
  if (this->_internal_ng_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ng_num());
  }

  // bool is_stream_plan = 58;
  if (this->_internal_is_stream_plan() != 0) {
    total_size += 2 + 1;
  }

  // bool multi_node_hint = 59;
  if (this->_internal_multi_node_hint() != 0) {
    total_size += 2 + 1;
  }

  // uint64 uniqueSQLId = 60;
  if (this->_internal_uniquesqlid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uniquesqlid());
  }

  // uint32 cause_type = 61;
  if (this->_internal_cause_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cause_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlannedStmt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlannedStmt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlannedStmt::GetClassData() const { return &_class_data_; }

void PlannedStmt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlannedStmt *>(to)->MergeFrom(
      static_cast<const PlannedStmt &>(from));
}


void PlannedStmt::MergeFrom(const PlannedStmt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.PlannedStmt)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  query_mem_.MergeFrom(from.query_mem_);
  assigned_query_mem_.MergeFrom(from.assigned_query_mem_);
  bucketmap_.MergeFrom(from.bucketmap_);
  bucketcnt_.MergeFrom(from.bucketcnt_);
  if (!from._internal_query_string().empty()) {
    _internal_set_query_string(from._internal_query_string());
  }
  if (from._internal_has_plantree()) {
    _internal_mutable_plantree()->::proto_plan::Plan::MergeFrom(from._internal_plantree());
  }
  if (from._internal_has_rtable()) {
    _internal_mutable_rtable()->::proto_plan::List::MergeFrom(from._internal_rtable());
  }
  if (from._internal_has_resultrelations()) {
    _internal_mutable_resultrelations()->::proto_plan::List::MergeFrom(from._internal_resultrelations());
  }
  if (from._internal_has_utilitystmt()) {
    _internal_mutable_utilitystmt()->::proto_plan::Node::MergeFrom(from._internal_utilitystmt());
  }
  if (from._internal_has_subplans()) {
    _internal_mutable_subplans()->::proto_plan::List::MergeFrom(from._internal_subplans());
  }
  if (from._internal_has_rewindplanids()) {
    _internal_mutable_rewindplanids()->::proto_plan::Bitmapset::MergeFrom(from._internal_rewindplanids());
  }
  if (from._internal_has_rowmarks()) {
    _internal_mutable_rowmarks()->::proto_plan::List::MergeFrom(from._internal_rowmarks());
  }
  if (from._internal_has_relationoids()) {
    _internal_mutable_relationoids()->::proto_plan::List::MergeFrom(from._internal_relationoids());
  }
  if (from._internal_has_invalitems()) {
    _internal_mutable_invalitems()->::proto_plan::List::MergeFrom(from._internal_invalitems());
  }
  if (from._internal_has_nodesdefinition()) {
    _internal_mutable_nodesdefinition()->::proto_plan::NodeDefinition::MergeFrom(from._internal_nodesdefinition());
  }
  if (from._internal_has_subplan_ids()) {
    _internal_mutable_subplan_ids()->::proto_plan::List::MergeFrom(from._internal_subplan_ids());
  }
  if (from._internal_has_initplan()) {
    _internal_mutable_initplan()->::proto_plan::List::MergeFrom(from._internal_initplan());
  }
  if (from._internal_has_plan_hint_warning()) {
    _internal_mutable_plan_hint_warning()->::proto_plan::List::MergeFrom(from._internal_plan_hint_warning());
  }
  if (from._internal_has_noanalyze_rellist()) {
    _internal_mutable_noanalyze_rellist()->::proto_plan::List::MergeFrom(from._internal_noanalyze_rellist());
  }
  if (from._internal_has_ng_querymem()) {
    _internal_mutable_ng_querymem()->::proto_plan::NodeGroupQueryMem::MergeFrom(from._internal_ng_querymem());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_commandtype() != 0) {
    _internal_set_commandtype(from._internal_commandtype());
  }
  if (from._internal_queryid() != 0) {
    _internal_set_queryid(from._internal_queryid());
  }
  if (from._internal_hasreturning() != 0) {
    _internal_set_hasreturning(from._internal_hasreturning());
  }
  if (from._internal_hasmodifyingcte() != 0) {
    _internal_set_hasmodifyingcte(from._internal_hasmodifyingcte());
  }
  if (from._internal_hasignore() != 0) {
    _internal_set_hasignore(from._internal_hasignore());
  }
  if (from._internal_cansettag() != 0) {
    _internal_set_cansettag(from._internal_cansettag());
  }
  if (from._internal_transientplan() != 0) {
    _internal_set_transientplan(from._internal_transientplan());
  }
  if (from._internal_dependsonrole() != 0) {
    _internal_set_dependsonrole(from._internal_dependsonrole());
  }
  if (from._internal_is_flt_frame() != 0) {
    _internal_set_is_flt_frame(from._internal_is_flt_frame());
  }
  if (from._internal_is_dynmaic_smp() != 0) {
    _internal_set_is_dynmaic_smp(from._internal_is_dynmaic_smp());
  }
  if (from._internal_nparamexec() != 0) {
    _internal_set_nparamexec(from._internal_nparamexec());
  }
  if (from._internal_num_streams() != 0) {
    _internal_set_num_streams(from._internal_num_streams());
  }
  if (from._internal_max_push_sql_num() != 0) {
    _internal_set_max_push_sql_num(from._internal_max_push_sql_num());
  }
  if (from._internal_gather_count() != 0) {
    _internal_set_gather_count(from._internal_gather_count());
  }
  if (from._internal_num_nodes() != 0) {
    _internal_set_num_nodes(from._internal_num_nodes());
  }
  if (from._internal_instrument_option() != 0) {
    _internal_set_instrument_option(from._internal_instrument_option());
  }
  if (from._internal_num_plannodes() != 0) {
    _internal_set_num_plannodes(from._internal_num_plannodes());
  }
  if (from._internal_dynsmp_max_cpu() != 0) {
    _internal_set_dynsmp_max_cpu(from._internal_dynsmp_max_cpu());
  }
  if (from._internal_dynsmp_avail_cpu() != 0) {
    _internal_set_dynsmp_avail_cpu(from._internal_dynsmp_avail_cpu());
  }
  if (from._internal_dynsmp_cpu_util() != 0) {
    _internal_set_dynsmp_cpu_util(from._internal_dynsmp_cpu_util());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dynsmp_query_estimate_cpu_usge = from._internal_dynsmp_query_estimate_cpu_usge();
  uint64_t raw_dynsmp_query_estimate_cpu_usge;
  memcpy(&raw_dynsmp_query_estimate_cpu_usge, &tmp_dynsmp_query_estimate_cpu_usge, sizeof(tmp_dynsmp_query_estimate_cpu_usge));
  if (raw_dynsmp_query_estimate_cpu_usge != 0) {
    _internal_set_dynsmp_query_estimate_cpu_usge(from._internal_dynsmp_query_estimate_cpu_usge());
  }
  if (from._internal_dynsmp_active_statement() != 0) {
    _internal_set_dynsmp_active_statement(from._internal_dynsmp_active_statement());
  }
  if (from._internal_dynsmp_plan_optimal_dop() != 0) {
    _internal_set_dynsmp_plan_optimal_dop(from._internal_dynsmp_plan_optimal_dop());
  }
  if (from._internal_dynsmp_plan_original_dop() != 0) {
    _internal_set_dynsmp_plan_original_dop(from._internal_dynsmp_plan_original_dop());
  }
  if (from._internal_dynsmp_dop_mem_limit() != 0) {
    _internal_set_dynsmp_dop_mem_limit(from._internal_dynsmp_dop_mem_limit());
  }
  if (from._internal_dynsmp_min_non_spill_dop() != 0) {
    _internal_set_dynsmp_min_non_spill_dop(from._internal_dynsmp_min_non_spill_dop());
  }
  if (from._internal_num_bucketmaps() != 0) {
    _internal_set_num_bucketmaps(from._internal_num_bucketmaps());
  }
  if (from._internal_datadestrelindex() != 0) {
    _internal_set_datadestrelindex(from._internal_datadestrelindex());
  }
  if (from._internal_maxbloomfilternum() != 0) {
    _internal_set_maxbloomfilternum(from._internal_maxbloomfilternum());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_plannertime = from._internal_plannertime();
  uint64_t raw_plannertime;
  memcpy(&raw_plannertime, &tmp_plannertime, sizeof(tmp_plannertime));
  if (raw_plannertime != 0) {
    _internal_set_plannertime(from._internal_plannertime());
  }
  if (from._internal_query_dop() != 0) {
    _internal_set_query_dop(from._internal_query_dop());
  }
  if (from._internal_in_compute_pool() != 0) {
    _internal_set_in_compute_pool(from._internal_in_compute_pool());
  }
  if (from._internal_has_obsrel() != 0) {
    _internal_set_has_obsrel(from._internal_has_obsrel());
  }
  if (from._internal_ng_use_plana() != 0) {
    _internal_set_ng_use_plana(from._internal_ng_use_plana());
  }
  if (from._internal_isrowtriggershippable() != 0) {
    _internal_set_isrowtriggershippable(from._internal_isrowtriggershippable());
  }
  if (from._internal_ng_num() != 0) {
    _internal_set_ng_num(from._internal_ng_num());
  }
  if (from._internal_is_stream_plan() != 0) {
    _internal_set_is_stream_plan(from._internal_is_stream_plan());
  }
  if (from._internal_multi_node_hint() != 0) {
    _internal_set_multi_node_hint(from._internal_multi_node_hint());
  }
  if (from._internal_uniquesqlid() != 0) {
    _internal_set_uniquesqlid(from._internal_uniquesqlid());
  }
  if (from._internal_cause_type() != 0) {
    _internal_set_cause_type(from._internal_cause_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlannedStmt::CopyFrom(const PlannedStmt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.PlannedStmt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannedStmt::IsInitialized() const {
  return true;
}

void PlannedStmt::InternalSwap(PlannedStmt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  query_mem_.InternalSwap(&other->query_mem_);
  assigned_query_mem_.InternalSwap(&other->assigned_query_mem_);
  bucketmap_.InternalSwap(&other->bucketmap_);
  bucketcnt_.InternalSwap(&other->bucketcnt_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_string_, lhs_arena,
      &other->query_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlannedStmt, cause_type_)
      + sizeof(PlannedStmt::cause_type_)
      - PROTOBUF_FIELD_OFFSET(PlannedStmt, plantree_)>(
          reinterpret_cast<char*>(&plantree_),
          reinterpret_cast<char*>(&other->plantree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannedStmt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_query_5fstmt_2eproto_getter, &descriptor_table_query_5fstmt_2eproto_once,
      file_level_metadata_query_5fstmt_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_plan::NodeDefinition* Arena::CreateMaybeMessage< ::proto_plan::NodeDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::NodeDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Node* Arena::CreateMaybeMessage< ::proto_plan::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::NodeGroupQueryMem* Arena::CreateMaybeMessage< ::proto_plan::NodeGroupQueryMem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::NodeGroupQueryMem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::PlannedStmt* Arena::CreateMaybeMessage< ::proto_plan::PlannedStmt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::PlannedStmt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
