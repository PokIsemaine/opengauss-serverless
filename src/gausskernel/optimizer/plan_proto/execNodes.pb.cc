// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execNodes.proto

#include "execNodes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto_plan {
constexpr Bitmapset::Bitmapset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : words_()
  , _words_cached_byte_size_(0)
  , nwords_(0){}
struct BitmapsetDefaultTypeInternal {
  constexpr BitmapsetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BitmapsetDefaultTypeInternal() {}
  union {
    Bitmapset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BitmapsetDefaultTypeInternal _Bitmapset_default_instance_;
constexpr ListCell::ListCell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : next_(nullptr)
  , _oneof_case_{}{}
struct ListCellDefaultTypeInternal {
  constexpr ListCellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCellDefaultTypeInternal() {}
  union {
    ListCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCellDefaultTypeInternal _ListCell_default_instance_;
constexpr List::List(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(nullptr)
  , tail_(nullptr)
  , type_(0)

  , length_(0){}
struct ListDefaultTypeInternal {
  constexpr ListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDefaultTypeInternal() {}
  union {
    List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDefaultTypeInternal _List_default_instance_;
constexpr Distribution::Distribution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bms_data_nodeids_(nullptr)
  , group_oid_(0u){}
struct DistributionDefaultTypeInternal {
  constexpr DistributionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistributionDefaultTypeInternal() {}
  union {
    Distribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistributionDefaultTypeInternal _Distribution_default_instance_;
constexpr Expr::Expr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selec_(0)
  , type_(0)
{}
struct ExprDefaultTypeInternal {
  constexpr ExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExprDefaultTypeInternal() {}
  union {
    Expr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExprDefaultTypeInternal _Expr_default_instance_;
constexpr Cursor_Data::Cursor_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_count_(0)
  , cur_dno_(0)
  , is_open_(false)
  , found_(false)
  , not_found_(false)
  , null_open_(false)
  , null_fetch_(false){}
struct Cursor_DataDefaultTypeInternal {
  constexpr Cursor_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Cursor_DataDefaultTypeInternal() {}
  union {
    Cursor_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Cursor_DataDefaultTypeInternal _Cursor_Data_default_instance_;
constexpr Const::Const(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpr_(nullptr)
  , cursor_data_(nullptr)
  , consttype_(0u)
  , consttypmod_(0)
  , constcollid_(0u)
  , constlen_(0)
  , constvalue_(uint64_t{0u})
  , constisnull_(false)
  , constbyval_(false)
  , ismaxvalue_(false)
  , location_(0){}
struct ConstDefaultTypeInternal {
  constexpr ConstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConstDefaultTypeInternal() {}
  union {
    Const _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConstDefaultTypeInternal _Const_default_instance_;
constexpr SliceBoundary::SliceBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boundary_()
  , type_(0)

  , nodeidx_(0)
  , len_(0){}
struct SliceBoundaryDefaultTypeInternal {
  constexpr SliceBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SliceBoundaryDefaultTypeInternal() {}
  union {
    SliceBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SliceBoundaryDefaultTypeInternal _SliceBoundary_default_instance_;
constexpr ExecBoundary::ExecBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eles_()
  , locatortype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , count_(0){}
struct ExecBoundaryDefaultTypeInternal {
  constexpr ExecBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecBoundaryDefaultTypeInternal() {}
  union {
    ExecBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecBoundaryDefaultTypeInternal _ExecBoundary_default_instance_;
constexpr ExecNodes::ExecNodes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : baselocatortype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , primarynodelist_(nullptr)
  , nodelist_(nullptr)
  , distribution_(nullptr)
  , en_expr_(nullptr)
  , boundaries_(nullptr)
  , en_dist_vars_(nullptr)
  , original_nodelist_(nullptr)
  , dynamic_en_expr_(nullptr)
  , bucketexpr_(nullptr)
  , hotkeys_(nullptr)
  , type_(0)

  , en_relid_(0u)
  , rangelistoid_(0u)
  , en_varno_(0)
  , accesstype_(0)

  , need_range_prune_(false)
  , nodelist_is_nil_(false)
  , bucketmapidx_(0)
  , bucketid_(0)
  , bucketrelid_(0u){}
struct ExecNodesDefaultTypeInternal {
  constexpr ExecNodesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecNodesDefaultTypeInternal() {}
  union {
    ExecNodes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecNodesDefaultTypeInternal _ExecNodes_default_instance_;
}  // namespace proto_plan
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_execNodes_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_execNodes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_execNodes_2eproto = nullptr;

const uint32_t TableStruct_execNodes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Bitmapset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Bitmapset, nwords_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Bitmapset, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::ListCell, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto_plan::ListCell, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto_plan::ListCell, next_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ListCell, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::List, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::List, length_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::List, head_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::List, tail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Distribution, group_oid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Distribution, bms_data_nodeids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Expr, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Expr, selec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, row_count_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, cur_dno_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, is_open_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, found_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, not_found_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, null_open_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Cursor_Data, null_fetch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, xpr_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, consttype_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, consttypmod_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, constcollid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, constlen_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, constvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, constisnull_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, constbyval_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, location_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, ismaxvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Const, cursor_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::SliceBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::SliceBoundary, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::SliceBoundary, nodeidx_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::SliceBoundary, len_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::SliceBoundary, boundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecBoundary, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecBoundary, locatortype_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecBoundary, count_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecBoundary, eles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, primarynodelist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, nodelist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, distribution_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, baselocatortype_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, en_expr_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, en_relid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, rangelistoid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, need_range_prune_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, en_varno_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, boundaries_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, accesstype_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, en_dist_vars_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, bucketmapidx_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, nodelist_is_nil_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, original_nodelist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, dynamic_en_expr_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, bucketid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, bucketexpr_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, bucketrelid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::ExecNodes, hotkeys_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_plan::Bitmapset)},
  { 8, -1, -1, sizeof(::proto_plan::ListCell)},
  { 19, -1, -1, sizeof(::proto_plan::List)},
  { 29, -1, -1, sizeof(::proto_plan::Distribution)},
  { 37, -1, -1, sizeof(::proto_plan::Expr)},
  { 45, -1, -1, sizeof(::proto_plan::Cursor_Data)},
  { 58, -1, -1, sizeof(::proto_plan::Const)},
  { 75, -1, -1, sizeof(::proto_plan::SliceBoundary)},
  { 85, -1, -1, sizeof(::proto_plan::ExecBoundary)},
  { 95, -1, -1, sizeof(::proto_plan::ExecNodes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Bitmapset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_ListCell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Distribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Expr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Cursor_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Const_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_SliceBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_ExecBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_ExecNodes_default_instance_),
};

const char descriptor_table_protodef_execNodes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017execNodes.proto\022\nproto_plan\032\renumtag.p"
  "roto\"*\n\tBitmapset\022\016\n\006nwords\030\001 \001(\005\022\r\n\005wor"
  "ds\030\002 \003(\r\"u\n\010ListCell\022\023\n\tptr_value\030\001 \001(\014H"
  "\000\022\023\n\tint_value\030\002 \001(\005H\000\022\023\n\toid_value\030\003 \001("
  "\rH\000\022\"\n\004next\030\004 \001(\0132\024.proto_plan.ListCellB"
  "\006\n\004data\"\201\001\n\004List\022!\n\004type\030\001 \001(\0162\023.proto_p"
  "lan.NodeTag\022\016\n\006length\030\002 \001(\005\022\"\n\004head\030\003 \001("
  "\0132\024.proto_plan.ListCell\022\"\n\004tail\030\004 \001(\0132\024."
  "proto_plan.ListCell\"R\n\014Distribution\022\021\n\tg"
  "roup_oid\030\001 \001(\r\022/\n\020bms_data_nodeids\030\002 \001(\013"
  "2\025.proto_plan.Bitmapset\"8\n\004Expr\022!\n\004type\030"
  "\001 \001(\0162\023.proto_plan.NodeTag\022\r\n\005selec\030\002 \001("
  "\001\"\213\001\n\013Cursor_Data\022\021\n\trow_count\030\001 \001(\005\022\017\n\007"
  "cur_dno\030\002 \001(\005\022\017\n\007is_open\030\003 \001(\010\022\r\n\005found\030"
  "\004 \001(\010\022\021\n\tnot_found\030\005 \001(\010\022\021\n\tnull_open\030\006 "
  "\001(\010\022\022\n\nnull_fetch\030\007 \001(\010\"\206\002\n\005Const\022\035\n\003xpr"
  "\030\001 \001(\0132\020.proto_plan.Expr\022\021\n\tconsttype\030\002 "
  "\001(\r\022\023\n\013consttypmod\030\003 \001(\005\022\023\n\013constcollid\030"
  "\004 \001(\r\022\020\n\010constlen\030\005 \001(\005\022\022\n\nconstvalue\030\006 "
  "\001(\004\022\023\n\013constisnull\030\007 \001(\010\022\022\n\nconstbyval\030\010"
  " \001(\010\022\020\n\010location\030\t \001(\005\022\022\n\nismaxvalue\030\n \001"
  "(\010\022,\n\013cursor_data\030\013 \001(\0132\027.proto_plan.Cur"
  "sor_Data\"u\n\rSliceBoundary\022!\n\004type\030\001 \001(\0162"
  "\023.proto_plan.NodeTag\022\017\n\007nodeIdx\030\002 \001(\005\022\013\n"
  "\003len\030\003 \001(\005\022#\n\010boundary\030\004 \003(\0132\021.proto_pla"
  "n.Const\"~\n\014ExecBoundary\022!\n\004type\030\001 \001(\0162\023."
  "proto_plan.NodeTag\022\023\n\013locatorType\030\002 \001(\t\022"
  "\r\n\005count\030\003 \001(\005\022\'\n\004eles\030\004 \003(\0132\031.proto_pla"
  "n.SliceBoundary\"\276\005\n\tExecNodes\022!\n\004type\030\001 "
  "\001(\0162\023.proto_plan.NodeTag\022)\n\017primarynodel"
  "ist\030\002 \001(\0132\020.proto_plan.List\022\"\n\010nodeList\030"
  "\003 \001(\0132\020.proto_plan.List\022.\n\014distribution\030"
  "\004 \001(\0132\030.proto_plan.Distribution\022\027\n\017basel"
  "ocatortype\030\005 \001(\t\022!\n\007en_expr\030\006 \001(\0132\020.prot"
  "o_plan.List\022\020\n\010en_relid\030\007 \001(\r\022\024\n\014rangeli"
  "stOid\030\010 \001(\r\022\030\n\020need_range_prune\030\t \001(\010\022\020\n"
  "\010en_varno\030\n \001(\005\022,\n\nboundaries\030\013 \001(\0132\030.pr"
  "oto_plan.ExecBoundary\0222\n\naccesstype\030\014 \001("
  "\0162\036.proto_plan.RelationAccessType\022&\n\014en_"
  "dist_vars\030\r \001(\0132\020.proto_plan.List\022\024\n\014buc"
  "ketmapIdx\030\016 \001(\005\022\027\n\017nodelist_is_nil\030\017 \001(\010"
  "\022+\n\021original_nodeList\030\020 \001(\0132\020.proto_plan"
  ".List\022)\n\017dynamic_en_expr\030\021 \001(\0132\020.proto_p"
  "lan.List\022\020\n\010bucketid\030\022 \001(\005\022$\n\nbucketexpr"
  "\030\023 \001(\0132\020.proto_plan.List\022\023\n\013bucketrelid\030"
  "\024 \001(\r\022!\n\007hotkeys\030\025 \001(\0132\020.proto_plan.List"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_execNodes_2eproto_deps[1] = {
  &::descriptor_table_enumtag_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_execNodes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_execNodes_2eproto = {
  false, false, 1848, descriptor_table_protodef_execNodes_2eproto, "execNodes.proto", 
  &descriptor_table_execNodes_2eproto_once, descriptor_table_execNodes_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_execNodes_2eproto::offsets,
  file_level_metadata_execNodes_2eproto, file_level_enum_descriptors_execNodes_2eproto, file_level_service_descriptors_execNodes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_execNodes_2eproto_getter() {
  return &descriptor_table_execNodes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_execNodes_2eproto(&descriptor_table_execNodes_2eproto);
namespace proto_plan {

// ===================================================================

class Bitmapset::_Internal {
 public:
};

Bitmapset::Bitmapset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  words_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.Bitmapset)
}
Bitmapset::Bitmapset(const Bitmapset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      words_(from.words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nwords_ = from.nwords_;
  // @@protoc_insertion_point(copy_constructor:proto_plan.Bitmapset)
}

inline void Bitmapset::SharedCtor() {
nwords_ = 0;
}

Bitmapset::~Bitmapset() {
  // @@protoc_insertion_point(destructor:proto_plan.Bitmapset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bitmapset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Bitmapset::ArenaDtor(void* object) {
  Bitmapset* _this = reinterpret_cast< Bitmapset* >(object);
  (void)_this;
}
void Bitmapset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bitmapset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bitmapset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Bitmapset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  nwords_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bitmapset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nwords = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nwords_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_words(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_words(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bitmapset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Bitmapset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nwords = 1;
  if (this->_internal_nwords() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nwords(), target);
  }

  // repeated uint32 words = 2;
  {
    int byte_size = _words_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_words(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Bitmapset)
  return target;
}

size_t Bitmapset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Bitmapset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 words = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->words_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _words_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 nwords = 1;
  if (this->_internal_nwords() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nwords());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bitmapset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bitmapset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bitmapset::GetClassData() const { return &_class_data_; }

void Bitmapset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bitmapset *>(to)->MergeFrom(
      static_cast<const Bitmapset &>(from));
}


void Bitmapset::MergeFrom(const Bitmapset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Bitmapset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from._internal_nwords() != 0) {
    _internal_set_nwords(from._internal_nwords());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bitmapset::CopyFrom(const Bitmapset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Bitmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bitmapset::IsInitialized() const {
  return true;
}

void Bitmapset::InternalSwap(Bitmapset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  words_.InternalSwap(&other->words_);
  swap(nwords_, other->nwords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bitmapset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[0]);
}

// ===================================================================

class ListCell::_Internal {
 public:
  static const ::proto_plan::ListCell& next(const ListCell* msg);
};

const ::proto_plan::ListCell&
ListCell::_Internal::next(const ListCell* msg) {
  return *msg->next_;
}
ListCell::ListCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.ListCell)
}
ListCell::ListCell(const ListCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_next()) {
    next_ = new ::proto_plan::ListCell(*from.next_);
  } else {
    next_ = nullptr;
  }
  clear_has_data();
  switch (from.data_case()) {
    case kPtrValue: {
      _internal_set_ptr_value(from._internal_ptr_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kOidValue: {
      _internal_set_oid_value(from._internal_oid_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto_plan.ListCell)
}

inline void ListCell::SharedCtor() {
next_ = nullptr;
clear_has_data();
}

ListCell::~ListCell() {
  // @@protoc_insertion_point(destructor:proto_plan.ListCell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete next_;
  if (has_data()) {
    clear_data();
  }
}

void ListCell::ArenaDtor(void* object) {
  ListCell* _this = reinterpret_cast< ListCell* >(object);
  (void)_this;
}
void ListCell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCell::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:proto_plan.ListCell)
  switch (data_case()) {
    case kPtrValue: {
      data_.ptr_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kOidValue: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ListCell::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.ListCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && next_ != nullptr) {
    delete next_;
  }
  next_ = nullptr;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ptr_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ptr_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oid_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_oid_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.ListCell next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.ListCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ptr_value = 1;
  if (_internal_has_ptr_value()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ptr_value(), target);
  }

  // int32 int_value = 2;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_value(), target);
  }

  // uint32 oid_value = 3;
  if (_internal_has_oid_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oid_value(), target);
  }

  // .proto_plan.ListCell next = 4;
  if (this->_internal_has_next()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::next(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.ListCell)
  return target;
}

size_t ListCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.ListCell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_plan.ListCell next = 4;
  if (this->_internal_has_next()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_);
  }

  switch (data_case()) {
    // bytes ptr_value = 1;
    case kPtrValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ptr_value());
      break;
    }
    // int32 int_value = 2;
    case kIntValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_int_value());
      break;
    }
    // uint32 oid_value = 3;
    case kOidValue: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_oid_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCell::GetClassData() const { return &_class_data_; }

void ListCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCell *>(to)->MergeFrom(
      static_cast<const ListCell &>(from));
}


void ListCell::MergeFrom(const ListCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.ListCell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_next()) {
    _internal_mutable_next()->::proto_plan::ListCell::MergeFrom(from._internal_next());
  }
  switch (from.data_case()) {
    case kPtrValue: {
      _internal_set_ptr_value(from._internal_ptr_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kOidValue: {
      _internal_set_oid_value(from._internal_oid_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCell::CopyFrom(const ListCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.ListCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCell::IsInitialized() const {
  return true;
}

void ListCell::InternalSwap(ListCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(next_, other->next_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[1]);
}

// ===================================================================

class List::_Internal {
 public:
  static const ::proto_plan::ListCell& head(const List* msg);
  static const ::proto_plan::ListCell& tail(const List* msg);
};

const ::proto_plan::ListCell&
List::_Internal::head(const List* msg) {
  return *msg->head_;
}
const ::proto_plan::ListCell&
List::_Internal::tail(const List* msg) {
  return *msg->tail_;
}
List::List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.List)
}
List::List(const List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::proto_plan::ListCell(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_tail()) {
    tail_ = new ::proto_plan::ListCell(*from.tail_);
  } else {
    tail_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&type_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.List)
}

inline void List::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&head_)) + sizeof(length_));
}

List::~List() {
  // @@protoc_insertion_point(destructor:proto_plan.List)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete tail_;
}

void List::ArenaDtor(void* object) {
  List* _this = reinterpret_cast< List* >(object);
  (void)_this;
}
void List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void List::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tail_ != nullptr) {
    delete tail_;
  }
  tail_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.ListCell head = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.ListCell tail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // .proto_plan.ListCell head = 3;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::head(this), target, stream);
  }

  // .proto_plan.ListCell tail = 4;
  if (this->_internal_has_tail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.List)
  return target;
}

size_t List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_plan.ListCell head = 3;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .proto_plan.ListCell tail = 4;
  if (this->_internal_has_tail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tail_);
  }

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*List::GetClassData() const { return &_class_data_; }

void List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<List *>(to)->MergeFrom(
      static_cast<const List &>(from));
}


void List::MergeFrom(const List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.List)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::proto_plan::ListCell::MergeFrom(from._internal_head());
  }
  if (from._internal_has_tail()) {
    _internal_mutable_tail()->::proto_plan::ListCell::MergeFrom(from._internal_tail());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void List::CopyFrom(const List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {
  return true;
}

void List::InternalSwap(List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(List, length_)
      + sizeof(List::length_)
      - PROTOBUF_FIELD_OFFSET(List, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata List::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[2]);
}

// ===================================================================

class Distribution::_Internal {
 public:
  static const ::proto_plan::Bitmapset& bms_data_nodeids(const Distribution* msg);
};

const ::proto_plan::Bitmapset&
Distribution::_Internal::bms_data_nodeids(const Distribution* msg) {
  return *msg->bms_data_nodeids_;
}
Distribution::Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.Distribution)
}
Distribution::Distribution(const Distribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bms_data_nodeids()) {
    bms_data_nodeids_ = new ::proto_plan::Bitmapset(*from.bms_data_nodeids_);
  } else {
    bms_data_nodeids_ = nullptr;
  }
  group_oid_ = from.group_oid_;
  // @@protoc_insertion_point(copy_constructor:proto_plan.Distribution)
}

inline void Distribution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bms_data_nodeids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_oid_) -
    reinterpret_cast<char*>(&bms_data_nodeids_)) + sizeof(group_oid_));
}

Distribution::~Distribution() {
  // @@protoc_insertion_point(destructor:proto_plan.Distribution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Distribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bms_data_nodeids_;
}

void Distribution::ArenaDtor(void* object) {
  Distribution* _this = reinterpret_cast< Distribution* >(object);
  (void)_this;
}
void Distribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Distribution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bms_data_nodeids_ != nullptr) {
    delete bms_data_nodeids_;
  }
  bms_data_nodeids_ = nullptr;
  group_oid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 group_oid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.Bitmapset bms_data_nodeids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bms_data_nodeids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distribution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Distribution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_oid = 1;
  if (this->_internal_group_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_oid(), target);
  }

  // .proto_plan.Bitmapset bms_data_nodeids = 2;
  if (this->_internal_has_bms_data_nodeids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bms_data_nodeids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Distribution)
  return target;
}

size_t Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Distribution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_plan.Bitmapset bms_data_nodeids = 2;
  if (this->_internal_has_bms_data_nodeids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bms_data_nodeids_);
  }

  // uint32 group_oid = 1;
  if (this->_internal_group_oid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_oid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distribution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Distribution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distribution::GetClassData() const { return &_class_data_; }

void Distribution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Distribution *>(to)->MergeFrom(
      static_cast<const Distribution &>(from));
}


void Distribution::MergeFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bms_data_nodeids()) {
    _internal_mutable_bms_data_nodeids()->::proto_plan::Bitmapset::MergeFrom(from._internal_bms_data_nodeids());
  }
  if (from._internal_group_oid() != 0) {
    _internal_set_group_oid(from._internal_group_oid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distribution::CopyFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution::IsInitialized() const {
  return true;
}

void Distribution::InternalSwap(Distribution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distribution, group_oid_)
      + sizeof(Distribution::group_oid_)
      - PROTOBUF_FIELD_OFFSET(Distribution, bms_data_nodeids_)>(
          reinterpret_cast<char*>(&bms_data_nodeids_),
          reinterpret_cast<char*>(&other->bms_data_nodeids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[3]);
}

// ===================================================================

class Expr::_Internal {
 public:
};

Expr::Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.Expr)
}
Expr::Expr(const Expr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&selec_, &from.selec_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&selec_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.Expr)
}

inline void Expr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&selec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&selec_)) + sizeof(type_));
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:proto_plan.Expr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Expr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expr::ArenaDtor(void* object) {
  Expr* _this = reinterpret_cast< Expr* >(object);
  (void)_this;
}
void Expr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Expr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&selec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&selec_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      // double selec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          selec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Expr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // double selec = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_selec = this->_internal_selec();
  uint64_t raw_selec;
  memcpy(&raw_selec, &tmp_selec, sizeof(tmp_selec));
  if (raw_selec != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_selec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Expr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double selec = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_selec = this->_internal_selec();
  uint64_t raw_selec;
  memcpy(&raw_selec, &tmp_selec, sizeof(tmp_selec));
  if (raw_selec != 0) {
    total_size += 1 + 8;
  }

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Expr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expr::GetClassData() const { return &_class_data_; }

void Expr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Expr *>(to)->MergeFrom(
      static_cast<const Expr &>(from));
}


void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_selec = from._internal_selec();
  uint64_t raw_selec;
  memcpy(&raw_selec, &tmp_selec, sizeof(tmp_selec));
  if (raw_selec != 0) {
    _internal_set_selec(from._internal_selec());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  return true;
}

void Expr::InternalSwap(Expr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expr, type_)
      + sizeof(Expr::type_)
      - PROTOBUF_FIELD_OFFSET(Expr, selec_)>(
          reinterpret_cast<char*>(&selec_),
          reinterpret_cast<char*>(&other->selec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[4]);
}

// ===================================================================

class Cursor_Data::_Internal {
 public:
};

Cursor_Data::Cursor_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.Cursor_Data)
}
Cursor_Data::Cursor_Data(const Cursor_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&null_fetch_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(null_fetch_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.Cursor_Data)
}

inline void Cursor_Data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&null_fetch_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(null_fetch_));
}

Cursor_Data::~Cursor_Data() {
  // @@protoc_insertion_point(destructor:proto_plan.Cursor_Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cursor_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Cursor_Data::ArenaDtor(void* object) {
  Cursor_Data* _this = reinterpret_cast< Cursor_Data* >(object);
  (void)_this;
}
void Cursor_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cursor_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cursor_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Cursor_Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&null_fetch_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(null_fetch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cursor_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_dno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cur_dno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool not_found = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool null_open = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          null_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool null_fetch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          null_fetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cursor_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Cursor_Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row_count = 1;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row_count(), target);
  }

  // int32 cur_dno = 2;
  if (this->_internal_cur_dno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_dno(), target);
  }

  // bool is_open = 3;
  if (this->_internal_is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_open(), target);
  }

  // bool found = 4;
  if (this->_internal_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_found(), target);
  }

  // bool not_found = 5;
  if (this->_internal_not_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_not_found(), target);
  }

  // bool null_open = 6;
  if (this->_internal_null_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_null_open(), target);
  }

  // bool null_fetch = 7;
  if (this->_internal_null_fetch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_null_fetch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Cursor_Data)
  return target;
}

size_t Cursor_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Cursor_Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 row_count = 1;
  if (this->_internal_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_row_count());
  }

  // int32 cur_dno = 2;
  if (this->_internal_cur_dno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cur_dno());
  }

  // bool is_open = 3;
  if (this->_internal_is_open() != 0) {
    total_size += 1 + 1;
  }

  // bool found = 4;
  if (this->_internal_found() != 0) {
    total_size += 1 + 1;
  }

  // bool not_found = 5;
  if (this->_internal_not_found() != 0) {
    total_size += 1 + 1;
  }

  // bool null_open = 6;
  if (this->_internal_null_open() != 0) {
    total_size += 1 + 1;
  }

  // bool null_fetch = 7;
  if (this->_internal_null_fetch() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cursor_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cursor_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cursor_Data::GetClassData() const { return &_class_data_; }

void Cursor_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cursor_Data *>(to)->MergeFrom(
      static_cast<const Cursor_Data &>(from));
}


void Cursor_Data::MergeFrom(const Cursor_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Cursor_Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_cur_dno() != 0) {
    _internal_set_cur_dno(from._internal_cur_dno());
  }
  if (from._internal_is_open() != 0) {
    _internal_set_is_open(from._internal_is_open());
  }
  if (from._internal_found() != 0) {
    _internal_set_found(from._internal_found());
  }
  if (from._internal_not_found() != 0) {
    _internal_set_not_found(from._internal_not_found());
  }
  if (from._internal_null_open() != 0) {
    _internal_set_null_open(from._internal_null_open());
  }
  if (from._internal_null_fetch() != 0) {
    _internal_set_null_fetch(from._internal_null_fetch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cursor_Data::CopyFrom(const Cursor_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Cursor_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cursor_Data::IsInitialized() const {
  return true;
}

void Cursor_Data::InternalSwap(Cursor_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cursor_Data, null_fetch_)
      + sizeof(Cursor_Data::null_fetch_)
      - PROTOBUF_FIELD_OFFSET(Cursor_Data, row_count_)>(
          reinterpret_cast<char*>(&row_count_),
          reinterpret_cast<char*>(&other->row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cursor_Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[5]);
}

// ===================================================================

class Const::_Internal {
 public:
  static const ::proto_plan::Expr& xpr(const Const* msg);
  static const ::proto_plan::Cursor_Data& cursor_data(const Const* msg);
};

const ::proto_plan::Expr&
Const::_Internal::xpr(const Const* msg) {
  return *msg->xpr_;
}
const ::proto_plan::Cursor_Data&
Const::_Internal::cursor_data(const Const* msg) {
  return *msg->cursor_data_;
}
Const::Const(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.Const)
}
Const::Const(const Const& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_xpr()) {
    xpr_ = new ::proto_plan::Expr(*from.xpr_);
  } else {
    xpr_ = nullptr;
  }
  if (from._internal_has_cursor_data()) {
    cursor_data_ = new ::proto_plan::Cursor_Data(*from.cursor_data_);
  } else {
    cursor_data_ = nullptr;
  }
  ::memcpy(&consttype_, &from.consttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&consttype_)) + sizeof(location_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.Const)
}

inline void Const::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&xpr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&xpr_)) + sizeof(location_));
}

Const::~Const() {
  // @@protoc_insertion_point(destructor:proto_plan.Const)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Const::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete xpr_;
  if (this != internal_default_instance()) delete cursor_data_;
}

void Const::ArenaDtor(void* object) {
  Const* _this = reinterpret_cast< Const* >(object);
  (void)_this;
}
void Const::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Const::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Const::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Const)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && xpr_ != nullptr) {
    delete xpr_;
  }
  xpr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cursor_data_ != nullptr) {
    delete cursor_data_;
  }
  cursor_data_ = nullptr;
  ::memset(&consttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&consttype_)) + sizeof(location_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Const::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.Expr xpr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_xpr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 consttype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          consttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 consttypmod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          consttypmod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 constcollid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          constcollid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 constlen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          constlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 constvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          constvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool constisnull = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          constisnull_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool constbyval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          constbyval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 location = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ismaxvalue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ismaxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.Cursor_Data cursor_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Const::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Const)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.Expr xpr = 1;
  if (this->_internal_has_xpr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::xpr(this), target, stream);
  }

  // uint32 consttype = 2;
  if (this->_internal_consttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_consttype(), target);
  }

  // int32 consttypmod = 3;
  if (this->_internal_consttypmod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_consttypmod(), target);
  }

  // uint32 constcollid = 4;
  if (this->_internal_constcollid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_constcollid(), target);
  }

  // int32 constlen = 5;
  if (this->_internal_constlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_constlen(), target);
  }

  // uint64 constvalue = 6;
  if (this->_internal_constvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_constvalue(), target);
  }

  // bool constisnull = 7;
  if (this->_internal_constisnull() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_constisnull(), target);
  }

  // bool constbyval = 8;
  if (this->_internal_constbyval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_constbyval(), target);
  }

  // int32 location = 9;
  if (this->_internal_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_location(), target);
  }

  // bool ismaxvalue = 10;
  if (this->_internal_ismaxvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_ismaxvalue(), target);
  }

  // .proto_plan.Cursor_Data cursor_data = 11;
  if (this->_internal_has_cursor_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::cursor_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Const)
  return target;
}

size_t Const::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Const)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_plan.Expr xpr = 1;
  if (this->_internal_has_xpr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xpr_);
  }

  // .proto_plan.Cursor_Data cursor_data = 11;
  if (this->_internal_has_cursor_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cursor_data_);
  }

  // uint32 consttype = 2;
  if (this->_internal_consttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_consttype());
  }

  // int32 consttypmod = 3;
  if (this->_internal_consttypmod() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_consttypmod());
  }

  // uint32 constcollid = 4;
  if (this->_internal_constcollid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_constcollid());
  }

  // int32 constlen = 5;
  if (this->_internal_constlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_constlen());
  }

  // uint64 constvalue = 6;
  if (this->_internal_constvalue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_constvalue());
  }

  // bool constisnull = 7;
  if (this->_internal_constisnull() != 0) {
    total_size += 1 + 1;
  }

  // bool constbyval = 8;
  if (this->_internal_constbyval() != 0) {
    total_size += 1 + 1;
  }

  // bool ismaxvalue = 10;
  if (this->_internal_ismaxvalue() != 0) {
    total_size += 1 + 1;
  }

  // int32 location = 9;
  if (this->_internal_location() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Const::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Const::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Const::GetClassData() const { return &_class_data_; }

void Const::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Const *>(to)->MergeFrom(
      static_cast<const Const &>(from));
}


void Const::MergeFrom(const Const& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Const)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_xpr()) {
    _internal_mutable_xpr()->::proto_plan::Expr::MergeFrom(from._internal_xpr());
  }
  if (from._internal_has_cursor_data()) {
    _internal_mutable_cursor_data()->::proto_plan::Cursor_Data::MergeFrom(from._internal_cursor_data());
  }
  if (from._internal_consttype() != 0) {
    _internal_set_consttype(from._internal_consttype());
  }
  if (from._internal_consttypmod() != 0) {
    _internal_set_consttypmod(from._internal_consttypmod());
  }
  if (from._internal_constcollid() != 0) {
    _internal_set_constcollid(from._internal_constcollid());
  }
  if (from._internal_constlen() != 0) {
    _internal_set_constlen(from._internal_constlen());
  }
  if (from._internal_constvalue() != 0) {
    _internal_set_constvalue(from._internal_constvalue());
  }
  if (from._internal_constisnull() != 0) {
    _internal_set_constisnull(from._internal_constisnull());
  }
  if (from._internal_constbyval() != 0) {
    _internal_set_constbyval(from._internal_constbyval());
  }
  if (from._internal_ismaxvalue() != 0) {
    _internal_set_ismaxvalue(from._internal_ismaxvalue());
  }
  if (from._internal_location() != 0) {
    _internal_set_location(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Const::CopyFrom(const Const& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Const)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Const::IsInitialized() const {
  return true;
}

void Const::InternalSwap(Const* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Const, location_)
      + sizeof(Const::location_)
      - PROTOBUF_FIELD_OFFSET(Const, xpr_)>(
          reinterpret_cast<char*>(&xpr_),
          reinterpret_cast<char*>(&other->xpr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Const::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[6]);
}

// ===================================================================

class SliceBoundary::_Internal {
 public:
};

SliceBoundary::SliceBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  boundary_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.SliceBoundary)
}
SliceBoundary::SliceBoundary(const SliceBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boundary_(from.boundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&type_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.SliceBoundary)
}

inline void SliceBoundary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&type_)) + sizeof(len_));
}

SliceBoundary::~SliceBoundary() {
  // @@protoc_insertion_point(destructor:proto_plan.SliceBoundary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SliceBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SliceBoundary::ArenaDtor(void* object) {
  SliceBoundary* _this = reinterpret_cast< SliceBoundary* >(object);
  (void)_this;
}
void SliceBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SliceBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SliceBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.SliceBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&type_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 nodeIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_plan.Const boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SliceBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.SliceBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 nodeIdx = 2;
  if (this->_internal_nodeidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeidx(), target);
  }

  // int32 len = 3;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_len(), target);
  }

  // repeated .proto_plan.Const boundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_boundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.SliceBoundary)
  return target;
}

size_t SliceBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.SliceBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_plan.Const boundary = 4;
  total_size += 1UL * this->_internal_boundary_size();
  for (const auto& msg : this->boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 nodeIdx = 2;
  if (this->_internal_nodeidx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nodeidx());
  }

  // int32 len = 3;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SliceBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SliceBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SliceBoundary::GetClassData() const { return &_class_data_; }

void SliceBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SliceBoundary *>(to)->MergeFrom(
      static_cast<const SliceBoundary &>(from));
}


void SliceBoundary::MergeFrom(const SliceBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.SliceBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_.MergeFrom(from.boundary_);
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_nodeidx() != 0) {
    _internal_set_nodeidx(from._internal_nodeidx());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SliceBoundary::CopyFrom(const SliceBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.SliceBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceBoundary::IsInitialized() const {
  return true;
}

void SliceBoundary::InternalSwap(SliceBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  boundary_.InternalSwap(&other->boundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SliceBoundary, len_)
      + sizeof(SliceBoundary::len_)
      - PROTOBUF_FIELD_OFFSET(SliceBoundary, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[7]);
}

// ===================================================================

class ExecBoundary::_Internal {
 public:
};

ExecBoundary::ExecBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  eles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.ExecBoundary)
}
ExecBoundary::ExecBoundary(const ExecBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      eles_(from.eles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  locatortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locatortype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_locatortype().empty()) {
    locatortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locatortype(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.ExecBoundary)
}

inline void ExecBoundary::SharedCtor() {
locatortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locatortype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
}

ExecBoundary::~ExecBoundary() {
  // @@protoc_insertion_point(destructor:proto_plan.ExecBoundary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locatortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecBoundary::ArenaDtor(void* object) {
  ExecBoundary* _this = reinterpret_cast< ExecBoundary* >(object);
  (void)_this;
}
void ExecBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.ExecBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eles_.Clear();
  locatortype_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      // string locatorType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_locatortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.ExecBoundary.locatorType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_plan.SliceBoundary eles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.ExecBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string locatorType = 2;
  if (!this->_internal_locatortype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locatortype().data(), static_cast<int>(this->_internal_locatortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.ExecBoundary.locatorType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_locatortype(), target);
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // repeated .proto_plan.SliceBoundary eles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_eles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.ExecBoundary)
  return target;
}

size_t ExecBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.ExecBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_plan.SliceBoundary eles = 4;
  total_size += 1UL * this->_internal_eles_size();
  for (const auto& msg : this->eles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string locatorType = 2;
  if (!this->_internal_locatortype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locatortype());
  }

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecBoundary::GetClassData() const { return &_class_data_; }

void ExecBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecBoundary *>(to)->MergeFrom(
      static_cast<const ExecBoundary &>(from));
}


void ExecBoundary::MergeFrom(const ExecBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.ExecBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  eles_.MergeFrom(from.eles_);
  if (!from._internal_locatortype().empty()) {
    _internal_set_locatortype(from._internal_locatortype());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecBoundary::CopyFrom(const ExecBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.ExecBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecBoundary::IsInitialized() const {
  return true;
}

void ExecBoundary::InternalSwap(ExecBoundary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  eles_.InternalSwap(&other->eles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locatortype_, lhs_arena,
      &other->locatortype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecBoundary, count_)
      + sizeof(ExecBoundary::count_)
      - PROTOBUF_FIELD_OFFSET(ExecBoundary, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[8]);
}

// ===================================================================

class ExecNodes::_Internal {
 public:
  static const ::proto_plan::List& primarynodelist(const ExecNodes* msg);
  static const ::proto_plan::List& nodelist(const ExecNodes* msg);
  static const ::proto_plan::Distribution& distribution(const ExecNodes* msg);
  static const ::proto_plan::List& en_expr(const ExecNodes* msg);
  static const ::proto_plan::ExecBoundary& boundaries(const ExecNodes* msg);
  static const ::proto_plan::List& en_dist_vars(const ExecNodes* msg);
  static const ::proto_plan::List& original_nodelist(const ExecNodes* msg);
  static const ::proto_plan::List& dynamic_en_expr(const ExecNodes* msg);
  static const ::proto_plan::List& bucketexpr(const ExecNodes* msg);
  static const ::proto_plan::List& hotkeys(const ExecNodes* msg);
};

const ::proto_plan::List&
ExecNodes::_Internal::primarynodelist(const ExecNodes* msg) {
  return *msg->primarynodelist_;
}
const ::proto_plan::List&
ExecNodes::_Internal::nodelist(const ExecNodes* msg) {
  return *msg->nodelist_;
}
const ::proto_plan::Distribution&
ExecNodes::_Internal::distribution(const ExecNodes* msg) {
  return *msg->distribution_;
}
const ::proto_plan::List&
ExecNodes::_Internal::en_expr(const ExecNodes* msg) {
  return *msg->en_expr_;
}
const ::proto_plan::ExecBoundary&
ExecNodes::_Internal::boundaries(const ExecNodes* msg) {
  return *msg->boundaries_;
}
const ::proto_plan::List&
ExecNodes::_Internal::en_dist_vars(const ExecNodes* msg) {
  return *msg->en_dist_vars_;
}
const ::proto_plan::List&
ExecNodes::_Internal::original_nodelist(const ExecNodes* msg) {
  return *msg->original_nodelist_;
}
const ::proto_plan::List&
ExecNodes::_Internal::dynamic_en_expr(const ExecNodes* msg) {
  return *msg->dynamic_en_expr_;
}
const ::proto_plan::List&
ExecNodes::_Internal::bucketexpr(const ExecNodes* msg) {
  return *msg->bucketexpr_;
}
const ::proto_plan::List&
ExecNodes::_Internal::hotkeys(const ExecNodes* msg) {
  return *msg->hotkeys_;
}
ExecNodes::ExecNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_plan.ExecNodes)
}
ExecNodes::ExecNodes(const ExecNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  baselocatortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    baselocatortype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_baselocatortype().empty()) {
    baselocatortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_baselocatortype(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_primarynodelist()) {
    primarynodelist_ = new ::proto_plan::List(*from.primarynodelist_);
  } else {
    primarynodelist_ = nullptr;
  }
  if (from._internal_has_nodelist()) {
    nodelist_ = new ::proto_plan::List(*from.nodelist_);
  } else {
    nodelist_ = nullptr;
  }
  if (from._internal_has_distribution()) {
    distribution_ = new ::proto_plan::Distribution(*from.distribution_);
  } else {
    distribution_ = nullptr;
  }
  if (from._internal_has_en_expr()) {
    en_expr_ = new ::proto_plan::List(*from.en_expr_);
  } else {
    en_expr_ = nullptr;
  }
  if (from._internal_has_boundaries()) {
    boundaries_ = new ::proto_plan::ExecBoundary(*from.boundaries_);
  } else {
    boundaries_ = nullptr;
  }
  if (from._internal_has_en_dist_vars()) {
    en_dist_vars_ = new ::proto_plan::List(*from.en_dist_vars_);
  } else {
    en_dist_vars_ = nullptr;
  }
  if (from._internal_has_original_nodelist()) {
    original_nodelist_ = new ::proto_plan::List(*from.original_nodelist_);
  } else {
    original_nodelist_ = nullptr;
  }
  if (from._internal_has_dynamic_en_expr()) {
    dynamic_en_expr_ = new ::proto_plan::List(*from.dynamic_en_expr_);
  } else {
    dynamic_en_expr_ = nullptr;
  }
  if (from._internal_has_bucketexpr()) {
    bucketexpr_ = new ::proto_plan::List(*from.bucketexpr_);
  } else {
    bucketexpr_ = nullptr;
  }
  if (from._internal_has_hotkeys()) {
    hotkeys_ = new ::proto_plan::List(*from.hotkeys_);
  } else {
    hotkeys_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucketrelid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bucketrelid_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.ExecNodes)
}

inline void ExecNodes::SharedCtor() {
baselocatortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  baselocatortype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&primarynodelist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bucketrelid_) -
    reinterpret_cast<char*>(&primarynodelist_)) + sizeof(bucketrelid_));
}

ExecNodes::~ExecNodes() {
  // @@protoc_insertion_point(destructor:proto_plan.ExecNodes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  baselocatortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete primarynodelist_;
  if (this != internal_default_instance()) delete nodelist_;
  if (this != internal_default_instance()) delete distribution_;
  if (this != internal_default_instance()) delete en_expr_;
  if (this != internal_default_instance()) delete boundaries_;
  if (this != internal_default_instance()) delete en_dist_vars_;
  if (this != internal_default_instance()) delete original_nodelist_;
  if (this != internal_default_instance()) delete dynamic_en_expr_;
  if (this != internal_default_instance()) delete bucketexpr_;
  if (this != internal_default_instance()) delete hotkeys_;
}

void ExecNodes::ArenaDtor(void* object) {
  ExecNodes* _this = reinterpret_cast< ExecNodes* >(object);
  (void)_this;
}
void ExecNodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.ExecNodes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  baselocatortype_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && primarynodelist_ != nullptr) {
    delete primarynodelist_;
  }
  primarynodelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nodelist_ != nullptr) {
    delete nodelist_;
  }
  nodelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && distribution_ != nullptr) {
    delete distribution_;
  }
  distribution_ = nullptr;
  if (GetArenaForAllocation() == nullptr && en_expr_ != nullptr) {
    delete en_expr_;
  }
  en_expr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && boundaries_ != nullptr) {
    delete boundaries_;
  }
  boundaries_ = nullptr;
  if (GetArenaForAllocation() == nullptr && en_dist_vars_ != nullptr) {
    delete en_dist_vars_;
  }
  en_dist_vars_ = nullptr;
  if (GetArenaForAllocation() == nullptr && original_nodelist_ != nullptr) {
    delete original_nodelist_;
  }
  original_nodelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dynamic_en_expr_ != nullptr) {
    delete dynamic_en_expr_;
  }
  dynamic_en_expr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bucketexpr_ != nullptr) {
    delete bucketexpr_;
  }
  bucketexpr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hotkeys_ != nullptr) {
    delete hotkeys_;
  }
  hotkeys_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucketrelid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bucketrelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecNodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List primarynodelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_primarynodelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List nodeList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.Distribution distribution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_distribution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string baselocatortype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_baselocatortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.ExecNodes.baselocatortype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List en_expr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_en_expr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 en_relid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          en_relid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rangelistOid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          rangelistoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool need_range_prune = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          need_range_prune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 en_varno = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          en_varno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.ExecBoundary boundaries = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundaries(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.RelationAccessType accesstype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_accesstype(static_cast<::proto_plan::RelationAccessType>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List en_dist_vars = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_en_dist_vars(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bucketmapIdx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          bucketmapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nodelist_is_nil = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          nodelist_is_nil_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List original_nodeList = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_nodelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List dynamic_en_expr = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_en_expr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bucketid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          bucketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List bucketexpr = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bucketexpr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bucketrelid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          bucketrelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_plan.List hotkeys = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_hotkeys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecNodes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.ExecNodes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .proto_plan.List primarynodelist = 2;
  if (this->_internal_has_primarynodelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::primarynodelist(this), target, stream);
  }

  // .proto_plan.List nodeList = 3;
  if (this->_internal_has_nodelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nodelist(this), target, stream);
  }

  // .proto_plan.Distribution distribution = 4;
  if (this->_internal_has_distribution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::distribution(this), target, stream);
  }

  // string baselocatortype = 5;
  if (!this->_internal_baselocatortype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_baselocatortype().data(), static_cast<int>(this->_internal_baselocatortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.ExecNodes.baselocatortype");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_baselocatortype(), target);
  }

  // .proto_plan.List en_expr = 6;
  if (this->_internal_has_en_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::en_expr(this), target, stream);
  }

  // uint32 en_relid = 7;
  if (this->_internal_en_relid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_en_relid(), target);
  }

  // uint32 rangelistOid = 8;
  if (this->_internal_rangelistoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rangelistoid(), target);
  }

  // bool need_range_prune = 9;
  if (this->_internal_need_range_prune() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_need_range_prune(), target);
  }

  // int32 en_varno = 10;
  if (this->_internal_en_varno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_en_varno(), target);
  }

  // .proto_plan.ExecBoundary boundaries = 11;
  if (this->_internal_has_boundaries()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::boundaries(this), target, stream);
  }

  // .proto_plan.RelationAccessType accesstype = 12;
  if (this->_internal_accesstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_accesstype(), target);
  }

  // .proto_plan.List en_dist_vars = 13;
  if (this->_internal_has_en_dist_vars()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::en_dist_vars(this), target, stream);
  }

  // int32 bucketmapIdx = 14;
  if (this->_internal_bucketmapidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_bucketmapidx(), target);
  }

  // bool nodelist_is_nil = 15;
  if (this->_internal_nodelist_is_nil() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_nodelist_is_nil(), target);
  }

  // .proto_plan.List original_nodeList = 16;
  if (this->_internal_has_original_nodelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::original_nodelist(this), target, stream);
  }

  // .proto_plan.List dynamic_en_expr = 17;
  if (this->_internal_has_dynamic_en_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::dynamic_en_expr(this), target, stream);
  }

  // int32 bucketid = 18;
  if (this->_internal_bucketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_bucketid(), target);
  }

  // .proto_plan.List bucketexpr = 19;
  if (this->_internal_has_bucketexpr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::bucketexpr(this), target, stream);
  }

  // uint32 bucketrelid = 20;
  if (this->_internal_bucketrelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_bucketrelid(), target);
  }

  // .proto_plan.List hotkeys = 21;
  if (this->_internal_has_hotkeys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::hotkeys(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.ExecNodes)
  return target;
}

size_t ExecNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.ExecNodes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string baselocatortype = 5;
  if (!this->_internal_baselocatortype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baselocatortype());
  }

  // .proto_plan.List primarynodelist = 2;
  if (this->_internal_has_primarynodelist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primarynodelist_);
  }

  // .proto_plan.List nodeList = 3;
  if (this->_internal_has_nodelist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodelist_);
  }

  // .proto_plan.Distribution distribution = 4;
  if (this->_internal_has_distribution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distribution_);
  }

  // .proto_plan.List en_expr = 6;
  if (this->_internal_has_en_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *en_expr_);
  }

  // .proto_plan.ExecBoundary boundaries = 11;
  if (this->_internal_has_boundaries()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundaries_);
  }

  // .proto_plan.List en_dist_vars = 13;
  if (this->_internal_has_en_dist_vars()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *en_dist_vars_);
  }

  // .proto_plan.List original_nodeList = 16;
  if (this->_internal_has_original_nodelist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_nodelist_);
  }

  // .proto_plan.List dynamic_en_expr = 17;
  if (this->_internal_has_dynamic_en_expr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_en_expr_);
  }

  // .proto_plan.List bucketexpr = 19;
  if (this->_internal_has_bucketexpr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bucketexpr_);
  }

  // .proto_plan.List hotkeys = 21;
  if (this->_internal_has_hotkeys()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hotkeys_);
  }

  // .proto_plan.NodeTag type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 en_relid = 7;
  if (this->_internal_en_relid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_en_relid());
  }

  // uint32 rangelistOid = 8;
  if (this->_internal_rangelistoid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rangelistoid());
  }

  // int32 en_varno = 10;
  if (this->_internal_en_varno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_en_varno());
  }

  // .proto_plan.RelationAccessType accesstype = 12;
  if (this->_internal_accesstype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_accesstype());
  }

  // bool need_range_prune = 9;
  if (this->_internal_need_range_prune() != 0) {
    total_size += 1 + 1;
  }

  // bool nodelist_is_nil = 15;
  if (this->_internal_nodelist_is_nil() != 0) {
    total_size += 1 + 1;
  }

  // int32 bucketmapIdx = 14;
  if (this->_internal_bucketmapidx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bucketmapidx());
  }

  // int32 bucketid = 18;
  if (this->_internal_bucketid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bucketid());
  }

  // uint32 bucketrelid = 20;
  if (this->_internal_bucketrelid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bucketrelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecNodes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecNodes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecNodes::GetClassData() const { return &_class_data_; }

void ExecNodes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecNodes *>(to)->MergeFrom(
      static_cast<const ExecNodes &>(from));
}


void ExecNodes::MergeFrom(const ExecNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.ExecNodes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_baselocatortype().empty()) {
    _internal_set_baselocatortype(from._internal_baselocatortype());
  }
  if (from._internal_has_primarynodelist()) {
    _internal_mutable_primarynodelist()->::proto_plan::List::MergeFrom(from._internal_primarynodelist());
  }
  if (from._internal_has_nodelist()) {
    _internal_mutable_nodelist()->::proto_plan::List::MergeFrom(from._internal_nodelist());
  }
  if (from._internal_has_distribution()) {
    _internal_mutable_distribution()->::proto_plan::Distribution::MergeFrom(from._internal_distribution());
  }
  if (from._internal_has_en_expr()) {
    _internal_mutable_en_expr()->::proto_plan::List::MergeFrom(from._internal_en_expr());
  }
  if (from._internal_has_boundaries()) {
    _internal_mutable_boundaries()->::proto_plan::ExecBoundary::MergeFrom(from._internal_boundaries());
  }
  if (from._internal_has_en_dist_vars()) {
    _internal_mutable_en_dist_vars()->::proto_plan::List::MergeFrom(from._internal_en_dist_vars());
  }
  if (from._internal_has_original_nodelist()) {
    _internal_mutable_original_nodelist()->::proto_plan::List::MergeFrom(from._internal_original_nodelist());
  }
  if (from._internal_has_dynamic_en_expr()) {
    _internal_mutable_dynamic_en_expr()->::proto_plan::List::MergeFrom(from._internal_dynamic_en_expr());
  }
  if (from._internal_has_bucketexpr()) {
    _internal_mutable_bucketexpr()->::proto_plan::List::MergeFrom(from._internal_bucketexpr());
  }
  if (from._internal_has_hotkeys()) {
    _internal_mutable_hotkeys()->::proto_plan::List::MergeFrom(from._internal_hotkeys());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_en_relid() != 0) {
    _internal_set_en_relid(from._internal_en_relid());
  }
  if (from._internal_rangelistoid() != 0) {
    _internal_set_rangelistoid(from._internal_rangelistoid());
  }
  if (from._internal_en_varno() != 0) {
    _internal_set_en_varno(from._internal_en_varno());
  }
  if (from._internal_accesstype() != 0) {
    _internal_set_accesstype(from._internal_accesstype());
  }
  if (from._internal_need_range_prune() != 0) {
    _internal_set_need_range_prune(from._internal_need_range_prune());
  }
  if (from._internal_nodelist_is_nil() != 0) {
    _internal_set_nodelist_is_nil(from._internal_nodelist_is_nil());
  }
  if (from._internal_bucketmapidx() != 0) {
    _internal_set_bucketmapidx(from._internal_bucketmapidx());
  }
  if (from._internal_bucketid() != 0) {
    _internal_set_bucketid(from._internal_bucketid());
  }
  if (from._internal_bucketrelid() != 0) {
    _internal_set_bucketrelid(from._internal_bucketrelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecNodes::CopyFrom(const ExecNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.ExecNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecNodes::IsInitialized() const {
  return true;
}

void ExecNodes::InternalSwap(ExecNodes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &baselocatortype_, lhs_arena,
      &other->baselocatortype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecNodes, bucketrelid_)
      + sizeof(ExecNodes::bucketrelid_)
      - PROTOBUF_FIELD_OFFSET(ExecNodes, primarynodelist_)>(
          reinterpret_cast<char*>(&primarynodelist_),
          reinterpret_cast<char*>(&other->primarynodelist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecNodes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_execNodes_2eproto_getter, &descriptor_table_execNodes_2eproto_once,
      file_level_metadata_execNodes_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_plan::Bitmapset* Arena::CreateMaybeMessage< ::proto_plan::Bitmapset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::Bitmapset >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::ListCell* Arena::CreateMaybeMessage< ::proto_plan::ListCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::ListCell >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::List* Arena::CreateMaybeMessage< ::proto_plan::List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::List >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Distribution* Arena::CreateMaybeMessage< ::proto_plan::Distribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::Distribution >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Expr* Arena::CreateMaybeMessage< ::proto_plan::Expr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::Expr >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Cursor_Data* Arena::CreateMaybeMessage< ::proto_plan::Cursor_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::Cursor_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Const* Arena::CreateMaybeMessage< ::proto_plan::Const >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::Const >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::SliceBoundary* Arena::CreateMaybeMessage< ::proto_plan::SliceBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::SliceBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::ExecBoundary* Arena::CreateMaybeMessage< ::proto_plan::ExecBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::ExecBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::ExecNodes* Arena::CreateMaybeMessage< ::proto_plan::ExecNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_plan::ExecNodes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
