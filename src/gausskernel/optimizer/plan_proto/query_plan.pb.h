// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "execNodes.pb.h"
#include "enumtag.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_5fplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fplan_2eproto;
namespace proto_plan {
class Plan;
struct PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class RightRefState;
struct RightRefStateDefaultTypeInternal;
extern RightRefStateDefaultTypeInternal _RightRefState_default_instance_;
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_plan::Plan* Arena::CreateMaybeMessage<::proto_plan::Plan>(Arena*);
template<> ::proto_plan::RightRefState* Arena::CreateMaybeMessage<::proto_plan::RightRefState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_plan {

// ===================================================================

class RightRefState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.RightRefState) */ {
 public:
  inline RightRefState() : RightRefState(nullptr) {}
  ~RightRefState() override;
  explicit constexpr RightRefState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RightRefState(const RightRefState& from);
  RightRefState(RightRefState&& from) noexcept
    : RightRefState() {
    *this = ::std::move(from);
  }

  inline RightRefState& operator=(const RightRefState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RightRefState& operator=(RightRefState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RightRefState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RightRefState* internal_default_instance() {
    return reinterpret_cast<const RightRefState*>(
               &_RightRefState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RightRefState& a, RightRefState& b) {
    a.Swap(&b);
  }
  inline void Swap(RightRefState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RightRefState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RightRefState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RightRefState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RightRefState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RightRefState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RightRefState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.RightRefState";
  }
  protected:
  explicit RightRefState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExplicitAttrNosFieldNumber = 4,
    kConstValuesFieldNumber = 5,
    kValuesFieldNumber = 7,
    kHasExecsFieldNumber = 8,
    kIsNullsFieldNumber = 9,
    kUsExplicitAttrNosFieldNumber = 13,
    kExplicitAttrLenFieldNumber = 3,
    kColCntFieldNumber = 6,
    kIsSupportedFieldNumber = 1,
    kIsInsertHasRightRefFieldNumber = 2,
    kIsUpsertFieldNumber = 10,
    kIsUpsertHasRightRefFieldNumber = 11,
    kUsExplicitAttrLenFieldNumber = 12,
  };
  // repeated int32 explicitAttrNos = 4;
  int explicitattrnos_size() const;
  private:
  int _internal_explicitattrnos_size() const;
  public:
  void clear_explicitattrnos();
  private:
  int32_t _internal_explicitattrnos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_explicitattrnos() const;
  void _internal_add_explicitattrnos(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_explicitattrnos();
  public:
  int32_t explicitattrnos(int index) const;
  void set_explicitattrnos(int index, int32_t value);
  void add_explicitattrnos(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      explicitattrnos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_explicitattrnos();

  // repeated .proto_plan.Const constValues = 5;
  int constvalues_size() const;
  private:
  int _internal_constvalues_size() const;
  public:
  void clear_constvalues();
  ::proto_plan::Const* mutable_constvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >*
      mutable_constvalues();
  private:
  const ::proto_plan::Const& _internal_constvalues(int index) const;
  ::proto_plan::Const* _internal_add_constvalues();
  public:
  const ::proto_plan::Const& constvalues(int index) const;
  ::proto_plan::Const* add_constvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >&
      constvalues() const;

  // repeated uint64 values = 7;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  uint64_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_values() const;
  void _internal_add_values(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_values();
  public:
  uint64_t values(int index) const;
  void set_values(int index, uint64_t value);
  void add_values(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_values();

  // repeated bool hasExecs = 8;
  int hasexecs_size() const;
  private:
  int _internal_hasexecs_size() const;
  public:
  void clear_hasexecs();
  private:
  bool _internal_hasexecs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_hasexecs() const;
  void _internal_add_hasexecs(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_hasexecs();
  public:
  bool hasexecs(int index) const;
  void set_hasexecs(int index, bool value);
  void add_hasexecs(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      hasexecs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_hasexecs();

  // repeated bool isNulls = 9;
  int isnulls_size() const;
  private:
  int _internal_isnulls_size() const;
  public:
  void clear_isnulls();
  private:
  bool _internal_isnulls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_isnulls() const;
  void _internal_add_isnulls(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_isnulls();
  public:
  bool isnulls(int index) const;
  void set_isnulls(int index, bool value);
  void add_isnulls(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      isnulls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_isnulls();

  // repeated int32 usExplicitAttrNos = 13;
  int usexplicitattrnos_size() const;
  private:
  int _internal_usexplicitattrnos_size() const;
  public:
  void clear_usexplicitattrnos();
  private:
  int32_t _internal_usexplicitattrnos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_usexplicitattrnos() const;
  void _internal_add_usexplicitattrnos(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_usexplicitattrnos();
  public:
  int32_t usexplicitattrnos(int index) const;
  void set_usexplicitattrnos(int index, int32_t value);
  void add_usexplicitattrnos(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      usexplicitattrnos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_usexplicitattrnos();

  // int32 explicitAttrLen = 3;
  void clear_explicitattrlen();
  int32_t explicitattrlen() const;
  void set_explicitattrlen(int32_t value);
  private:
  int32_t _internal_explicitattrlen() const;
  void _internal_set_explicitattrlen(int32_t value);
  public:

  // int32 colCnt = 6;
  void clear_colcnt();
  int32_t colcnt() const;
  void set_colcnt(int32_t value);
  private:
  int32_t _internal_colcnt() const;
  void _internal_set_colcnt(int32_t value);
  public:

  // bool isSupported = 1;
  void clear_issupported();
  bool issupported() const;
  void set_issupported(bool value);
  private:
  bool _internal_issupported() const;
  void _internal_set_issupported(bool value);
  public:

  // bool isInsertHasRightRef = 2;
  void clear_isinserthasrightref();
  bool isinserthasrightref() const;
  void set_isinserthasrightref(bool value);
  private:
  bool _internal_isinserthasrightref() const;
  void _internal_set_isinserthasrightref(bool value);
  public:

  // bool isUpsert = 10;
  void clear_isupsert();
  bool isupsert() const;
  void set_isupsert(bool value);
  private:
  bool _internal_isupsert() const;
  void _internal_set_isupsert(bool value);
  public:

  // bool isUpsertHasRightRef = 11;
  void clear_isupserthasrightref();
  bool isupserthasrightref() const;
  void set_isupserthasrightref(bool value);
  private:
  bool _internal_isupserthasrightref() const;
  void _internal_set_isupserthasrightref(bool value);
  public:

  // int32 usExplicitAttrLen = 12;
  void clear_usexplicitattrlen();
  int32_t usexplicitattrlen() const;
  void set_usexplicitattrlen(int32_t value);
  private:
  int32_t _internal_usexplicitattrlen() const;
  void _internal_set_usexplicitattrlen(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.RightRefState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > explicitattrnos_;
  mutable std::atomic<int> _explicitattrnos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const > constvalues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > hasexecs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > isnulls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > usexplicitattrnos_;
  mutable std::atomic<int> _usexplicitattrnos_cached_byte_size_;
  int32_t explicitattrlen_;
  int32_t colcnt_;
  bool issupported_;
  bool isinserthasrightref_;
  bool isupsert_;
  bool isupserthasrightref_;
  int32_t usexplicitattrlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_5fplan_2eproto;
};
// -------------------------------------------------------------------

class Plan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  ~Plan() override;
  explicit constexpr Plan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plan& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Plan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Plan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorMemKBFieldNumber = 33,
    kNgOperatorMemKBArrayFieldNumber = 39,
    kTargetlistFieldNumber = 18,
    kQualFieldNumber = 19,
    kLefttreeFieldNumber = 20,
    kRighttreeFieldNumber = 21,
    kInitPlanFieldNumber = 25,
    kDistributedKeysFieldNumber = 26,
    kExecNodesFieldNumber = 27,
    kExtParamFieldNumber = 28,
    kAllParamFieldNumber = 29,
    kVarListFieldNumber = 37,
    kFilterIndexListFieldNumber = 38,
    kFlatListFieldNumber = 43,
    kRightRefStateFieldNumber = 44,
    kPlanNodeIdFieldNumber = 1,
    kParentNodeIdFieldNumber = 2,
    kStartupCostFieldNumber = 4,
    kTotalCostFieldNumber = 5,
    kExecTypeFieldNumber = 3,
    kPlanWidthFieldNumber = 8,
    kPlanRowsFieldNumber = 6,
    kMultipleFieldNumber = 7,
    kPredRowsFieldNumber = 10,
    kPredStartupTimeFieldNumber = 11,
    kDopFieldNumber = 9,
    kRecursiveUnionPlanNodeidFieldNumber = 14,
    kPredTotalTimeFieldNumber = 12,
    kPredMaxMemoryFieldNumber = 13,
    kControlPlanNodeidFieldNumber = 16,
    kRecursiveUnionControllerFieldNumber = 15,
    kIsSyncPlannodeFieldNumber = 17,
    kIspwjFieldNumber = 22,
    kVecOutputFieldNumber = 30,
    kParamnoFieldNumber = 23,
    kSubparamnoFieldNumber = 24,
    kHasUniqueResultsFieldNumber = 31,
    kIsDeltaTableFieldNumber = 32,
    kParallelEnabledFieldNumber = 35,
    kHasHashFilterFieldNumber = 36,
    kOperatorMaxMemFieldNumber = 34,
    kInnerdistinctFieldNumber = 41,
    kOuterdistinctFieldNumber = 42,
    kNgNumFieldNumber = 40,
  };
  // repeated int32 operatorMemKB = 33;
  int operatormemkb_size() const;
  private:
  int _internal_operatormemkb_size() const;
  public:
  void clear_operatormemkb();
  private:
  int32_t _internal_operatormemkb(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_operatormemkb() const;
  void _internal_add_operatormemkb(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_operatormemkb();
  public:
  int32_t operatormemkb(int index) const;
  void set_operatormemkb(int index, int32_t value);
  void add_operatormemkb(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      operatormemkb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_operatormemkb();

  // repeated int32 ng_operatorMemKBArray = 39;
  int ng_operatormemkbarray_size() const;
  private:
  int _internal_ng_operatormemkbarray_size() const;
  public:
  void clear_ng_operatormemkbarray();
  private:
  int32_t _internal_ng_operatormemkbarray(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ng_operatormemkbarray() const;
  void _internal_add_ng_operatormemkbarray(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ng_operatormemkbarray();
  public:
  int32_t ng_operatormemkbarray(int index) const;
  void set_ng_operatormemkbarray(int index, int32_t value);
  void add_ng_operatormemkbarray(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ng_operatormemkbarray() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ng_operatormemkbarray();

  // .proto_plan.List targetlist = 18;
  bool has_targetlist() const;
  private:
  bool _internal_has_targetlist() const;
  public:
  void clear_targetlist();
  const ::proto_plan::List& targetlist() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_targetlist();
  ::proto_plan::List* mutable_targetlist();
  void set_allocated_targetlist(::proto_plan::List* targetlist);
  private:
  const ::proto_plan::List& _internal_targetlist() const;
  ::proto_plan::List* _internal_mutable_targetlist();
  public:
  void unsafe_arena_set_allocated_targetlist(
      ::proto_plan::List* targetlist);
  ::proto_plan::List* unsafe_arena_release_targetlist();

  // .proto_plan.List qual = 19;
  bool has_qual() const;
  private:
  bool _internal_has_qual() const;
  public:
  void clear_qual();
  const ::proto_plan::List& qual() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_qual();
  ::proto_plan::List* mutable_qual();
  void set_allocated_qual(::proto_plan::List* qual);
  private:
  const ::proto_plan::List& _internal_qual() const;
  ::proto_plan::List* _internal_mutable_qual();
  public:
  void unsafe_arena_set_allocated_qual(
      ::proto_plan::List* qual);
  ::proto_plan::List* unsafe_arena_release_qual();

  // .proto_plan.Plan lefttree = 20;
  bool has_lefttree() const;
  private:
  bool _internal_has_lefttree() const;
  public:
  void clear_lefttree();
  const ::proto_plan::Plan& lefttree() const;
  PROTOBUF_NODISCARD ::proto_plan::Plan* release_lefttree();
  ::proto_plan::Plan* mutable_lefttree();
  void set_allocated_lefttree(::proto_plan::Plan* lefttree);
  private:
  const ::proto_plan::Plan& _internal_lefttree() const;
  ::proto_plan::Plan* _internal_mutable_lefttree();
  public:
  void unsafe_arena_set_allocated_lefttree(
      ::proto_plan::Plan* lefttree);
  ::proto_plan::Plan* unsafe_arena_release_lefttree();

  // .proto_plan.Plan righttree = 21;
  bool has_righttree() const;
  private:
  bool _internal_has_righttree() const;
  public:
  void clear_righttree();
  const ::proto_plan::Plan& righttree() const;
  PROTOBUF_NODISCARD ::proto_plan::Plan* release_righttree();
  ::proto_plan::Plan* mutable_righttree();
  void set_allocated_righttree(::proto_plan::Plan* righttree);
  private:
  const ::proto_plan::Plan& _internal_righttree() const;
  ::proto_plan::Plan* _internal_mutable_righttree();
  public:
  void unsafe_arena_set_allocated_righttree(
      ::proto_plan::Plan* righttree);
  ::proto_plan::Plan* unsafe_arena_release_righttree();

  // .proto_plan.List initPlan = 25;
  bool has_initplan() const;
  private:
  bool _internal_has_initplan() const;
  public:
  void clear_initplan();
  const ::proto_plan::List& initplan() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_initplan();
  ::proto_plan::List* mutable_initplan();
  void set_allocated_initplan(::proto_plan::List* initplan);
  private:
  const ::proto_plan::List& _internal_initplan() const;
  ::proto_plan::List* _internal_mutable_initplan();
  public:
  void unsafe_arena_set_allocated_initplan(
      ::proto_plan::List* initplan);
  ::proto_plan::List* unsafe_arena_release_initplan();

  // .proto_plan.List distributed_keys = 26;
  bool has_distributed_keys() const;
  private:
  bool _internal_has_distributed_keys() const;
  public:
  void clear_distributed_keys();
  const ::proto_plan::List& distributed_keys() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_distributed_keys();
  ::proto_plan::List* mutable_distributed_keys();
  void set_allocated_distributed_keys(::proto_plan::List* distributed_keys);
  private:
  const ::proto_plan::List& _internal_distributed_keys() const;
  ::proto_plan::List* _internal_mutable_distributed_keys();
  public:
  void unsafe_arena_set_allocated_distributed_keys(
      ::proto_plan::List* distributed_keys);
  ::proto_plan::List* unsafe_arena_release_distributed_keys();

  // .proto_plan.ExecNodes exec_nodes = 27;
  bool has_exec_nodes() const;
  private:
  bool _internal_has_exec_nodes() const;
  public:
  void clear_exec_nodes();
  const ::proto_plan::ExecNodes& exec_nodes() const;
  PROTOBUF_NODISCARD ::proto_plan::ExecNodes* release_exec_nodes();
  ::proto_plan::ExecNodes* mutable_exec_nodes();
  void set_allocated_exec_nodes(::proto_plan::ExecNodes* exec_nodes);
  private:
  const ::proto_plan::ExecNodes& _internal_exec_nodes() const;
  ::proto_plan::ExecNodes* _internal_mutable_exec_nodes();
  public:
  void unsafe_arena_set_allocated_exec_nodes(
      ::proto_plan::ExecNodes* exec_nodes);
  ::proto_plan::ExecNodes* unsafe_arena_release_exec_nodes();

  // .proto_plan.Bitmapset extParam = 28;
  bool has_extparam() const;
  private:
  bool _internal_has_extparam() const;
  public:
  void clear_extparam();
  const ::proto_plan::Bitmapset& extparam() const;
  PROTOBUF_NODISCARD ::proto_plan::Bitmapset* release_extparam();
  ::proto_plan::Bitmapset* mutable_extparam();
  void set_allocated_extparam(::proto_plan::Bitmapset* extparam);
  private:
  const ::proto_plan::Bitmapset& _internal_extparam() const;
  ::proto_plan::Bitmapset* _internal_mutable_extparam();
  public:
  void unsafe_arena_set_allocated_extparam(
      ::proto_plan::Bitmapset* extparam);
  ::proto_plan::Bitmapset* unsafe_arena_release_extparam();

  // .proto_plan.Bitmapset allParam = 29;
  bool has_allparam() const;
  private:
  bool _internal_has_allparam() const;
  public:
  void clear_allparam();
  const ::proto_plan::Bitmapset& allparam() const;
  PROTOBUF_NODISCARD ::proto_plan::Bitmapset* release_allparam();
  ::proto_plan::Bitmapset* mutable_allparam();
  void set_allocated_allparam(::proto_plan::Bitmapset* allparam);
  private:
  const ::proto_plan::Bitmapset& _internal_allparam() const;
  ::proto_plan::Bitmapset* _internal_mutable_allparam();
  public:
  void unsafe_arena_set_allocated_allparam(
      ::proto_plan::Bitmapset* allparam);
  ::proto_plan::Bitmapset* unsafe_arena_release_allparam();

  // .proto_plan.List var_list = 37;
  bool has_var_list() const;
  private:
  bool _internal_has_var_list() const;
  public:
  void clear_var_list();
  const ::proto_plan::List& var_list() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_var_list();
  ::proto_plan::List* mutable_var_list();
  void set_allocated_var_list(::proto_plan::List* var_list);
  private:
  const ::proto_plan::List& _internal_var_list() const;
  ::proto_plan::List* _internal_mutable_var_list();
  public:
  void unsafe_arena_set_allocated_var_list(
      ::proto_plan::List* var_list);
  ::proto_plan::List* unsafe_arena_release_var_list();

  // .proto_plan.List filterIndexList = 38;
  bool has_filterindexlist() const;
  private:
  bool _internal_has_filterindexlist() const;
  public:
  void clear_filterindexlist();
  const ::proto_plan::List& filterindexlist() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_filterindexlist();
  ::proto_plan::List* mutable_filterindexlist();
  void set_allocated_filterindexlist(::proto_plan::List* filterindexlist);
  private:
  const ::proto_plan::List& _internal_filterindexlist() const;
  ::proto_plan::List* _internal_mutable_filterindexlist();
  public:
  void unsafe_arena_set_allocated_filterindexlist(
      ::proto_plan::List* filterindexlist);
  ::proto_plan::List* unsafe_arena_release_filterindexlist();

  // .proto_plan.List flatList = 43;
  bool has_flatlist() const;
  private:
  bool _internal_has_flatlist() const;
  public:
  void clear_flatlist();
  const ::proto_plan::List& flatlist() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_flatlist();
  ::proto_plan::List* mutable_flatlist();
  void set_allocated_flatlist(::proto_plan::List* flatlist);
  private:
  const ::proto_plan::List& _internal_flatlist() const;
  ::proto_plan::List* _internal_mutable_flatlist();
  public:
  void unsafe_arena_set_allocated_flatlist(
      ::proto_plan::List* flatlist);
  ::proto_plan::List* unsafe_arena_release_flatlist();

  // .proto_plan.RightRefState rightRefState = 44;
  bool has_rightrefstate() const;
  private:
  bool _internal_has_rightrefstate() const;
  public:
  void clear_rightrefstate();
  const ::proto_plan::RightRefState& rightrefstate() const;
  PROTOBUF_NODISCARD ::proto_plan::RightRefState* release_rightrefstate();
  ::proto_plan::RightRefState* mutable_rightrefstate();
  void set_allocated_rightrefstate(::proto_plan::RightRefState* rightrefstate);
  private:
  const ::proto_plan::RightRefState& _internal_rightrefstate() const;
  ::proto_plan::RightRefState* _internal_mutable_rightrefstate();
  public:
  void unsafe_arena_set_allocated_rightrefstate(
      ::proto_plan::RightRefState* rightrefstate);
  ::proto_plan::RightRefState* unsafe_arena_release_rightrefstate();

  // uint32 plan_node_id = 1;
  void clear_plan_node_id();
  uint32_t plan_node_id() const;
  void set_plan_node_id(uint32_t value);
  private:
  uint32_t _internal_plan_node_id() const;
  void _internal_set_plan_node_id(uint32_t value);
  public:

  // uint32 parent_node_id = 2;
  void clear_parent_node_id();
  uint32_t parent_node_id() const;
  void set_parent_node_id(uint32_t value);
  private:
  uint32_t _internal_parent_node_id() const;
  void _internal_set_parent_node_id(uint32_t value);
  public:

  // double startup_cost = 4;
  void clear_startup_cost();
  double startup_cost() const;
  void set_startup_cost(double value);
  private:
  double _internal_startup_cost() const;
  void _internal_set_startup_cost(double value);
  public:

  // double total_cost = 5;
  void clear_total_cost();
  double total_cost() const;
  void set_total_cost(double value);
  private:
  double _internal_total_cost() const;
  void _internal_set_total_cost(double value);
  public:

  // .proto_plan.RemoteQueryExecType exec_type = 3;
  void clear_exec_type();
  ::proto_plan::RemoteQueryExecType exec_type() const;
  void set_exec_type(::proto_plan::RemoteQueryExecType value);
  private:
  ::proto_plan::RemoteQueryExecType _internal_exec_type() const;
  void _internal_set_exec_type(::proto_plan::RemoteQueryExecType value);
  public:

  // int32 plan_width = 8;
  void clear_plan_width();
  int32_t plan_width() const;
  void set_plan_width(int32_t value);
  private:
  int32_t _internal_plan_width() const;
  void _internal_set_plan_width(int32_t value);
  public:

  // double plan_rows = 6;
  void clear_plan_rows();
  double plan_rows() const;
  void set_plan_rows(double value);
  private:
  double _internal_plan_rows() const;
  void _internal_set_plan_rows(double value);
  public:

  // double multiple = 7;
  void clear_multiple();
  double multiple() const;
  void set_multiple(double value);
  private:
  double _internal_multiple() const;
  void _internal_set_multiple(double value);
  public:

  // double pred_rows = 10;
  void clear_pred_rows();
  double pred_rows() const;
  void set_pred_rows(double value);
  private:
  double _internal_pred_rows() const;
  void _internal_set_pred_rows(double value);
  public:

  // double pred_startup_time = 11;
  void clear_pred_startup_time();
  double pred_startup_time() const;
  void set_pred_startup_time(double value);
  private:
  double _internal_pred_startup_time() const;
  void _internal_set_pred_startup_time(double value);
  public:

  // int32 dop = 9;
  void clear_dop();
  int32_t dop() const;
  void set_dop(int32_t value);
  private:
  int32_t _internal_dop() const;
  void _internal_set_dop(int32_t value);
  public:

  // int32 recursive_union_plan_nodeid = 14;
  void clear_recursive_union_plan_nodeid();
  int32_t recursive_union_plan_nodeid() const;
  void set_recursive_union_plan_nodeid(int32_t value);
  private:
  int32_t _internal_recursive_union_plan_nodeid() const;
  void _internal_set_recursive_union_plan_nodeid(int32_t value);
  public:

  // double pred_total_time = 12;
  void clear_pred_total_time();
  double pred_total_time() const;
  void set_pred_total_time(double value);
  private:
  double _internal_pred_total_time() const;
  void _internal_set_pred_total_time(double value);
  public:

  // int64 pred_max_memory = 13;
  void clear_pred_max_memory();
  int64_t pred_max_memory() const;
  void set_pred_max_memory(int64_t value);
  private:
  int64_t _internal_pred_max_memory() const;
  void _internal_set_pred_max_memory(int64_t value);
  public:

  // int32 control_plan_nodeid = 16;
  void clear_control_plan_nodeid();
  int32_t control_plan_nodeid() const;
  void set_control_plan_nodeid(int32_t value);
  private:
  int32_t _internal_control_plan_nodeid() const;
  void _internal_set_control_plan_nodeid(int32_t value);
  public:

  // bool recursive_union_controller = 15;
  void clear_recursive_union_controller();
  bool recursive_union_controller() const;
  void set_recursive_union_controller(bool value);
  private:
  bool _internal_recursive_union_controller() const;
  void _internal_set_recursive_union_controller(bool value);
  public:

  // bool is_sync_plannode = 17;
  void clear_is_sync_plannode();
  bool is_sync_plannode() const;
  void set_is_sync_plannode(bool value);
  private:
  bool _internal_is_sync_plannode() const;
  void _internal_set_is_sync_plannode(bool value);
  public:

  // bool ispwj = 22;
  void clear_ispwj();
  bool ispwj() const;
  void set_ispwj(bool value);
  private:
  bool _internal_ispwj() const;
  void _internal_set_ispwj(bool value);
  public:

  // bool vec_output = 30;
  void clear_vec_output();
  bool vec_output() const;
  void set_vec_output(bool value);
  private:
  bool _internal_vec_output() const;
  void _internal_set_vec_output(bool value);
  public:

  // int32 paramno = 23;
  void clear_paramno();
  int32_t paramno() const;
  void set_paramno(int32_t value);
  private:
  int32_t _internal_paramno() const;
  void _internal_set_paramno(int32_t value);
  public:

  // int32 subparamno = 24;
  void clear_subparamno();
  int32_t subparamno() const;
  void set_subparamno(int32_t value);
  private:
  int32_t _internal_subparamno() const;
  void _internal_set_subparamno(int32_t value);
  public:

  // bool hasUniqueResults = 31;
  void clear_hasuniqueresults();
  bool hasuniqueresults() const;
  void set_hasuniqueresults(bool value);
  private:
  bool _internal_hasuniqueresults() const;
  void _internal_set_hasuniqueresults(bool value);
  public:

  // bool isDeltaTable = 32;
  void clear_isdeltatable();
  bool isdeltatable() const;
  void set_isdeltatable(bool value);
  private:
  bool _internal_isdeltatable() const;
  void _internal_set_isdeltatable(bool value);
  public:

  // bool parallel_enabled = 35;
  void clear_parallel_enabled();
  bool parallel_enabled() const;
  void set_parallel_enabled(bool value);
  private:
  bool _internal_parallel_enabled() const;
  void _internal_set_parallel_enabled(bool value);
  public:

  // bool hasHashFilter = 36;
  void clear_hashashfilter();
  bool hashashfilter() const;
  void set_hashashfilter(bool value);
  private:
  bool _internal_hashashfilter() const;
  void _internal_set_hashashfilter(bool value);
  public:

  // int32 operatorMaxMem = 34;
  void clear_operatormaxmem();
  int32_t operatormaxmem() const;
  void set_operatormaxmem(int32_t value);
  private:
  int32_t _internal_operatormaxmem() const;
  void _internal_set_operatormaxmem(int32_t value);
  public:

  // double innerdistinct = 41;
  void clear_innerdistinct();
  double innerdistinct() const;
  void set_innerdistinct(double value);
  private:
  double _internal_innerdistinct() const;
  void _internal_set_innerdistinct(double value);
  public:

  // double outerdistinct = 42;
  void clear_outerdistinct();
  double outerdistinct() const;
  void set_outerdistinct(double value);
  private:
  double _internal_outerdistinct() const;
  void _internal_set_outerdistinct(double value);
  public:

  // int32 ng_num = 40;
  void clear_ng_num();
  int32_t ng_num() const;
  void set_ng_num(int32_t value);
  private:
  int32_t _internal_ng_num() const;
  void _internal_set_ng_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > operatormemkb_;
  mutable std::atomic<int> _operatormemkb_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ng_operatormemkbarray_;
  mutable std::atomic<int> _ng_operatormemkbarray_cached_byte_size_;
  ::proto_plan::List* targetlist_;
  ::proto_plan::List* qual_;
  ::proto_plan::Plan* lefttree_;
  ::proto_plan::Plan* righttree_;
  ::proto_plan::List* initplan_;
  ::proto_plan::List* distributed_keys_;
  ::proto_plan::ExecNodes* exec_nodes_;
  ::proto_plan::Bitmapset* extparam_;
  ::proto_plan::Bitmapset* allparam_;
  ::proto_plan::List* var_list_;
  ::proto_plan::List* filterindexlist_;
  ::proto_plan::List* flatlist_;
  ::proto_plan::RightRefState* rightrefstate_;
  uint32_t plan_node_id_;
  uint32_t parent_node_id_;
  double startup_cost_;
  double total_cost_;
  int exec_type_;
  int32_t plan_width_;
  double plan_rows_;
  double multiple_;
  double pred_rows_;
  double pred_startup_time_;
  int32_t dop_;
  int32_t recursive_union_plan_nodeid_;
  double pred_total_time_;
  int64_t pred_max_memory_;
  int32_t control_plan_nodeid_;
  bool recursive_union_controller_;
  bool is_sync_plannode_;
  bool ispwj_;
  bool vec_output_;
  int32_t paramno_;
  int32_t subparamno_;
  bool hasuniqueresults_;
  bool isdeltatable_;
  bool parallel_enabled_;
  bool hashashfilter_;
  int32_t operatormaxmem_;
  double innerdistinct_;
  double outerdistinct_;
  int32_t ng_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RightRefState

// bool isSupported = 1;
inline void RightRefState::clear_issupported() {
  issupported_ = false;
}
inline bool RightRefState::_internal_issupported() const {
  return issupported_;
}
inline bool RightRefState::issupported() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.isSupported)
  return _internal_issupported();
}
inline void RightRefState::_internal_set_issupported(bool value) {
  
  issupported_ = value;
}
inline void RightRefState::set_issupported(bool value) {
  _internal_set_issupported(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.isSupported)
}

// bool isInsertHasRightRef = 2;
inline void RightRefState::clear_isinserthasrightref() {
  isinserthasrightref_ = false;
}
inline bool RightRefState::_internal_isinserthasrightref() const {
  return isinserthasrightref_;
}
inline bool RightRefState::isinserthasrightref() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.isInsertHasRightRef)
  return _internal_isinserthasrightref();
}
inline void RightRefState::_internal_set_isinserthasrightref(bool value) {
  
  isinserthasrightref_ = value;
}
inline void RightRefState::set_isinserthasrightref(bool value) {
  _internal_set_isinserthasrightref(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.isInsertHasRightRef)
}

// int32 explicitAttrLen = 3;
inline void RightRefState::clear_explicitattrlen() {
  explicitattrlen_ = 0;
}
inline int32_t RightRefState::_internal_explicitattrlen() const {
  return explicitattrlen_;
}
inline int32_t RightRefState::explicitattrlen() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.explicitAttrLen)
  return _internal_explicitattrlen();
}
inline void RightRefState::_internal_set_explicitattrlen(int32_t value) {
  
  explicitattrlen_ = value;
}
inline void RightRefState::set_explicitattrlen(int32_t value) {
  _internal_set_explicitattrlen(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.explicitAttrLen)
}

// repeated int32 explicitAttrNos = 4;
inline int RightRefState::_internal_explicitattrnos_size() const {
  return explicitattrnos_.size();
}
inline int RightRefState::explicitattrnos_size() const {
  return _internal_explicitattrnos_size();
}
inline void RightRefState::clear_explicitattrnos() {
  explicitattrnos_.Clear();
}
inline int32_t RightRefState::_internal_explicitattrnos(int index) const {
  return explicitattrnos_.Get(index);
}
inline int32_t RightRefState::explicitattrnos(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.explicitAttrNos)
  return _internal_explicitattrnos(index);
}
inline void RightRefState::set_explicitattrnos(int index, int32_t value) {
  explicitattrnos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.explicitAttrNos)
}
inline void RightRefState::_internal_add_explicitattrnos(int32_t value) {
  explicitattrnos_.Add(value);
}
inline void RightRefState::add_explicitattrnos(int32_t value) {
  _internal_add_explicitattrnos(value);
  // @@protoc_insertion_point(field_add:proto_plan.RightRefState.explicitAttrNos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RightRefState::_internal_explicitattrnos() const {
  return explicitattrnos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RightRefState::explicitattrnos() const {
  // @@protoc_insertion_point(field_list:proto_plan.RightRefState.explicitAttrNos)
  return _internal_explicitattrnos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RightRefState::_internal_mutable_explicitattrnos() {
  return &explicitattrnos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RightRefState::mutable_explicitattrnos() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.RightRefState.explicitAttrNos)
  return _internal_mutable_explicitattrnos();
}

// repeated .proto_plan.Const constValues = 5;
inline int RightRefState::_internal_constvalues_size() const {
  return constvalues_.size();
}
inline int RightRefState::constvalues_size() const {
  return _internal_constvalues_size();
}
inline ::proto_plan::Const* RightRefState::mutable_constvalues(int index) {
  // @@protoc_insertion_point(field_mutable:proto_plan.RightRefState.constValues)
  return constvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >*
RightRefState::mutable_constvalues() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.RightRefState.constValues)
  return &constvalues_;
}
inline const ::proto_plan::Const& RightRefState::_internal_constvalues(int index) const {
  return constvalues_.Get(index);
}
inline const ::proto_plan::Const& RightRefState::constvalues(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.constValues)
  return _internal_constvalues(index);
}
inline ::proto_plan::Const* RightRefState::_internal_add_constvalues() {
  return constvalues_.Add();
}
inline ::proto_plan::Const* RightRefState::add_constvalues() {
  ::proto_plan::Const* _add = _internal_add_constvalues();
  // @@protoc_insertion_point(field_add:proto_plan.RightRefState.constValues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >&
RightRefState::constvalues() const {
  // @@protoc_insertion_point(field_list:proto_plan.RightRefState.constValues)
  return constvalues_;
}

// int32 colCnt = 6;
inline void RightRefState::clear_colcnt() {
  colcnt_ = 0;
}
inline int32_t RightRefState::_internal_colcnt() const {
  return colcnt_;
}
inline int32_t RightRefState::colcnt() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.colCnt)
  return _internal_colcnt();
}
inline void RightRefState::_internal_set_colcnt(int32_t value) {
  
  colcnt_ = value;
}
inline void RightRefState::set_colcnt(int32_t value) {
  _internal_set_colcnt(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.colCnt)
}

// repeated uint64 values = 7;
inline int RightRefState::_internal_values_size() const {
  return values_.size();
}
inline int RightRefState::values_size() const {
  return _internal_values_size();
}
inline void RightRefState::clear_values() {
  values_.Clear();
}
inline uint64_t RightRefState::_internal_values(int index) const {
  return values_.Get(index);
}
inline uint64_t RightRefState::values(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.values)
  return _internal_values(index);
}
inline void RightRefState::set_values(int index, uint64_t value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.values)
}
inline void RightRefState::_internal_add_values(uint64_t value) {
  values_.Add(value);
}
inline void RightRefState::add_values(uint64_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:proto_plan.RightRefState.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RightRefState::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
RightRefState::values() const {
  // @@protoc_insertion_point(field_list:proto_plan.RightRefState.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RightRefState::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
RightRefState::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.RightRefState.values)
  return _internal_mutable_values();
}

// repeated bool hasExecs = 8;
inline int RightRefState::_internal_hasexecs_size() const {
  return hasexecs_.size();
}
inline int RightRefState::hasexecs_size() const {
  return _internal_hasexecs_size();
}
inline void RightRefState::clear_hasexecs() {
  hasexecs_.Clear();
}
inline bool RightRefState::_internal_hasexecs(int index) const {
  return hasexecs_.Get(index);
}
inline bool RightRefState::hasexecs(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.hasExecs)
  return _internal_hasexecs(index);
}
inline void RightRefState::set_hasexecs(int index, bool value) {
  hasexecs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.hasExecs)
}
inline void RightRefState::_internal_add_hasexecs(bool value) {
  hasexecs_.Add(value);
}
inline void RightRefState::add_hasexecs(bool value) {
  _internal_add_hasexecs(value);
  // @@protoc_insertion_point(field_add:proto_plan.RightRefState.hasExecs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RightRefState::_internal_hasexecs() const {
  return hasexecs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RightRefState::hasexecs() const {
  // @@protoc_insertion_point(field_list:proto_plan.RightRefState.hasExecs)
  return _internal_hasexecs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RightRefState::_internal_mutable_hasexecs() {
  return &hasexecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RightRefState::mutable_hasexecs() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.RightRefState.hasExecs)
  return _internal_mutable_hasexecs();
}

// repeated bool isNulls = 9;
inline int RightRefState::_internal_isnulls_size() const {
  return isnulls_.size();
}
inline int RightRefState::isnulls_size() const {
  return _internal_isnulls_size();
}
inline void RightRefState::clear_isnulls() {
  isnulls_.Clear();
}
inline bool RightRefState::_internal_isnulls(int index) const {
  return isnulls_.Get(index);
}
inline bool RightRefState::isnulls(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.isNulls)
  return _internal_isnulls(index);
}
inline void RightRefState::set_isnulls(int index, bool value) {
  isnulls_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.isNulls)
}
inline void RightRefState::_internal_add_isnulls(bool value) {
  isnulls_.Add(value);
}
inline void RightRefState::add_isnulls(bool value) {
  _internal_add_isnulls(value);
  // @@protoc_insertion_point(field_add:proto_plan.RightRefState.isNulls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RightRefState::_internal_isnulls() const {
  return isnulls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RightRefState::isnulls() const {
  // @@protoc_insertion_point(field_list:proto_plan.RightRefState.isNulls)
  return _internal_isnulls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RightRefState::_internal_mutable_isnulls() {
  return &isnulls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RightRefState::mutable_isnulls() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.RightRefState.isNulls)
  return _internal_mutable_isnulls();
}

// bool isUpsert = 10;
inline void RightRefState::clear_isupsert() {
  isupsert_ = false;
}
inline bool RightRefState::_internal_isupsert() const {
  return isupsert_;
}
inline bool RightRefState::isupsert() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.isUpsert)
  return _internal_isupsert();
}
inline void RightRefState::_internal_set_isupsert(bool value) {
  
  isupsert_ = value;
}
inline void RightRefState::set_isupsert(bool value) {
  _internal_set_isupsert(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.isUpsert)
}

// bool isUpsertHasRightRef = 11;
inline void RightRefState::clear_isupserthasrightref() {
  isupserthasrightref_ = false;
}
inline bool RightRefState::_internal_isupserthasrightref() const {
  return isupserthasrightref_;
}
inline bool RightRefState::isupserthasrightref() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.isUpsertHasRightRef)
  return _internal_isupserthasrightref();
}
inline void RightRefState::_internal_set_isupserthasrightref(bool value) {
  
  isupserthasrightref_ = value;
}
inline void RightRefState::set_isupserthasrightref(bool value) {
  _internal_set_isupserthasrightref(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.isUpsertHasRightRef)
}

// int32 usExplicitAttrLen = 12;
inline void RightRefState::clear_usexplicitattrlen() {
  usexplicitattrlen_ = 0;
}
inline int32_t RightRefState::_internal_usexplicitattrlen() const {
  return usexplicitattrlen_;
}
inline int32_t RightRefState::usexplicitattrlen() const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.usExplicitAttrLen)
  return _internal_usexplicitattrlen();
}
inline void RightRefState::_internal_set_usexplicitattrlen(int32_t value) {
  
  usexplicitattrlen_ = value;
}
inline void RightRefState::set_usexplicitattrlen(int32_t value) {
  _internal_set_usexplicitattrlen(value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.usExplicitAttrLen)
}

// repeated int32 usExplicitAttrNos = 13;
inline int RightRefState::_internal_usexplicitattrnos_size() const {
  return usexplicitattrnos_.size();
}
inline int RightRefState::usexplicitattrnos_size() const {
  return _internal_usexplicitattrnos_size();
}
inline void RightRefState::clear_usexplicitattrnos() {
  usexplicitattrnos_.Clear();
}
inline int32_t RightRefState::_internal_usexplicitattrnos(int index) const {
  return usexplicitattrnos_.Get(index);
}
inline int32_t RightRefState::usexplicitattrnos(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.RightRefState.usExplicitAttrNos)
  return _internal_usexplicitattrnos(index);
}
inline void RightRefState::set_usexplicitattrnos(int index, int32_t value) {
  usexplicitattrnos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.RightRefState.usExplicitAttrNos)
}
inline void RightRefState::_internal_add_usexplicitattrnos(int32_t value) {
  usexplicitattrnos_.Add(value);
}
inline void RightRefState::add_usexplicitattrnos(int32_t value) {
  _internal_add_usexplicitattrnos(value);
  // @@protoc_insertion_point(field_add:proto_plan.RightRefState.usExplicitAttrNos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RightRefState::_internal_usexplicitattrnos() const {
  return usexplicitattrnos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RightRefState::usexplicitattrnos() const {
  // @@protoc_insertion_point(field_list:proto_plan.RightRefState.usExplicitAttrNos)
  return _internal_usexplicitattrnos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RightRefState::_internal_mutable_usexplicitattrnos() {
  return &usexplicitattrnos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RightRefState::mutable_usexplicitattrnos() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.RightRefState.usExplicitAttrNos)
  return _internal_mutable_usexplicitattrnos();
}

// -------------------------------------------------------------------

// Plan

// uint32 plan_node_id = 1;
inline void Plan::clear_plan_node_id() {
  plan_node_id_ = 0u;
}
inline uint32_t Plan::_internal_plan_node_id() const {
  return plan_node_id_;
}
inline uint32_t Plan::plan_node_id() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.plan_node_id)
  return _internal_plan_node_id();
}
inline void Plan::_internal_set_plan_node_id(uint32_t value) {
  
  plan_node_id_ = value;
}
inline void Plan::set_plan_node_id(uint32_t value) {
  _internal_set_plan_node_id(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.plan_node_id)
}

// uint32 parent_node_id = 2;
inline void Plan::clear_parent_node_id() {
  parent_node_id_ = 0u;
}
inline uint32_t Plan::_internal_parent_node_id() const {
  return parent_node_id_;
}
inline uint32_t Plan::parent_node_id() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.parent_node_id)
  return _internal_parent_node_id();
}
inline void Plan::_internal_set_parent_node_id(uint32_t value) {
  
  parent_node_id_ = value;
}
inline void Plan::set_parent_node_id(uint32_t value) {
  _internal_set_parent_node_id(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.parent_node_id)
}

// .proto_plan.RemoteQueryExecType exec_type = 3;
inline void Plan::clear_exec_type() {
  exec_type_ = 0;
}
inline ::proto_plan::RemoteQueryExecType Plan::_internal_exec_type() const {
  return static_cast< ::proto_plan::RemoteQueryExecType >(exec_type_);
}
inline ::proto_plan::RemoteQueryExecType Plan::exec_type() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.exec_type)
  return _internal_exec_type();
}
inline void Plan::_internal_set_exec_type(::proto_plan::RemoteQueryExecType value) {
  
  exec_type_ = value;
}
inline void Plan::set_exec_type(::proto_plan::RemoteQueryExecType value) {
  _internal_set_exec_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.exec_type)
}

// double startup_cost = 4;
inline void Plan::clear_startup_cost() {
  startup_cost_ = 0;
}
inline double Plan::_internal_startup_cost() const {
  return startup_cost_;
}
inline double Plan::startup_cost() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.startup_cost)
  return _internal_startup_cost();
}
inline void Plan::_internal_set_startup_cost(double value) {
  
  startup_cost_ = value;
}
inline void Plan::set_startup_cost(double value) {
  _internal_set_startup_cost(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.startup_cost)
}

// double total_cost = 5;
inline void Plan::clear_total_cost() {
  total_cost_ = 0;
}
inline double Plan::_internal_total_cost() const {
  return total_cost_;
}
inline double Plan::total_cost() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.total_cost)
  return _internal_total_cost();
}
inline void Plan::_internal_set_total_cost(double value) {
  
  total_cost_ = value;
}
inline void Plan::set_total_cost(double value) {
  _internal_set_total_cost(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.total_cost)
}

// double plan_rows = 6;
inline void Plan::clear_plan_rows() {
  plan_rows_ = 0;
}
inline double Plan::_internal_plan_rows() const {
  return plan_rows_;
}
inline double Plan::plan_rows() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.plan_rows)
  return _internal_plan_rows();
}
inline void Plan::_internal_set_plan_rows(double value) {
  
  plan_rows_ = value;
}
inline void Plan::set_plan_rows(double value) {
  _internal_set_plan_rows(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.plan_rows)
}

// double multiple = 7;
inline void Plan::clear_multiple() {
  multiple_ = 0;
}
inline double Plan::_internal_multiple() const {
  return multiple_;
}
inline double Plan::multiple() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.multiple)
  return _internal_multiple();
}
inline void Plan::_internal_set_multiple(double value) {
  
  multiple_ = value;
}
inline void Plan::set_multiple(double value) {
  _internal_set_multiple(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.multiple)
}

// int32 plan_width = 8;
inline void Plan::clear_plan_width() {
  plan_width_ = 0;
}
inline int32_t Plan::_internal_plan_width() const {
  return plan_width_;
}
inline int32_t Plan::plan_width() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.plan_width)
  return _internal_plan_width();
}
inline void Plan::_internal_set_plan_width(int32_t value) {
  
  plan_width_ = value;
}
inline void Plan::set_plan_width(int32_t value) {
  _internal_set_plan_width(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.plan_width)
}

// int32 dop = 9;
inline void Plan::clear_dop() {
  dop_ = 0;
}
inline int32_t Plan::_internal_dop() const {
  return dop_;
}
inline int32_t Plan::dop() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.dop)
  return _internal_dop();
}
inline void Plan::_internal_set_dop(int32_t value) {
  
  dop_ = value;
}
inline void Plan::set_dop(int32_t value) {
  _internal_set_dop(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.dop)
}

// double pred_rows = 10;
inline void Plan::clear_pred_rows() {
  pred_rows_ = 0;
}
inline double Plan::_internal_pred_rows() const {
  return pred_rows_;
}
inline double Plan::pred_rows() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.pred_rows)
  return _internal_pred_rows();
}
inline void Plan::_internal_set_pred_rows(double value) {
  
  pred_rows_ = value;
}
inline void Plan::set_pred_rows(double value) {
  _internal_set_pred_rows(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.pred_rows)
}

// double pred_startup_time = 11;
inline void Plan::clear_pred_startup_time() {
  pred_startup_time_ = 0;
}
inline double Plan::_internal_pred_startup_time() const {
  return pred_startup_time_;
}
inline double Plan::pred_startup_time() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.pred_startup_time)
  return _internal_pred_startup_time();
}
inline void Plan::_internal_set_pred_startup_time(double value) {
  
  pred_startup_time_ = value;
}
inline void Plan::set_pred_startup_time(double value) {
  _internal_set_pred_startup_time(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.pred_startup_time)
}

// double pred_total_time = 12;
inline void Plan::clear_pred_total_time() {
  pred_total_time_ = 0;
}
inline double Plan::_internal_pred_total_time() const {
  return pred_total_time_;
}
inline double Plan::pred_total_time() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.pred_total_time)
  return _internal_pred_total_time();
}
inline void Plan::_internal_set_pred_total_time(double value) {
  
  pred_total_time_ = value;
}
inline void Plan::set_pred_total_time(double value) {
  _internal_set_pred_total_time(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.pred_total_time)
}

// int64 pred_max_memory = 13;
inline void Plan::clear_pred_max_memory() {
  pred_max_memory_ = int64_t{0};
}
inline int64_t Plan::_internal_pred_max_memory() const {
  return pred_max_memory_;
}
inline int64_t Plan::pred_max_memory() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.pred_max_memory)
  return _internal_pred_max_memory();
}
inline void Plan::_internal_set_pred_max_memory(int64_t value) {
  
  pred_max_memory_ = value;
}
inline void Plan::set_pred_max_memory(int64_t value) {
  _internal_set_pred_max_memory(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.pred_max_memory)
}

// int32 recursive_union_plan_nodeid = 14;
inline void Plan::clear_recursive_union_plan_nodeid() {
  recursive_union_plan_nodeid_ = 0;
}
inline int32_t Plan::_internal_recursive_union_plan_nodeid() const {
  return recursive_union_plan_nodeid_;
}
inline int32_t Plan::recursive_union_plan_nodeid() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.recursive_union_plan_nodeid)
  return _internal_recursive_union_plan_nodeid();
}
inline void Plan::_internal_set_recursive_union_plan_nodeid(int32_t value) {
  
  recursive_union_plan_nodeid_ = value;
}
inline void Plan::set_recursive_union_plan_nodeid(int32_t value) {
  _internal_set_recursive_union_plan_nodeid(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.recursive_union_plan_nodeid)
}

// bool recursive_union_controller = 15;
inline void Plan::clear_recursive_union_controller() {
  recursive_union_controller_ = false;
}
inline bool Plan::_internal_recursive_union_controller() const {
  return recursive_union_controller_;
}
inline bool Plan::recursive_union_controller() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.recursive_union_controller)
  return _internal_recursive_union_controller();
}
inline void Plan::_internal_set_recursive_union_controller(bool value) {
  
  recursive_union_controller_ = value;
}
inline void Plan::set_recursive_union_controller(bool value) {
  _internal_set_recursive_union_controller(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.recursive_union_controller)
}

// int32 control_plan_nodeid = 16;
inline void Plan::clear_control_plan_nodeid() {
  control_plan_nodeid_ = 0;
}
inline int32_t Plan::_internal_control_plan_nodeid() const {
  return control_plan_nodeid_;
}
inline int32_t Plan::control_plan_nodeid() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.control_plan_nodeid)
  return _internal_control_plan_nodeid();
}
inline void Plan::_internal_set_control_plan_nodeid(int32_t value) {
  
  control_plan_nodeid_ = value;
}
inline void Plan::set_control_plan_nodeid(int32_t value) {
  _internal_set_control_plan_nodeid(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.control_plan_nodeid)
}

// bool is_sync_plannode = 17;
inline void Plan::clear_is_sync_plannode() {
  is_sync_plannode_ = false;
}
inline bool Plan::_internal_is_sync_plannode() const {
  return is_sync_plannode_;
}
inline bool Plan::is_sync_plannode() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.is_sync_plannode)
  return _internal_is_sync_plannode();
}
inline void Plan::_internal_set_is_sync_plannode(bool value) {
  
  is_sync_plannode_ = value;
}
inline void Plan::set_is_sync_plannode(bool value) {
  _internal_set_is_sync_plannode(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.is_sync_plannode)
}

// .proto_plan.List targetlist = 18;
inline bool Plan::_internal_has_targetlist() const {
  return this != internal_default_instance() && targetlist_ != nullptr;
}
inline bool Plan::has_targetlist() const {
  return _internal_has_targetlist();
}
inline const ::proto_plan::List& Plan::_internal_targetlist() const {
  const ::proto_plan::List* p = targetlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::targetlist() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.targetlist)
  return _internal_targetlist();
}
inline void Plan::unsafe_arena_set_allocated_targetlist(
    ::proto_plan::List* targetlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlist_);
  }
  targetlist_ = targetlist;
  if (targetlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.targetlist)
}
inline ::proto_plan::List* Plan::release_targetlist() {
  
  ::proto_plan::List* temp = targetlist_;
  targetlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_targetlist() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.targetlist)
  
  ::proto_plan::List* temp = targetlist_;
  targetlist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_targetlist() {
  
  if (targetlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    targetlist_ = p;
  }
  return targetlist_;
}
inline ::proto_plan::List* Plan::mutable_targetlist() {
  ::proto_plan::List* _msg = _internal_mutable_targetlist();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.targetlist)
  return _msg;
}
inline void Plan::set_allocated_targetlist(::proto_plan::List* targetlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlist_);
  }
  if (targetlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlist));
    if (message_arena != submessage_arena) {
      targetlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetlist, submessage_arena);
    }
    
  } else {
    
  }
  targetlist_ = targetlist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.targetlist)
}

// .proto_plan.List qual = 19;
inline bool Plan::_internal_has_qual() const {
  return this != internal_default_instance() && qual_ != nullptr;
}
inline bool Plan::has_qual() const {
  return _internal_has_qual();
}
inline const ::proto_plan::List& Plan::_internal_qual() const {
  const ::proto_plan::List* p = qual_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::qual() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.qual)
  return _internal_qual();
}
inline void Plan::unsafe_arena_set_allocated_qual(
    ::proto_plan::List* qual) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qual_);
  }
  qual_ = qual;
  if (qual) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.qual)
}
inline ::proto_plan::List* Plan::release_qual() {
  
  ::proto_plan::List* temp = qual_;
  qual_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_qual() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.qual)
  
  ::proto_plan::List* temp = qual_;
  qual_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_qual() {
  
  if (qual_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    qual_ = p;
  }
  return qual_;
}
inline ::proto_plan::List* Plan::mutable_qual() {
  ::proto_plan::List* _msg = _internal_mutable_qual();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.qual)
  return _msg;
}
inline void Plan::set_allocated_qual(::proto_plan::List* qual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(qual_);
  }
  if (qual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qual));
    if (message_arena != submessage_arena) {
      qual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qual, submessage_arena);
    }
    
  } else {
    
  }
  qual_ = qual;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.qual)
}

// .proto_plan.Plan lefttree = 20;
inline bool Plan::_internal_has_lefttree() const {
  return this != internal_default_instance() && lefttree_ != nullptr;
}
inline bool Plan::has_lefttree() const {
  return _internal_has_lefttree();
}
inline void Plan::clear_lefttree() {
  if (GetArenaForAllocation() == nullptr && lefttree_ != nullptr) {
    delete lefttree_;
  }
  lefttree_ = nullptr;
}
inline const ::proto_plan::Plan& Plan::_internal_lefttree() const {
  const ::proto_plan::Plan* p = lefttree_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Plan&>(
      ::proto_plan::_Plan_default_instance_);
}
inline const ::proto_plan::Plan& Plan::lefttree() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.lefttree)
  return _internal_lefttree();
}
inline void Plan::unsafe_arena_set_allocated_lefttree(
    ::proto_plan::Plan* lefttree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttree_);
  }
  lefttree_ = lefttree;
  if (lefttree) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.lefttree)
}
inline ::proto_plan::Plan* Plan::release_lefttree() {
  
  ::proto_plan::Plan* temp = lefttree_;
  lefttree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Plan* Plan::unsafe_arena_release_lefttree() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.lefttree)
  
  ::proto_plan::Plan* temp = lefttree_;
  lefttree_ = nullptr;
  return temp;
}
inline ::proto_plan::Plan* Plan::_internal_mutable_lefttree() {
  
  if (lefttree_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Plan>(GetArenaForAllocation());
    lefttree_ = p;
  }
  return lefttree_;
}
inline ::proto_plan::Plan* Plan::mutable_lefttree() {
  ::proto_plan::Plan* _msg = _internal_mutable_lefttree();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.lefttree)
  return _msg;
}
inline void Plan::set_allocated_lefttree(::proto_plan::Plan* lefttree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lefttree_;
  }
  if (lefttree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::Plan>::GetOwningArena(lefttree);
    if (message_arena != submessage_arena) {
      lefttree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttree, submessage_arena);
    }
    
  } else {
    
  }
  lefttree_ = lefttree;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.lefttree)
}

// .proto_plan.Plan righttree = 21;
inline bool Plan::_internal_has_righttree() const {
  return this != internal_default_instance() && righttree_ != nullptr;
}
inline bool Plan::has_righttree() const {
  return _internal_has_righttree();
}
inline void Plan::clear_righttree() {
  if (GetArenaForAllocation() == nullptr && righttree_ != nullptr) {
    delete righttree_;
  }
  righttree_ = nullptr;
}
inline const ::proto_plan::Plan& Plan::_internal_righttree() const {
  const ::proto_plan::Plan* p = righttree_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Plan&>(
      ::proto_plan::_Plan_default_instance_);
}
inline const ::proto_plan::Plan& Plan::righttree() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.righttree)
  return _internal_righttree();
}
inline void Plan::unsafe_arena_set_allocated_righttree(
    ::proto_plan::Plan* righttree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttree_);
  }
  righttree_ = righttree;
  if (righttree) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.righttree)
}
inline ::proto_plan::Plan* Plan::release_righttree() {
  
  ::proto_plan::Plan* temp = righttree_;
  righttree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Plan* Plan::unsafe_arena_release_righttree() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.righttree)
  
  ::proto_plan::Plan* temp = righttree_;
  righttree_ = nullptr;
  return temp;
}
inline ::proto_plan::Plan* Plan::_internal_mutable_righttree() {
  
  if (righttree_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Plan>(GetArenaForAllocation());
    righttree_ = p;
  }
  return righttree_;
}
inline ::proto_plan::Plan* Plan::mutable_righttree() {
  ::proto_plan::Plan* _msg = _internal_mutable_righttree();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.righttree)
  return _msg;
}
inline void Plan::set_allocated_righttree(::proto_plan::Plan* righttree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete righttree_;
  }
  if (righttree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::Plan>::GetOwningArena(righttree);
    if (message_arena != submessage_arena) {
      righttree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttree, submessage_arena);
    }
    
  } else {
    
  }
  righttree_ = righttree;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.righttree)
}

// bool ispwj = 22;
inline void Plan::clear_ispwj() {
  ispwj_ = false;
}
inline bool Plan::_internal_ispwj() const {
  return ispwj_;
}
inline bool Plan::ispwj() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.ispwj)
  return _internal_ispwj();
}
inline void Plan::_internal_set_ispwj(bool value) {
  
  ispwj_ = value;
}
inline void Plan::set_ispwj(bool value) {
  _internal_set_ispwj(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.ispwj)
}

// int32 paramno = 23;
inline void Plan::clear_paramno() {
  paramno_ = 0;
}
inline int32_t Plan::_internal_paramno() const {
  return paramno_;
}
inline int32_t Plan::paramno() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.paramno)
  return _internal_paramno();
}
inline void Plan::_internal_set_paramno(int32_t value) {
  
  paramno_ = value;
}
inline void Plan::set_paramno(int32_t value) {
  _internal_set_paramno(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.paramno)
}

// int32 subparamno = 24;
inline void Plan::clear_subparamno() {
  subparamno_ = 0;
}
inline int32_t Plan::_internal_subparamno() const {
  return subparamno_;
}
inline int32_t Plan::subparamno() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.subparamno)
  return _internal_subparamno();
}
inline void Plan::_internal_set_subparamno(int32_t value) {
  
  subparamno_ = value;
}
inline void Plan::set_subparamno(int32_t value) {
  _internal_set_subparamno(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.subparamno)
}

// .proto_plan.List initPlan = 25;
inline bool Plan::_internal_has_initplan() const {
  return this != internal_default_instance() && initplan_ != nullptr;
}
inline bool Plan::has_initplan() const {
  return _internal_has_initplan();
}
inline const ::proto_plan::List& Plan::_internal_initplan() const {
  const ::proto_plan::List* p = initplan_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::initplan() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.initPlan)
  return _internal_initplan();
}
inline void Plan::unsafe_arena_set_allocated_initplan(
    ::proto_plan::List* initplan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initplan_);
  }
  initplan_ = initplan;
  if (initplan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.initPlan)
}
inline ::proto_plan::List* Plan::release_initplan() {
  
  ::proto_plan::List* temp = initplan_;
  initplan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_initplan() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.initPlan)
  
  ::proto_plan::List* temp = initplan_;
  initplan_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_initplan() {
  
  if (initplan_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    initplan_ = p;
  }
  return initplan_;
}
inline ::proto_plan::List* Plan::mutable_initplan() {
  ::proto_plan::List* _msg = _internal_mutable_initplan();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.initPlan)
  return _msg;
}
inline void Plan::set_allocated_initplan(::proto_plan::List* initplan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(initplan_);
  }
  if (initplan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initplan));
    if (message_arena != submessage_arena) {
      initplan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initplan, submessage_arena);
    }
    
  } else {
    
  }
  initplan_ = initplan;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.initPlan)
}

// .proto_plan.List distributed_keys = 26;
inline bool Plan::_internal_has_distributed_keys() const {
  return this != internal_default_instance() && distributed_keys_ != nullptr;
}
inline bool Plan::has_distributed_keys() const {
  return _internal_has_distributed_keys();
}
inline const ::proto_plan::List& Plan::_internal_distributed_keys() const {
  const ::proto_plan::List* p = distributed_keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::distributed_keys() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.distributed_keys)
  return _internal_distributed_keys();
}
inline void Plan::unsafe_arena_set_allocated_distributed_keys(
    ::proto_plan::List* distributed_keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distributed_keys_);
  }
  distributed_keys_ = distributed_keys;
  if (distributed_keys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.distributed_keys)
}
inline ::proto_plan::List* Plan::release_distributed_keys() {
  
  ::proto_plan::List* temp = distributed_keys_;
  distributed_keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_distributed_keys() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.distributed_keys)
  
  ::proto_plan::List* temp = distributed_keys_;
  distributed_keys_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_distributed_keys() {
  
  if (distributed_keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    distributed_keys_ = p;
  }
  return distributed_keys_;
}
inline ::proto_plan::List* Plan::mutable_distributed_keys() {
  ::proto_plan::List* _msg = _internal_mutable_distributed_keys();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.distributed_keys)
  return _msg;
}
inline void Plan::set_allocated_distributed_keys(::proto_plan::List* distributed_keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(distributed_keys_);
  }
  if (distributed_keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distributed_keys));
    if (message_arena != submessage_arena) {
      distributed_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distributed_keys, submessage_arena);
    }
    
  } else {
    
  }
  distributed_keys_ = distributed_keys;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.distributed_keys)
}

// .proto_plan.ExecNodes exec_nodes = 27;
inline bool Plan::_internal_has_exec_nodes() const {
  return this != internal_default_instance() && exec_nodes_ != nullptr;
}
inline bool Plan::has_exec_nodes() const {
  return _internal_has_exec_nodes();
}
inline const ::proto_plan::ExecNodes& Plan::_internal_exec_nodes() const {
  const ::proto_plan::ExecNodes* p = exec_nodes_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::ExecNodes&>(
      ::proto_plan::_ExecNodes_default_instance_);
}
inline const ::proto_plan::ExecNodes& Plan::exec_nodes() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.exec_nodes)
  return _internal_exec_nodes();
}
inline void Plan::unsafe_arena_set_allocated_exec_nodes(
    ::proto_plan::ExecNodes* exec_nodes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exec_nodes_);
  }
  exec_nodes_ = exec_nodes;
  if (exec_nodes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.exec_nodes)
}
inline ::proto_plan::ExecNodes* Plan::release_exec_nodes() {
  
  ::proto_plan::ExecNodes* temp = exec_nodes_;
  exec_nodes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::ExecNodes* Plan::unsafe_arena_release_exec_nodes() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.exec_nodes)
  
  ::proto_plan::ExecNodes* temp = exec_nodes_;
  exec_nodes_ = nullptr;
  return temp;
}
inline ::proto_plan::ExecNodes* Plan::_internal_mutable_exec_nodes() {
  
  if (exec_nodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::ExecNodes>(GetArenaForAllocation());
    exec_nodes_ = p;
  }
  return exec_nodes_;
}
inline ::proto_plan::ExecNodes* Plan::mutable_exec_nodes() {
  ::proto_plan::ExecNodes* _msg = _internal_mutable_exec_nodes();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.exec_nodes)
  return _msg;
}
inline void Plan::set_allocated_exec_nodes(::proto_plan::ExecNodes* exec_nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exec_nodes_);
  }
  if (exec_nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exec_nodes));
    if (message_arena != submessage_arena) {
      exec_nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exec_nodes, submessage_arena);
    }
    
  } else {
    
  }
  exec_nodes_ = exec_nodes;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.exec_nodes)
}

// .proto_plan.Bitmapset extParam = 28;
inline bool Plan::_internal_has_extparam() const {
  return this != internal_default_instance() && extparam_ != nullptr;
}
inline bool Plan::has_extparam() const {
  return _internal_has_extparam();
}
inline const ::proto_plan::Bitmapset& Plan::_internal_extparam() const {
  const ::proto_plan::Bitmapset* p = extparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Bitmapset&>(
      ::proto_plan::_Bitmapset_default_instance_);
}
inline const ::proto_plan::Bitmapset& Plan::extparam() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.extParam)
  return _internal_extparam();
}
inline void Plan::unsafe_arena_set_allocated_extparam(
    ::proto_plan::Bitmapset* extparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extparam_);
  }
  extparam_ = extparam;
  if (extparam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.extParam)
}
inline ::proto_plan::Bitmapset* Plan::release_extparam() {
  
  ::proto_plan::Bitmapset* temp = extparam_;
  extparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Bitmapset* Plan::unsafe_arena_release_extparam() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.extParam)
  
  ::proto_plan::Bitmapset* temp = extparam_;
  extparam_ = nullptr;
  return temp;
}
inline ::proto_plan::Bitmapset* Plan::_internal_mutable_extparam() {
  
  if (extparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Bitmapset>(GetArenaForAllocation());
    extparam_ = p;
  }
  return extparam_;
}
inline ::proto_plan::Bitmapset* Plan::mutable_extparam() {
  ::proto_plan::Bitmapset* _msg = _internal_mutable_extparam();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.extParam)
  return _msg;
}
inline void Plan::set_allocated_extparam(::proto_plan::Bitmapset* extparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extparam_);
  }
  if (extparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extparam));
    if (message_arena != submessage_arena) {
      extparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extparam, submessage_arena);
    }
    
  } else {
    
  }
  extparam_ = extparam;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.extParam)
}

// .proto_plan.Bitmapset allParam = 29;
inline bool Plan::_internal_has_allparam() const {
  return this != internal_default_instance() && allparam_ != nullptr;
}
inline bool Plan::has_allparam() const {
  return _internal_has_allparam();
}
inline const ::proto_plan::Bitmapset& Plan::_internal_allparam() const {
  const ::proto_plan::Bitmapset* p = allparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Bitmapset&>(
      ::proto_plan::_Bitmapset_default_instance_);
}
inline const ::proto_plan::Bitmapset& Plan::allparam() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.allParam)
  return _internal_allparam();
}
inline void Plan::unsafe_arena_set_allocated_allparam(
    ::proto_plan::Bitmapset* allparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allparam_);
  }
  allparam_ = allparam;
  if (allparam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.allParam)
}
inline ::proto_plan::Bitmapset* Plan::release_allparam() {
  
  ::proto_plan::Bitmapset* temp = allparam_;
  allparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Bitmapset* Plan::unsafe_arena_release_allparam() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.allParam)
  
  ::proto_plan::Bitmapset* temp = allparam_;
  allparam_ = nullptr;
  return temp;
}
inline ::proto_plan::Bitmapset* Plan::_internal_mutable_allparam() {
  
  if (allparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Bitmapset>(GetArenaForAllocation());
    allparam_ = p;
  }
  return allparam_;
}
inline ::proto_plan::Bitmapset* Plan::mutable_allparam() {
  ::proto_plan::Bitmapset* _msg = _internal_mutable_allparam();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.allParam)
  return _msg;
}
inline void Plan::set_allocated_allparam(::proto_plan::Bitmapset* allparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allparam_);
  }
  if (allparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allparam));
    if (message_arena != submessage_arena) {
      allparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allparam, submessage_arena);
    }
    
  } else {
    
  }
  allparam_ = allparam;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.allParam)
}

// bool vec_output = 30;
inline void Plan::clear_vec_output() {
  vec_output_ = false;
}
inline bool Plan::_internal_vec_output() const {
  return vec_output_;
}
inline bool Plan::vec_output() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.vec_output)
  return _internal_vec_output();
}
inline void Plan::_internal_set_vec_output(bool value) {
  
  vec_output_ = value;
}
inline void Plan::set_vec_output(bool value) {
  _internal_set_vec_output(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.vec_output)
}

// bool hasUniqueResults = 31;
inline void Plan::clear_hasuniqueresults() {
  hasuniqueresults_ = false;
}
inline bool Plan::_internal_hasuniqueresults() const {
  return hasuniqueresults_;
}
inline bool Plan::hasuniqueresults() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.hasUniqueResults)
  return _internal_hasuniqueresults();
}
inline void Plan::_internal_set_hasuniqueresults(bool value) {
  
  hasuniqueresults_ = value;
}
inline void Plan::set_hasuniqueresults(bool value) {
  _internal_set_hasuniqueresults(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.hasUniqueResults)
}

// bool isDeltaTable = 32;
inline void Plan::clear_isdeltatable() {
  isdeltatable_ = false;
}
inline bool Plan::_internal_isdeltatable() const {
  return isdeltatable_;
}
inline bool Plan::isdeltatable() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.isDeltaTable)
  return _internal_isdeltatable();
}
inline void Plan::_internal_set_isdeltatable(bool value) {
  
  isdeltatable_ = value;
}
inline void Plan::set_isdeltatable(bool value) {
  _internal_set_isdeltatable(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.isDeltaTable)
}

// repeated int32 operatorMemKB = 33;
inline int Plan::_internal_operatormemkb_size() const {
  return operatormemkb_.size();
}
inline int Plan::operatormemkb_size() const {
  return _internal_operatormemkb_size();
}
inline void Plan::clear_operatormemkb() {
  operatormemkb_.Clear();
}
inline int32_t Plan::_internal_operatormemkb(int index) const {
  return operatormemkb_.Get(index);
}
inline int32_t Plan::operatormemkb(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.operatorMemKB)
  return _internal_operatormemkb(index);
}
inline void Plan::set_operatormemkb(int index, int32_t value) {
  operatormemkb_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.operatorMemKB)
}
inline void Plan::_internal_add_operatormemkb(int32_t value) {
  operatormemkb_.Add(value);
}
inline void Plan::add_operatormemkb(int32_t value) {
  _internal_add_operatormemkb(value);
  // @@protoc_insertion_point(field_add:proto_plan.Plan.operatorMemKB)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Plan::_internal_operatormemkb() const {
  return operatormemkb_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Plan::operatormemkb() const {
  // @@protoc_insertion_point(field_list:proto_plan.Plan.operatorMemKB)
  return _internal_operatormemkb();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Plan::_internal_mutable_operatormemkb() {
  return &operatormemkb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Plan::mutable_operatormemkb() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.Plan.operatorMemKB)
  return _internal_mutable_operatormemkb();
}

// int32 operatorMaxMem = 34;
inline void Plan::clear_operatormaxmem() {
  operatormaxmem_ = 0;
}
inline int32_t Plan::_internal_operatormaxmem() const {
  return operatormaxmem_;
}
inline int32_t Plan::operatormaxmem() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.operatorMaxMem)
  return _internal_operatormaxmem();
}
inline void Plan::_internal_set_operatormaxmem(int32_t value) {
  
  operatormaxmem_ = value;
}
inline void Plan::set_operatormaxmem(int32_t value) {
  _internal_set_operatormaxmem(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.operatorMaxMem)
}

// bool parallel_enabled = 35;
inline void Plan::clear_parallel_enabled() {
  parallel_enabled_ = false;
}
inline bool Plan::_internal_parallel_enabled() const {
  return parallel_enabled_;
}
inline bool Plan::parallel_enabled() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.parallel_enabled)
  return _internal_parallel_enabled();
}
inline void Plan::_internal_set_parallel_enabled(bool value) {
  
  parallel_enabled_ = value;
}
inline void Plan::set_parallel_enabled(bool value) {
  _internal_set_parallel_enabled(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.parallel_enabled)
}

// bool hasHashFilter = 36;
inline void Plan::clear_hashashfilter() {
  hashashfilter_ = false;
}
inline bool Plan::_internal_hashashfilter() const {
  return hashashfilter_;
}
inline bool Plan::hashashfilter() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.hasHashFilter)
  return _internal_hashashfilter();
}
inline void Plan::_internal_set_hashashfilter(bool value) {
  
  hashashfilter_ = value;
}
inline void Plan::set_hashashfilter(bool value) {
  _internal_set_hashashfilter(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.hasHashFilter)
}

// .proto_plan.List var_list = 37;
inline bool Plan::_internal_has_var_list() const {
  return this != internal_default_instance() && var_list_ != nullptr;
}
inline bool Plan::has_var_list() const {
  return _internal_has_var_list();
}
inline const ::proto_plan::List& Plan::_internal_var_list() const {
  const ::proto_plan::List* p = var_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::var_list() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.var_list)
  return _internal_var_list();
}
inline void Plan::unsafe_arena_set_allocated_var_list(
    ::proto_plan::List* var_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_list_);
  }
  var_list_ = var_list;
  if (var_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.var_list)
}
inline ::proto_plan::List* Plan::release_var_list() {
  
  ::proto_plan::List* temp = var_list_;
  var_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_var_list() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.var_list)
  
  ::proto_plan::List* temp = var_list_;
  var_list_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_var_list() {
  
  if (var_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    var_list_ = p;
  }
  return var_list_;
}
inline ::proto_plan::List* Plan::mutable_var_list() {
  ::proto_plan::List* _msg = _internal_mutable_var_list();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.var_list)
  return _msg;
}
inline void Plan::set_allocated_var_list(::proto_plan::List* var_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_list_);
  }
  if (var_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_list));
    if (message_arena != submessage_arena) {
      var_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_list, submessage_arena);
    }
    
  } else {
    
  }
  var_list_ = var_list;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.var_list)
}

// .proto_plan.List filterIndexList = 38;
inline bool Plan::_internal_has_filterindexlist() const {
  return this != internal_default_instance() && filterindexlist_ != nullptr;
}
inline bool Plan::has_filterindexlist() const {
  return _internal_has_filterindexlist();
}
inline const ::proto_plan::List& Plan::_internal_filterindexlist() const {
  const ::proto_plan::List* p = filterindexlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::filterindexlist() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.filterIndexList)
  return _internal_filterindexlist();
}
inline void Plan::unsafe_arena_set_allocated_filterindexlist(
    ::proto_plan::List* filterindexlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filterindexlist_);
  }
  filterindexlist_ = filterindexlist;
  if (filterindexlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.filterIndexList)
}
inline ::proto_plan::List* Plan::release_filterindexlist() {
  
  ::proto_plan::List* temp = filterindexlist_;
  filterindexlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_filterindexlist() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.filterIndexList)
  
  ::proto_plan::List* temp = filterindexlist_;
  filterindexlist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_filterindexlist() {
  
  if (filterindexlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    filterindexlist_ = p;
  }
  return filterindexlist_;
}
inline ::proto_plan::List* Plan::mutable_filterindexlist() {
  ::proto_plan::List* _msg = _internal_mutable_filterindexlist();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.filterIndexList)
  return _msg;
}
inline void Plan::set_allocated_filterindexlist(::proto_plan::List* filterindexlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filterindexlist_);
  }
  if (filterindexlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filterindexlist));
    if (message_arena != submessage_arena) {
      filterindexlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filterindexlist, submessage_arena);
    }
    
  } else {
    
  }
  filterindexlist_ = filterindexlist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.filterIndexList)
}

// repeated int32 ng_operatorMemKBArray = 39;
inline int Plan::_internal_ng_operatormemkbarray_size() const {
  return ng_operatormemkbarray_.size();
}
inline int Plan::ng_operatormemkbarray_size() const {
  return _internal_ng_operatormemkbarray_size();
}
inline void Plan::clear_ng_operatormemkbarray() {
  ng_operatormemkbarray_.Clear();
}
inline int32_t Plan::_internal_ng_operatormemkbarray(int index) const {
  return ng_operatormemkbarray_.Get(index);
}
inline int32_t Plan::ng_operatormemkbarray(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.ng_operatorMemKBArray)
  return _internal_ng_operatormemkbarray(index);
}
inline void Plan::set_ng_operatormemkbarray(int index, int32_t value) {
  ng_operatormemkbarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.ng_operatorMemKBArray)
}
inline void Plan::_internal_add_ng_operatormemkbarray(int32_t value) {
  ng_operatormemkbarray_.Add(value);
}
inline void Plan::add_ng_operatormemkbarray(int32_t value) {
  _internal_add_ng_operatormemkbarray(value);
  // @@protoc_insertion_point(field_add:proto_plan.Plan.ng_operatorMemKBArray)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Plan::_internal_ng_operatormemkbarray() const {
  return ng_operatormemkbarray_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Plan::ng_operatormemkbarray() const {
  // @@protoc_insertion_point(field_list:proto_plan.Plan.ng_operatorMemKBArray)
  return _internal_ng_operatormemkbarray();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Plan::_internal_mutable_ng_operatormemkbarray() {
  return &ng_operatormemkbarray_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Plan::mutable_ng_operatormemkbarray() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.Plan.ng_operatorMemKBArray)
  return _internal_mutable_ng_operatormemkbarray();
}

// int32 ng_num = 40;
inline void Plan::clear_ng_num() {
  ng_num_ = 0;
}
inline int32_t Plan::_internal_ng_num() const {
  return ng_num_;
}
inline int32_t Plan::ng_num() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.ng_num)
  return _internal_ng_num();
}
inline void Plan::_internal_set_ng_num(int32_t value) {
  
  ng_num_ = value;
}
inline void Plan::set_ng_num(int32_t value) {
  _internal_set_ng_num(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.ng_num)
}

// double innerdistinct = 41;
inline void Plan::clear_innerdistinct() {
  innerdistinct_ = 0;
}
inline double Plan::_internal_innerdistinct() const {
  return innerdistinct_;
}
inline double Plan::innerdistinct() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.innerdistinct)
  return _internal_innerdistinct();
}
inline void Plan::_internal_set_innerdistinct(double value) {
  
  innerdistinct_ = value;
}
inline void Plan::set_innerdistinct(double value) {
  _internal_set_innerdistinct(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.innerdistinct)
}

// double outerdistinct = 42;
inline void Plan::clear_outerdistinct() {
  outerdistinct_ = 0;
}
inline double Plan::_internal_outerdistinct() const {
  return outerdistinct_;
}
inline double Plan::outerdistinct() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.outerdistinct)
  return _internal_outerdistinct();
}
inline void Plan::_internal_set_outerdistinct(double value) {
  
  outerdistinct_ = value;
}
inline void Plan::set_outerdistinct(double value) {
  _internal_set_outerdistinct(value);
  // @@protoc_insertion_point(field_set:proto_plan.Plan.outerdistinct)
}

// .proto_plan.List flatList = 43;
inline bool Plan::_internal_has_flatlist() const {
  return this != internal_default_instance() && flatlist_ != nullptr;
}
inline bool Plan::has_flatlist() const {
  return _internal_has_flatlist();
}
inline const ::proto_plan::List& Plan::_internal_flatlist() const {
  const ::proto_plan::List* p = flatlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& Plan::flatlist() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.flatList)
  return _internal_flatlist();
}
inline void Plan::unsafe_arena_set_allocated_flatlist(
    ::proto_plan::List* flatlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flatlist_);
  }
  flatlist_ = flatlist;
  if (flatlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.flatList)
}
inline ::proto_plan::List* Plan::release_flatlist() {
  
  ::proto_plan::List* temp = flatlist_;
  flatlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* Plan::unsafe_arena_release_flatlist() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.flatList)
  
  ::proto_plan::List* temp = flatlist_;
  flatlist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* Plan::_internal_mutable_flatlist() {
  
  if (flatlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    flatlist_ = p;
  }
  return flatlist_;
}
inline ::proto_plan::List* Plan::mutable_flatlist() {
  ::proto_plan::List* _msg = _internal_mutable_flatlist();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.flatList)
  return _msg;
}
inline void Plan::set_allocated_flatlist(::proto_plan::List* flatlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flatlist_);
  }
  if (flatlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flatlist));
    if (message_arena != submessage_arena) {
      flatlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatlist, submessage_arena);
    }
    
  } else {
    
  }
  flatlist_ = flatlist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.flatList)
}

// .proto_plan.RightRefState rightRefState = 44;
inline bool Plan::_internal_has_rightrefstate() const {
  return this != internal_default_instance() && rightrefstate_ != nullptr;
}
inline bool Plan::has_rightrefstate() const {
  return _internal_has_rightrefstate();
}
inline void Plan::clear_rightrefstate() {
  if (GetArenaForAllocation() == nullptr && rightrefstate_ != nullptr) {
    delete rightrefstate_;
  }
  rightrefstate_ = nullptr;
}
inline const ::proto_plan::RightRefState& Plan::_internal_rightrefstate() const {
  const ::proto_plan::RightRefState* p = rightrefstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::RightRefState&>(
      ::proto_plan::_RightRefState_default_instance_);
}
inline const ::proto_plan::RightRefState& Plan::rightrefstate() const {
  // @@protoc_insertion_point(field_get:proto_plan.Plan.rightRefState)
  return _internal_rightrefstate();
}
inline void Plan::unsafe_arena_set_allocated_rightrefstate(
    ::proto_plan::RightRefState* rightrefstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightrefstate_);
  }
  rightrefstate_ = rightrefstate;
  if (rightrefstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Plan.rightRefState)
}
inline ::proto_plan::RightRefState* Plan::release_rightrefstate() {
  
  ::proto_plan::RightRefState* temp = rightrefstate_;
  rightrefstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::RightRefState* Plan::unsafe_arena_release_rightrefstate() {
  // @@protoc_insertion_point(field_release:proto_plan.Plan.rightRefState)
  
  ::proto_plan::RightRefState* temp = rightrefstate_;
  rightrefstate_ = nullptr;
  return temp;
}
inline ::proto_plan::RightRefState* Plan::_internal_mutable_rightrefstate() {
  
  if (rightrefstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::RightRefState>(GetArenaForAllocation());
    rightrefstate_ = p;
  }
  return rightrefstate_;
}
inline ::proto_plan::RightRefState* Plan::mutable_rightrefstate() {
  ::proto_plan::RightRefState* _msg = _internal_mutable_rightrefstate();
  // @@protoc_insertion_point(field_mutable:proto_plan.Plan.rightRefState)
  return _msg;
}
inline void Plan::set_allocated_rightrefstate(::proto_plan::RightRefState* rightrefstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rightrefstate_;
  }
  if (rightrefstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::RightRefState>::GetOwningArena(rightrefstate);
    if (message_arena != submessage_arena) {
      rightrefstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightrefstate, submessage_arena);
    }
    
  } else {
    
  }
  rightrefstate_ = rightrefstate;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Plan.rightRefState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_plan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_5fplan_2eproto
