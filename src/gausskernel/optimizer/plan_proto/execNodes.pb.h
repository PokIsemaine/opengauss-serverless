// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execNodes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_execNodes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_execNodes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enumtag.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_execNodes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_execNodes_2eproto;
namespace proto_plan {
class Bitmapset;
struct BitmapsetDefaultTypeInternal;
extern BitmapsetDefaultTypeInternal _Bitmapset_default_instance_;
class Const;
struct ConstDefaultTypeInternal;
extern ConstDefaultTypeInternal _Const_default_instance_;
class Cursor_Data;
struct Cursor_DataDefaultTypeInternal;
extern Cursor_DataDefaultTypeInternal _Cursor_Data_default_instance_;
class Distribution;
struct DistributionDefaultTypeInternal;
extern DistributionDefaultTypeInternal _Distribution_default_instance_;
class ExecBoundary;
struct ExecBoundaryDefaultTypeInternal;
extern ExecBoundaryDefaultTypeInternal _ExecBoundary_default_instance_;
class ExecNodes;
struct ExecNodesDefaultTypeInternal;
extern ExecNodesDefaultTypeInternal _ExecNodes_default_instance_;
class Expr;
struct ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class List;
struct ListDefaultTypeInternal;
extern ListDefaultTypeInternal _List_default_instance_;
class ListCell;
struct ListCellDefaultTypeInternal;
extern ListCellDefaultTypeInternal _ListCell_default_instance_;
class SliceBoundary;
struct SliceBoundaryDefaultTypeInternal;
extern SliceBoundaryDefaultTypeInternal _SliceBoundary_default_instance_;
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_plan::Bitmapset* Arena::CreateMaybeMessage<::proto_plan::Bitmapset>(Arena*);
template<> ::proto_plan::Const* Arena::CreateMaybeMessage<::proto_plan::Const>(Arena*);
template<> ::proto_plan::Cursor_Data* Arena::CreateMaybeMessage<::proto_plan::Cursor_Data>(Arena*);
template<> ::proto_plan::Distribution* Arena::CreateMaybeMessage<::proto_plan::Distribution>(Arena*);
template<> ::proto_plan::ExecBoundary* Arena::CreateMaybeMessage<::proto_plan::ExecBoundary>(Arena*);
template<> ::proto_plan::ExecNodes* Arena::CreateMaybeMessage<::proto_plan::ExecNodes>(Arena*);
template<> ::proto_plan::Expr* Arena::CreateMaybeMessage<::proto_plan::Expr>(Arena*);
template<> ::proto_plan::List* Arena::CreateMaybeMessage<::proto_plan::List>(Arena*);
template<> ::proto_plan::ListCell* Arena::CreateMaybeMessage<::proto_plan::ListCell>(Arena*);
template<> ::proto_plan::SliceBoundary* Arena::CreateMaybeMessage<::proto_plan::SliceBoundary>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_plan {

// ===================================================================

class Bitmapset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Bitmapset) */ {
 public:
  inline Bitmapset() : Bitmapset(nullptr) {}
  ~Bitmapset() override;
  explicit constexpr Bitmapset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bitmapset(const Bitmapset& from);
  Bitmapset(Bitmapset&& from) noexcept
    : Bitmapset() {
    *this = ::std::move(from);
  }

  inline Bitmapset& operator=(const Bitmapset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bitmapset& operator=(Bitmapset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bitmapset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bitmapset* internal_default_instance() {
    return reinterpret_cast<const Bitmapset*>(
               &_Bitmapset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bitmapset& a, Bitmapset& b) {
    a.Swap(&b);
  }
  inline void Swap(Bitmapset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bitmapset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bitmapset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bitmapset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bitmapset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bitmapset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bitmapset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Bitmapset";
  }
  protected:
  explicit Bitmapset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 2,
    kNwordsFieldNumber = 1,
  };
  // repeated uint32 words = 2;
  int words_size() const;
  private:
  int _internal_words_size() const;
  public:
  void clear_words();
  private:
  uint32_t _internal_words(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_words() const;
  void _internal_add_words(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_words();
  public:
  uint32_t words(int index) const;
  void set_words(int index, uint32_t value);
  void add_words(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      words() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_words();

  // int32 nwords = 1;
  void clear_nwords();
  int32_t nwords() const;
  void set_nwords(int32_t value);
  private:
  int32_t _internal_nwords() const;
  void _internal_set_nwords(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Bitmapset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > words_;
  mutable std::atomic<int> _words_cached_byte_size_;
  int32_t nwords_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class ListCell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.ListCell) */ {
 public:
  inline ListCell() : ListCell(nullptr) {}
  ~ListCell() override;
  explicit constexpr ListCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCell(const ListCell& from);
  ListCell(ListCell&& from) noexcept
    : ListCell() {
    *this = ::std::move(from);
  }

  inline ListCell& operator=(const ListCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCell& operator=(ListCell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCell& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPtrValue = 1,
    kIntValue = 2,
    kOidValue = 3,
    DATA_NOT_SET = 0,
  };

  static inline const ListCell* internal_default_instance() {
    return reinterpret_cast<const ListCell*>(
               &_ListCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListCell& a, ListCell& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.ListCell";
  }
  protected:
  explicit ListCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextFieldNumber = 4,
    kPtrValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kOidValueFieldNumber = 3,
  };
  // .proto_plan.ListCell next = 4;
  bool has_next() const;
  private:
  bool _internal_has_next() const;
  public:
  void clear_next();
  const ::proto_plan::ListCell& next() const;
  PROTOBUF_NODISCARD ::proto_plan::ListCell* release_next();
  ::proto_plan::ListCell* mutable_next();
  void set_allocated_next(::proto_plan::ListCell* next);
  private:
  const ::proto_plan::ListCell& _internal_next() const;
  ::proto_plan::ListCell* _internal_mutable_next();
  public:
  void unsafe_arena_set_allocated_next(
      ::proto_plan::ListCell* next);
  ::proto_plan::ListCell* unsafe_arena_release_next();

  // bytes ptr_value = 1;
  bool has_ptr_value() const;
  private:
  bool _internal_has_ptr_value() const;
  public:
  void clear_ptr_value();
  const std::string& ptr_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ptr_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ptr_value();
  PROTOBUF_NODISCARD std::string* release_ptr_value();
  void set_allocated_ptr_value(std::string* ptr_value);
  private:
  const std::string& _internal_ptr_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ptr_value(const std::string& value);
  std::string* _internal_mutable_ptr_value();
  public:

  // int32 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int32_t int_value() const;
  void set_int_value(int32_t value);
  private:
  int32_t _internal_int_value() const;
  void _internal_set_int_value(int32_t value);
  public:

  // uint32 oid_value = 3;
  bool has_oid_value() const;
  private:
  bool _internal_has_oid_value() const;
  public:
  void clear_oid_value();
  uint32_t oid_value() const;
  void set_oid_value(uint32_t value);
  private:
  uint32_t _internal_oid_value() const;
  void _internal_set_oid_value(uint32_t value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:proto_plan.ListCell)
 private:
  class _Internal;
  void set_has_ptr_value();
  void set_has_int_value();
  void set_has_oid_value();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_plan::ListCell* next_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ptr_value_;
    int32_t int_value_;
    uint32_t oid_value_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class List final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.List) */ {
 public:
  inline List() : List(nullptr) {}
  ~List() override;
  explicit constexpr List(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  List(const List& from);
  List(List&& from) noexcept
    : List() {
    *this = ::std::move(from);
  }

  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }
  inline List& operator=(List&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const List& default_instance() {
    return *internal_default_instance();
  }
  static inline const List* internal_default_instance() {
    return reinterpret_cast<const List*>(
               &_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(List& a, List& b) {
    a.Swap(&b);
  }
  inline void Swap(List* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<List>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const List& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const List& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(List* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.List";
  }
  protected:
  explicit List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 3,
    kTailFieldNumber = 4,
    kTypeFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // .proto_plan.ListCell head = 3;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::proto_plan::ListCell& head() const;
  PROTOBUF_NODISCARD ::proto_plan::ListCell* release_head();
  ::proto_plan::ListCell* mutable_head();
  void set_allocated_head(::proto_plan::ListCell* head);
  private:
  const ::proto_plan::ListCell& _internal_head() const;
  ::proto_plan::ListCell* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::proto_plan::ListCell* head);
  ::proto_plan::ListCell* unsafe_arena_release_head();

  // .proto_plan.ListCell tail = 4;
  bool has_tail() const;
  private:
  bool _internal_has_tail() const;
  public:
  void clear_tail();
  const ::proto_plan::ListCell& tail() const;
  PROTOBUF_NODISCARD ::proto_plan::ListCell* release_tail();
  ::proto_plan::ListCell* mutable_tail();
  void set_allocated_tail(::proto_plan::ListCell* tail);
  private:
  const ::proto_plan::ListCell& _internal_tail() const;
  ::proto_plan::ListCell* _internal_mutable_tail();
  public:
  void unsafe_arena_set_allocated_tail(
      ::proto_plan::ListCell* tail);
  ::proto_plan::ListCell* unsafe_arena_release_tail();

  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_plan::ListCell* head_;
  ::proto_plan::ListCell* tail_;
  int type_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class Distribution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Distribution) */ {
 public:
  inline Distribution() : Distribution(nullptr) {}
  ~Distribution() override;
  explicit constexpr Distribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distribution(const Distribution& from);
  Distribution(Distribution&& from) noexcept
    : Distribution() {
    *this = ::std::move(from);
  }

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distribution& operator=(Distribution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distribution* internal_default_instance() {
    return reinterpret_cast<const Distribution*>(
               &_Distribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Distribution& a, Distribution& b) {
    a.Swap(&b);
  }
  inline void Swap(Distribution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distribution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distribution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Distribution& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distribution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Distribution";
  }
  protected:
  explicit Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBmsDataNodeidsFieldNumber = 2,
    kGroupOidFieldNumber = 1,
  };
  // .proto_plan.Bitmapset bms_data_nodeids = 2;
  bool has_bms_data_nodeids() const;
  private:
  bool _internal_has_bms_data_nodeids() const;
  public:
  void clear_bms_data_nodeids();
  const ::proto_plan::Bitmapset& bms_data_nodeids() const;
  PROTOBUF_NODISCARD ::proto_plan::Bitmapset* release_bms_data_nodeids();
  ::proto_plan::Bitmapset* mutable_bms_data_nodeids();
  void set_allocated_bms_data_nodeids(::proto_plan::Bitmapset* bms_data_nodeids);
  private:
  const ::proto_plan::Bitmapset& _internal_bms_data_nodeids() const;
  ::proto_plan::Bitmapset* _internal_mutable_bms_data_nodeids();
  public:
  void unsafe_arena_set_allocated_bms_data_nodeids(
      ::proto_plan::Bitmapset* bms_data_nodeids);
  ::proto_plan::Bitmapset* unsafe_arena_release_bms_data_nodeids();

  // uint32 group_oid = 1;
  void clear_group_oid();
  uint32_t group_oid() const;
  void set_group_oid(uint32_t value);
  private:
  uint32_t _internal_group_oid() const;
  void _internal_set_group_oid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Distribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_plan::Bitmapset* bms_data_nodeids_;
  uint32_t group_oid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class Expr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Expr) */ {
 public:
  inline Expr() : Expr(nullptr) {}
  ~Expr() override;
  explicit constexpr Expr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr(const Expr& from);
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Expr";
  }
  protected:
  explicit Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelecFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // double selec = 2;
  void clear_selec();
  double selec() const;
  void set_selec(double value);
  private:
  double _internal_selec() const;
  void _internal_set_selec(double value);
  public:

  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Expr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double selec_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class Cursor_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Cursor_Data) */ {
 public:
  inline Cursor_Data() : Cursor_Data(nullptr) {}
  ~Cursor_Data() override;
  explicit constexpr Cursor_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cursor_Data(const Cursor_Data& from);
  Cursor_Data(Cursor_Data&& from) noexcept
    : Cursor_Data() {
    *this = ::std::move(from);
  }

  inline Cursor_Data& operator=(const Cursor_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cursor_Data& operator=(Cursor_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cursor_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cursor_Data* internal_default_instance() {
    return reinterpret_cast<const Cursor_Data*>(
               &_Cursor_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Cursor_Data& a, Cursor_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Cursor_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cursor_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cursor_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cursor_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cursor_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cursor_Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cursor_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Cursor_Data";
  }
  protected:
  explicit Cursor_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowCountFieldNumber = 1,
    kCurDnoFieldNumber = 2,
    kIsOpenFieldNumber = 3,
    kFoundFieldNumber = 4,
    kNotFoundFieldNumber = 5,
    kNullOpenFieldNumber = 6,
    kNullFetchFieldNumber = 7,
  };
  // int32 row_count = 1;
  void clear_row_count();
  int32_t row_count() const;
  void set_row_count(int32_t value);
  private:
  int32_t _internal_row_count() const;
  void _internal_set_row_count(int32_t value);
  public:

  // int32 cur_dno = 2;
  void clear_cur_dno();
  int32_t cur_dno() const;
  void set_cur_dno(int32_t value);
  private:
  int32_t _internal_cur_dno() const;
  void _internal_set_cur_dno(int32_t value);
  public:

  // bool is_open = 3;
  void clear_is_open();
  bool is_open() const;
  void set_is_open(bool value);
  private:
  bool _internal_is_open() const;
  void _internal_set_is_open(bool value);
  public:

  // bool found = 4;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // bool not_found = 5;
  void clear_not_found();
  bool not_found() const;
  void set_not_found(bool value);
  private:
  bool _internal_not_found() const;
  void _internal_set_not_found(bool value);
  public:

  // bool null_open = 6;
  void clear_null_open();
  bool null_open() const;
  void set_null_open(bool value);
  private:
  bool _internal_null_open() const;
  void _internal_set_null_open(bool value);
  public:

  // bool null_fetch = 7;
  void clear_null_fetch();
  bool null_fetch() const;
  void set_null_fetch(bool value);
  private:
  bool _internal_null_fetch() const;
  void _internal_set_null_fetch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Cursor_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t row_count_;
  int32_t cur_dno_;
  bool is_open_;
  bool found_;
  bool not_found_;
  bool null_open_;
  bool null_fetch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class Const final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Const) */ {
 public:
  inline Const() : Const(nullptr) {}
  ~Const() override;
  explicit constexpr Const(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Const(const Const& from);
  Const(Const&& from) noexcept
    : Const() {
    *this = ::std::move(from);
  }

  inline Const& operator=(const Const& from) {
    CopyFrom(from);
    return *this;
  }
  inline Const& operator=(Const&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Const& default_instance() {
    return *internal_default_instance();
  }
  static inline const Const* internal_default_instance() {
    return reinterpret_cast<const Const*>(
               &_Const_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Const& a, Const& b) {
    a.Swap(&b);
  }
  inline void Swap(Const* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Const* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Const* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Const>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Const& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Const& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Const* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Const";
  }
  protected:
  explicit Const(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXprFieldNumber = 1,
    kCursorDataFieldNumber = 11,
    kConsttypeFieldNumber = 2,
    kConsttypmodFieldNumber = 3,
    kConstcollidFieldNumber = 4,
    kConstlenFieldNumber = 5,
    kConstvalueFieldNumber = 6,
    kConstisnullFieldNumber = 7,
    kConstbyvalFieldNumber = 8,
    kIsmaxvalueFieldNumber = 10,
    kLocationFieldNumber = 9,
  };
  // .proto_plan.Expr xpr = 1;
  bool has_xpr() const;
  private:
  bool _internal_has_xpr() const;
  public:
  void clear_xpr();
  const ::proto_plan::Expr& xpr() const;
  PROTOBUF_NODISCARD ::proto_plan::Expr* release_xpr();
  ::proto_plan::Expr* mutable_xpr();
  void set_allocated_xpr(::proto_plan::Expr* xpr);
  private:
  const ::proto_plan::Expr& _internal_xpr() const;
  ::proto_plan::Expr* _internal_mutable_xpr();
  public:
  void unsafe_arena_set_allocated_xpr(
      ::proto_plan::Expr* xpr);
  ::proto_plan::Expr* unsafe_arena_release_xpr();

  // .proto_plan.Cursor_Data cursor_data = 11;
  bool has_cursor_data() const;
  private:
  bool _internal_has_cursor_data() const;
  public:
  void clear_cursor_data();
  const ::proto_plan::Cursor_Data& cursor_data() const;
  PROTOBUF_NODISCARD ::proto_plan::Cursor_Data* release_cursor_data();
  ::proto_plan::Cursor_Data* mutable_cursor_data();
  void set_allocated_cursor_data(::proto_plan::Cursor_Data* cursor_data);
  private:
  const ::proto_plan::Cursor_Data& _internal_cursor_data() const;
  ::proto_plan::Cursor_Data* _internal_mutable_cursor_data();
  public:
  void unsafe_arena_set_allocated_cursor_data(
      ::proto_plan::Cursor_Data* cursor_data);
  ::proto_plan::Cursor_Data* unsafe_arena_release_cursor_data();

  // uint32 consttype = 2;
  void clear_consttype();
  uint32_t consttype() const;
  void set_consttype(uint32_t value);
  private:
  uint32_t _internal_consttype() const;
  void _internal_set_consttype(uint32_t value);
  public:

  // int32 consttypmod = 3;
  void clear_consttypmod();
  int32_t consttypmod() const;
  void set_consttypmod(int32_t value);
  private:
  int32_t _internal_consttypmod() const;
  void _internal_set_consttypmod(int32_t value);
  public:

  // uint32 constcollid = 4;
  void clear_constcollid();
  uint32_t constcollid() const;
  void set_constcollid(uint32_t value);
  private:
  uint32_t _internal_constcollid() const;
  void _internal_set_constcollid(uint32_t value);
  public:

  // int32 constlen = 5;
  void clear_constlen();
  int32_t constlen() const;
  void set_constlen(int32_t value);
  private:
  int32_t _internal_constlen() const;
  void _internal_set_constlen(int32_t value);
  public:

  // uint64 constvalue = 6;
  void clear_constvalue();
  uint64_t constvalue() const;
  void set_constvalue(uint64_t value);
  private:
  uint64_t _internal_constvalue() const;
  void _internal_set_constvalue(uint64_t value);
  public:

  // bool constisnull = 7;
  void clear_constisnull();
  bool constisnull() const;
  void set_constisnull(bool value);
  private:
  bool _internal_constisnull() const;
  void _internal_set_constisnull(bool value);
  public:

  // bool constbyval = 8;
  void clear_constbyval();
  bool constbyval() const;
  void set_constbyval(bool value);
  private:
  bool _internal_constbyval() const;
  void _internal_set_constbyval(bool value);
  public:

  // bool ismaxvalue = 10;
  void clear_ismaxvalue();
  bool ismaxvalue() const;
  void set_ismaxvalue(bool value);
  private:
  bool _internal_ismaxvalue() const;
  void _internal_set_ismaxvalue(bool value);
  public:

  // int32 location = 9;
  void clear_location();
  int32_t location() const;
  void set_location(int32_t value);
  private:
  int32_t _internal_location() const;
  void _internal_set_location(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Const)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_plan::Expr* xpr_;
  ::proto_plan::Cursor_Data* cursor_data_;
  uint32_t consttype_;
  int32_t consttypmod_;
  uint32_t constcollid_;
  int32_t constlen_;
  uint64_t constvalue_;
  bool constisnull_;
  bool constbyval_;
  bool ismaxvalue_;
  int32_t location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class SliceBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.SliceBoundary) */ {
 public:
  inline SliceBoundary() : SliceBoundary(nullptr) {}
  ~SliceBoundary() override;
  explicit constexpr SliceBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SliceBoundary(const SliceBoundary& from);
  SliceBoundary(SliceBoundary&& from) noexcept
    : SliceBoundary() {
    *this = ::std::move(from);
  }

  inline SliceBoundary& operator=(const SliceBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceBoundary& operator=(SliceBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SliceBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const SliceBoundary* internal_default_instance() {
    return reinterpret_cast<const SliceBoundary*>(
               &_SliceBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SliceBoundary& a, SliceBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SliceBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SliceBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SliceBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SliceBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.SliceBoundary";
  }
  protected:
  explicit SliceBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundaryFieldNumber = 4,
    kTypeFieldNumber = 1,
    kNodeIdxFieldNumber = 2,
    kLenFieldNumber = 3,
  };
  // repeated .proto_plan.Const boundary = 4;
  int boundary_size() const;
  private:
  int _internal_boundary_size() const;
  public:
  void clear_boundary();
  ::proto_plan::Const* mutable_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >*
      mutable_boundary();
  private:
  const ::proto_plan::Const& _internal_boundary(int index) const;
  ::proto_plan::Const* _internal_add_boundary();
  public:
  const ::proto_plan::Const& boundary(int index) const;
  ::proto_plan::Const* add_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >&
      boundary() const;

  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // int32 nodeIdx = 2;
  void clear_nodeidx();
  int32_t nodeidx() const;
  void set_nodeidx(int32_t value);
  private:
  int32_t _internal_nodeidx() const;
  void _internal_set_nodeidx(int32_t value);
  public:

  // int32 len = 3;
  void clear_len();
  int32_t len() const;
  void set_len(int32_t value);
  private:
  int32_t _internal_len() const;
  void _internal_set_len(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.SliceBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const > boundary_;
  int type_;
  int32_t nodeidx_;
  int32_t len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class ExecBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.ExecBoundary) */ {
 public:
  inline ExecBoundary() : ExecBoundary(nullptr) {}
  ~ExecBoundary() override;
  explicit constexpr ExecBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecBoundary(const ExecBoundary& from);
  ExecBoundary(ExecBoundary&& from) noexcept
    : ExecBoundary() {
    *this = ::std::move(from);
  }

  inline ExecBoundary& operator=(const ExecBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecBoundary& operator=(ExecBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecBoundary* internal_default_instance() {
    return reinterpret_cast<const ExecBoundary*>(
               &_ExecBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExecBoundary& a, ExecBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.ExecBoundary";
  }
  protected:
  explicit ExecBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElesFieldNumber = 4,
    kLocatorTypeFieldNumber = 2,
    kTypeFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // repeated .proto_plan.SliceBoundary eles = 4;
  int eles_size() const;
  private:
  int _internal_eles_size() const;
  public:
  void clear_eles();
  ::proto_plan::SliceBoundary* mutable_eles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::SliceBoundary >*
      mutable_eles();
  private:
  const ::proto_plan::SliceBoundary& _internal_eles(int index) const;
  ::proto_plan::SliceBoundary* _internal_add_eles();
  public:
  const ::proto_plan::SliceBoundary& eles(int index) const;
  ::proto_plan::SliceBoundary* add_eles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::SliceBoundary >&
      eles() const;

  // string locatorType = 2;
  void clear_locatortype();
  const std::string& locatortype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locatortype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locatortype();
  PROTOBUF_NODISCARD std::string* release_locatortype();
  void set_allocated_locatortype(std::string* locatortype);
  private:
  const std::string& _internal_locatortype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locatortype(const std::string& value);
  std::string* _internal_mutable_locatortype();
  public:

  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // int32 count = 3;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.ExecBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::SliceBoundary > eles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locatortype_;
  int type_;
  int32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// -------------------------------------------------------------------

class ExecNodes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.ExecNodes) */ {
 public:
  inline ExecNodes() : ExecNodes(nullptr) {}
  ~ExecNodes() override;
  explicit constexpr ExecNodes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecNodes(const ExecNodes& from);
  ExecNodes(ExecNodes&& from) noexcept
    : ExecNodes() {
    *this = ::std::move(from);
  }

  inline ExecNodes& operator=(const ExecNodes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecNodes& operator=(ExecNodes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecNodes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecNodes* internal_default_instance() {
    return reinterpret_cast<const ExecNodes*>(
               &_ExecNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExecNodes& a, ExecNodes& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecNodes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecNodes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecNodes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecNodes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecNodes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecNodes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecNodes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.ExecNodes";
  }
  protected:
  explicit ExecNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaselocatortypeFieldNumber = 5,
    kPrimarynodelistFieldNumber = 2,
    kNodeListFieldNumber = 3,
    kDistributionFieldNumber = 4,
    kEnExprFieldNumber = 6,
    kBoundariesFieldNumber = 11,
    kEnDistVarsFieldNumber = 13,
    kOriginalNodeListFieldNumber = 16,
    kDynamicEnExprFieldNumber = 17,
    kBucketexprFieldNumber = 19,
    kHotkeysFieldNumber = 21,
    kTypeFieldNumber = 1,
    kEnRelidFieldNumber = 7,
    kRangelistOidFieldNumber = 8,
    kEnVarnoFieldNumber = 10,
    kAccesstypeFieldNumber = 12,
    kNeedRangePruneFieldNumber = 9,
    kNodelistIsNilFieldNumber = 15,
    kBucketmapIdxFieldNumber = 14,
    kBucketidFieldNumber = 18,
    kBucketrelidFieldNumber = 20,
  };
  // string baselocatortype = 5;
  void clear_baselocatortype();
  const std::string& baselocatortype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_baselocatortype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_baselocatortype();
  PROTOBUF_NODISCARD std::string* release_baselocatortype();
  void set_allocated_baselocatortype(std::string* baselocatortype);
  private:
  const std::string& _internal_baselocatortype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_baselocatortype(const std::string& value);
  std::string* _internal_mutable_baselocatortype();
  public:

  // .proto_plan.List primarynodelist = 2;
  bool has_primarynodelist() const;
  private:
  bool _internal_has_primarynodelist() const;
  public:
  void clear_primarynodelist();
  const ::proto_plan::List& primarynodelist() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_primarynodelist();
  ::proto_plan::List* mutable_primarynodelist();
  void set_allocated_primarynodelist(::proto_plan::List* primarynodelist);
  private:
  const ::proto_plan::List& _internal_primarynodelist() const;
  ::proto_plan::List* _internal_mutable_primarynodelist();
  public:
  void unsafe_arena_set_allocated_primarynodelist(
      ::proto_plan::List* primarynodelist);
  ::proto_plan::List* unsafe_arena_release_primarynodelist();

  // .proto_plan.List nodeList = 3;
  bool has_nodelist() const;
  private:
  bool _internal_has_nodelist() const;
  public:
  void clear_nodelist();
  const ::proto_plan::List& nodelist() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_nodelist();
  ::proto_plan::List* mutable_nodelist();
  void set_allocated_nodelist(::proto_plan::List* nodelist);
  private:
  const ::proto_plan::List& _internal_nodelist() const;
  ::proto_plan::List* _internal_mutable_nodelist();
  public:
  void unsafe_arena_set_allocated_nodelist(
      ::proto_plan::List* nodelist);
  ::proto_plan::List* unsafe_arena_release_nodelist();

  // .proto_plan.Distribution distribution = 4;
  bool has_distribution() const;
  private:
  bool _internal_has_distribution() const;
  public:
  void clear_distribution();
  const ::proto_plan::Distribution& distribution() const;
  PROTOBUF_NODISCARD ::proto_plan::Distribution* release_distribution();
  ::proto_plan::Distribution* mutable_distribution();
  void set_allocated_distribution(::proto_plan::Distribution* distribution);
  private:
  const ::proto_plan::Distribution& _internal_distribution() const;
  ::proto_plan::Distribution* _internal_mutable_distribution();
  public:
  void unsafe_arena_set_allocated_distribution(
      ::proto_plan::Distribution* distribution);
  ::proto_plan::Distribution* unsafe_arena_release_distribution();

  // .proto_plan.List en_expr = 6;
  bool has_en_expr() const;
  private:
  bool _internal_has_en_expr() const;
  public:
  void clear_en_expr();
  const ::proto_plan::List& en_expr() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_en_expr();
  ::proto_plan::List* mutable_en_expr();
  void set_allocated_en_expr(::proto_plan::List* en_expr);
  private:
  const ::proto_plan::List& _internal_en_expr() const;
  ::proto_plan::List* _internal_mutable_en_expr();
  public:
  void unsafe_arena_set_allocated_en_expr(
      ::proto_plan::List* en_expr);
  ::proto_plan::List* unsafe_arena_release_en_expr();

  // .proto_plan.ExecBoundary boundaries = 11;
  bool has_boundaries() const;
  private:
  bool _internal_has_boundaries() const;
  public:
  void clear_boundaries();
  const ::proto_plan::ExecBoundary& boundaries() const;
  PROTOBUF_NODISCARD ::proto_plan::ExecBoundary* release_boundaries();
  ::proto_plan::ExecBoundary* mutable_boundaries();
  void set_allocated_boundaries(::proto_plan::ExecBoundary* boundaries);
  private:
  const ::proto_plan::ExecBoundary& _internal_boundaries() const;
  ::proto_plan::ExecBoundary* _internal_mutable_boundaries();
  public:
  void unsafe_arena_set_allocated_boundaries(
      ::proto_plan::ExecBoundary* boundaries);
  ::proto_plan::ExecBoundary* unsafe_arena_release_boundaries();

  // .proto_plan.List en_dist_vars = 13;
  bool has_en_dist_vars() const;
  private:
  bool _internal_has_en_dist_vars() const;
  public:
  void clear_en_dist_vars();
  const ::proto_plan::List& en_dist_vars() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_en_dist_vars();
  ::proto_plan::List* mutable_en_dist_vars();
  void set_allocated_en_dist_vars(::proto_plan::List* en_dist_vars);
  private:
  const ::proto_plan::List& _internal_en_dist_vars() const;
  ::proto_plan::List* _internal_mutable_en_dist_vars();
  public:
  void unsafe_arena_set_allocated_en_dist_vars(
      ::proto_plan::List* en_dist_vars);
  ::proto_plan::List* unsafe_arena_release_en_dist_vars();

  // .proto_plan.List original_nodeList = 16;
  bool has_original_nodelist() const;
  private:
  bool _internal_has_original_nodelist() const;
  public:
  void clear_original_nodelist();
  const ::proto_plan::List& original_nodelist() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_original_nodelist();
  ::proto_plan::List* mutable_original_nodelist();
  void set_allocated_original_nodelist(::proto_plan::List* original_nodelist);
  private:
  const ::proto_plan::List& _internal_original_nodelist() const;
  ::proto_plan::List* _internal_mutable_original_nodelist();
  public:
  void unsafe_arena_set_allocated_original_nodelist(
      ::proto_plan::List* original_nodelist);
  ::proto_plan::List* unsafe_arena_release_original_nodelist();

  // .proto_plan.List dynamic_en_expr = 17;
  bool has_dynamic_en_expr() const;
  private:
  bool _internal_has_dynamic_en_expr() const;
  public:
  void clear_dynamic_en_expr();
  const ::proto_plan::List& dynamic_en_expr() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_dynamic_en_expr();
  ::proto_plan::List* mutable_dynamic_en_expr();
  void set_allocated_dynamic_en_expr(::proto_plan::List* dynamic_en_expr);
  private:
  const ::proto_plan::List& _internal_dynamic_en_expr() const;
  ::proto_plan::List* _internal_mutable_dynamic_en_expr();
  public:
  void unsafe_arena_set_allocated_dynamic_en_expr(
      ::proto_plan::List* dynamic_en_expr);
  ::proto_plan::List* unsafe_arena_release_dynamic_en_expr();

  // .proto_plan.List bucketexpr = 19;
  bool has_bucketexpr() const;
  private:
  bool _internal_has_bucketexpr() const;
  public:
  void clear_bucketexpr();
  const ::proto_plan::List& bucketexpr() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_bucketexpr();
  ::proto_plan::List* mutable_bucketexpr();
  void set_allocated_bucketexpr(::proto_plan::List* bucketexpr);
  private:
  const ::proto_plan::List& _internal_bucketexpr() const;
  ::proto_plan::List* _internal_mutable_bucketexpr();
  public:
  void unsafe_arena_set_allocated_bucketexpr(
      ::proto_plan::List* bucketexpr);
  ::proto_plan::List* unsafe_arena_release_bucketexpr();

  // .proto_plan.List hotkeys = 21;
  bool has_hotkeys() const;
  private:
  bool _internal_has_hotkeys() const;
  public:
  void clear_hotkeys();
  const ::proto_plan::List& hotkeys() const;
  PROTOBUF_NODISCARD ::proto_plan::List* release_hotkeys();
  ::proto_plan::List* mutable_hotkeys();
  void set_allocated_hotkeys(::proto_plan::List* hotkeys);
  private:
  const ::proto_plan::List& _internal_hotkeys() const;
  ::proto_plan::List* _internal_mutable_hotkeys();
  public:
  void unsafe_arena_set_allocated_hotkeys(
      ::proto_plan::List* hotkeys);
  ::proto_plan::List* unsafe_arena_release_hotkeys();

  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // uint32 en_relid = 7;
  void clear_en_relid();
  uint32_t en_relid() const;
  void set_en_relid(uint32_t value);
  private:
  uint32_t _internal_en_relid() const;
  void _internal_set_en_relid(uint32_t value);
  public:

  // uint32 rangelistOid = 8;
  void clear_rangelistoid();
  uint32_t rangelistoid() const;
  void set_rangelistoid(uint32_t value);
  private:
  uint32_t _internal_rangelistoid() const;
  void _internal_set_rangelistoid(uint32_t value);
  public:

  // int32 en_varno = 10;
  void clear_en_varno();
  int32_t en_varno() const;
  void set_en_varno(int32_t value);
  private:
  int32_t _internal_en_varno() const;
  void _internal_set_en_varno(int32_t value);
  public:

  // .proto_plan.RelationAccessType accesstype = 12;
  void clear_accesstype();
  ::proto_plan::RelationAccessType accesstype() const;
  void set_accesstype(::proto_plan::RelationAccessType value);
  private:
  ::proto_plan::RelationAccessType _internal_accesstype() const;
  void _internal_set_accesstype(::proto_plan::RelationAccessType value);
  public:

  // bool need_range_prune = 9;
  void clear_need_range_prune();
  bool need_range_prune() const;
  void set_need_range_prune(bool value);
  private:
  bool _internal_need_range_prune() const;
  void _internal_set_need_range_prune(bool value);
  public:

  // bool nodelist_is_nil = 15;
  void clear_nodelist_is_nil();
  bool nodelist_is_nil() const;
  void set_nodelist_is_nil(bool value);
  private:
  bool _internal_nodelist_is_nil() const;
  void _internal_set_nodelist_is_nil(bool value);
  public:

  // int32 bucketmapIdx = 14;
  void clear_bucketmapidx();
  int32_t bucketmapidx() const;
  void set_bucketmapidx(int32_t value);
  private:
  int32_t _internal_bucketmapidx() const;
  void _internal_set_bucketmapidx(int32_t value);
  public:

  // int32 bucketid = 18;
  void clear_bucketid();
  int32_t bucketid() const;
  void set_bucketid(int32_t value);
  private:
  int32_t _internal_bucketid() const;
  void _internal_set_bucketid(int32_t value);
  public:

  // uint32 bucketrelid = 20;
  void clear_bucketrelid();
  uint32_t bucketrelid() const;
  void set_bucketrelid(uint32_t value);
  private:
  uint32_t _internal_bucketrelid() const;
  void _internal_set_bucketrelid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.ExecNodes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baselocatortype_;
  ::proto_plan::List* primarynodelist_;
  ::proto_plan::List* nodelist_;
  ::proto_plan::Distribution* distribution_;
  ::proto_plan::List* en_expr_;
  ::proto_plan::ExecBoundary* boundaries_;
  ::proto_plan::List* en_dist_vars_;
  ::proto_plan::List* original_nodelist_;
  ::proto_plan::List* dynamic_en_expr_;
  ::proto_plan::List* bucketexpr_;
  ::proto_plan::List* hotkeys_;
  int type_;
  uint32_t en_relid_;
  uint32_t rangelistoid_;
  int32_t en_varno_;
  int accesstype_;
  bool need_range_prune_;
  bool nodelist_is_nil_;
  int32_t bucketmapidx_;
  int32_t bucketid_;
  uint32_t bucketrelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execNodes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bitmapset

// int32 nwords = 1;
inline void Bitmapset::clear_nwords() {
  nwords_ = 0;
}
inline int32_t Bitmapset::_internal_nwords() const {
  return nwords_;
}
inline int32_t Bitmapset::nwords() const {
  // @@protoc_insertion_point(field_get:proto_plan.Bitmapset.nwords)
  return _internal_nwords();
}
inline void Bitmapset::_internal_set_nwords(int32_t value) {
  
  nwords_ = value;
}
inline void Bitmapset::set_nwords(int32_t value) {
  _internal_set_nwords(value);
  // @@protoc_insertion_point(field_set:proto_plan.Bitmapset.nwords)
}

// repeated uint32 words = 2;
inline int Bitmapset::_internal_words_size() const {
  return words_.size();
}
inline int Bitmapset::words_size() const {
  return _internal_words_size();
}
inline void Bitmapset::clear_words() {
  words_.Clear();
}
inline uint32_t Bitmapset::_internal_words(int index) const {
  return words_.Get(index);
}
inline uint32_t Bitmapset::words(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.Bitmapset.words)
  return _internal_words(index);
}
inline void Bitmapset::set_words(int index, uint32_t value) {
  words_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.Bitmapset.words)
}
inline void Bitmapset::_internal_add_words(uint32_t value) {
  words_.Add(value);
}
inline void Bitmapset::add_words(uint32_t value) {
  _internal_add_words(value);
  // @@protoc_insertion_point(field_add:proto_plan.Bitmapset.words)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bitmapset::_internal_words() const {
  return words_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bitmapset::words() const {
  // @@protoc_insertion_point(field_list:proto_plan.Bitmapset.words)
  return _internal_words();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bitmapset::_internal_mutable_words() {
  return &words_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bitmapset::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.Bitmapset.words)
  return _internal_mutable_words();
}

// -------------------------------------------------------------------

// ListCell

// bytes ptr_value = 1;
inline bool ListCell::_internal_has_ptr_value() const {
  return data_case() == kPtrValue;
}
inline bool ListCell::has_ptr_value() const {
  return _internal_has_ptr_value();
}
inline void ListCell::set_has_ptr_value() {
  _oneof_case_[0] = kPtrValue;
}
inline void ListCell::clear_ptr_value() {
  if (_internal_has_ptr_value()) {
    data_.ptr_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& ListCell::ptr_value() const {
  // @@protoc_insertion_point(field_get:proto_plan.ListCell.ptr_value)
  return _internal_ptr_value();
}
template <typename ArgT0, typename... ArgT>
inline void ListCell::set_ptr_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ptr_value()) {
    clear_data();
    set_has_ptr_value();
    data_.ptr_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.ptr_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_plan.ListCell.ptr_value)
}
inline std::string* ListCell::mutable_ptr_value() {
  std::string* _s = _internal_mutable_ptr_value();
  // @@protoc_insertion_point(field_mutable:proto_plan.ListCell.ptr_value)
  return _s;
}
inline const std::string& ListCell::_internal_ptr_value() const {
  if (_internal_has_ptr_value()) {
    return data_.ptr_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ListCell::_internal_set_ptr_value(const std::string& value) {
  if (!_internal_has_ptr_value()) {
    clear_data();
    set_has_ptr_value();
    data_.ptr_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.ptr_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListCell::_internal_mutable_ptr_value() {
  if (!_internal_has_ptr_value()) {
    clear_data();
    set_has_ptr_value();
    data_.ptr_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.ptr_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListCell::release_ptr_value() {
  // @@protoc_insertion_point(field_release:proto_plan.ListCell.ptr_value)
  if (_internal_has_ptr_value()) {
    clear_has_data();
    return data_.ptr_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ListCell::set_allocated_ptr_value(std::string* ptr_value) {
  if (has_data()) {
    clear_data();
  }
  if (ptr_value != nullptr) {
    set_has_ptr_value();
    data_.ptr_value_.UnsafeSetDefault(ptr_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ptr_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ListCell.ptr_value)
}

// int32 int_value = 2;
inline bool ListCell::_internal_has_int_value() const {
  return data_case() == kIntValue;
}
inline bool ListCell::has_int_value() const {
  return _internal_has_int_value();
}
inline void ListCell::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ListCell::clear_int_value() {
  if (_internal_has_int_value()) {
    data_.int_value_ = 0;
    clear_has_data();
  }
}
inline int32_t ListCell::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return data_.int_value_;
  }
  return 0;
}
inline void ListCell::_internal_set_int_value(int32_t value) {
  if (!_internal_has_int_value()) {
    clear_data();
    set_has_int_value();
  }
  data_.int_value_ = value;
}
inline int32_t ListCell::int_value() const {
  // @@protoc_insertion_point(field_get:proto_plan.ListCell.int_value)
  return _internal_int_value();
}
inline void ListCell::set_int_value(int32_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:proto_plan.ListCell.int_value)
}

// uint32 oid_value = 3;
inline bool ListCell::_internal_has_oid_value() const {
  return data_case() == kOidValue;
}
inline bool ListCell::has_oid_value() const {
  return _internal_has_oid_value();
}
inline void ListCell::set_has_oid_value() {
  _oneof_case_[0] = kOidValue;
}
inline void ListCell::clear_oid_value() {
  if (_internal_has_oid_value()) {
    data_.oid_value_ = 0u;
    clear_has_data();
  }
}
inline uint32_t ListCell::_internal_oid_value() const {
  if (_internal_has_oid_value()) {
    return data_.oid_value_;
  }
  return 0u;
}
inline void ListCell::_internal_set_oid_value(uint32_t value) {
  if (!_internal_has_oid_value()) {
    clear_data();
    set_has_oid_value();
  }
  data_.oid_value_ = value;
}
inline uint32_t ListCell::oid_value() const {
  // @@protoc_insertion_point(field_get:proto_plan.ListCell.oid_value)
  return _internal_oid_value();
}
inline void ListCell::set_oid_value(uint32_t value) {
  _internal_set_oid_value(value);
  // @@protoc_insertion_point(field_set:proto_plan.ListCell.oid_value)
}

// .proto_plan.ListCell next = 4;
inline bool ListCell::_internal_has_next() const {
  return this != internal_default_instance() && next_ != nullptr;
}
inline bool ListCell::has_next() const {
  return _internal_has_next();
}
inline void ListCell::clear_next() {
  if (GetArenaForAllocation() == nullptr && next_ != nullptr) {
    delete next_;
  }
  next_ = nullptr;
}
inline const ::proto_plan::ListCell& ListCell::_internal_next() const {
  const ::proto_plan::ListCell* p = next_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::ListCell&>(
      ::proto_plan::_ListCell_default_instance_);
}
inline const ::proto_plan::ListCell& ListCell::next() const {
  // @@protoc_insertion_point(field_get:proto_plan.ListCell.next)
  return _internal_next();
}
inline void ListCell::unsafe_arena_set_allocated_next(
    ::proto_plan::ListCell* next) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_);
  }
  next_ = next;
  if (next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ListCell.next)
}
inline ::proto_plan::ListCell* ListCell::release_next() {
  
  ::proto_plan::ListCell* temp = next_;
  next_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::ListCell* ListCell::unsafe_arena_release_next() {
  // @@protoc_insertion_point(field_release:proto_plan.ListCell.next)
  
  ::proto_plan::ListCell* temp = next_;
  next_ = nullptr;
  return temp;
}
inline ::proto_plan::ListCell* ListCell::_internal_mutable_next() {
  
  if (next_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::ListCell>(GetArenaForAllocation());
    next_ = p;
  }
  return next_;
}
inline ::proto_plan::ListCell* ListCell::mutable_next() {
  ::proto_plan::ListCell* _msg = _internal_mutable_next();
  // @@protoc_insertion_point(field_mutable:proto_plan.ListCell.next)
  return _msg;
}
inline void ListCell::set_allocated_next(::proto_plan::ListCell* next) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete next_;
  }
  if (next) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::ListCell>::GetOwningArena(next);
    if (message_arena != submessage_arena) {
      next = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next, submessage_arena);
    }
    
  } else {
    
  }
  next_ = next;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ListCell.next)
}

inline bool ListCell::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ListCell::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline ListCell::DataCase ListCell::data_case() const {
  return ListCell::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// List

// .proto_plan.NodeTag type = 1;
inline void List::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag List::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag List::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.List.type)
  return _internal_type();
}
inline void List::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void List::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.List.type)
}

// int32 length = 2;
inline void List::clear_length() {
  length_ = 0;
}
inline int32_t List::_internal_length() const {
  return length_;
}
inline int32_t List::length() const {
  // @@protoc_insertion_point(field_get:proto_plan.List.length)
  return _internal_length();
}
inline void List::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void List::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:proto_plan.List.length)
}

// .proto_plan.ListCell head = 3;
inline bool List::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool List::has_head() const {
  return _internal_has_head();
}
inline void List::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::proto_plan::ListCell& List::_internal_head() const {
  const ::proto_plan::ListCell* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::ListCell&>(
      ::proto_plan::_ListCell_default_instance_);
}
inline const ::proto_plan::ListCell& List::head() const {
  // @@protoc_insertion_point(field_get:proto_plan.List.head)
  return _internal_head();
}
inline void List::unsafe_arena_set_allocated_head(
    ::proto_plan::ListCell* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.List.head)
}
inline ::proto_plan::ListCell* List::release_head() {
  
  ::proto_plan::ListCell* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::ListCell* List::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:proto_plan.List.head)
  
  ::proto_plan::ListCell* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::proto_plan::ListCell* List::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::ListCell>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::proto_plan::ListCell* List::mutable_head() {
  ::proto_plan::ListCell* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:proto_plan.List.head)
  return _msg;
}
inline void List::set_allocated_head(::proto_plan::ListCell* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::ListCell>::GetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.List.head)
}

// .proto_plan.ListCell tail = 4;
inline bool List::_internal_has_tail() const {
  return this != internal_default_instance() && tail_ != nullptr;
}
inline bool List::has_tail() const {
  return _internal_has_tail();
}
inline void List::clear_tail() {
  if (GetArenaForAllocation() == nullptr && tail_ != nullptr) {
    delete tail_;
  }
  tail_ = nullptr;
}
inline const ::proto_plan::ListCell& List::_internal_tail() const {
  const ::proto_plan::ListCell* p = tail_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::ListCell&>(
      ::proto_plan::_ListCell_default_instance_);
}
inline const ::proto_plan::ListCell& List::tail() const {
  // @@protoc_insertion_point(field_get:proto_plan.List.tail)
  return _internal_tail();
}
inline void List::unsafe_arena_set_allocated_tail(
    ::proto_plan::ListCell* tail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tail_);
  }
  tail_ = tail;
  if (tail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.List.tail)
}
inline ::proto_plan::ListCell* List::release_tail() {
  
  ::proto_plan::ListCell* temp = tail_;
  tail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::ListCell* List::unsafe_arena_release_tail() {
  // @@protoc_insertion_point(field_release:proto_plan.List.tail)
  
  ::proto_plan::ListCell* temp = tail_;
  tail_ = nullptr;
  return temp;
}
inline ::proto_plan::ListCell* List::_internal_mutable_tail() {
  
  if (tail_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::ListCell>(GetArenaForAllocation());
    tail_ = p;
  }
  return tail_;
}
inline ::proto_plan::ListCell* List::mutable_tail() {
  ::proto_plan::ListCell* _msg = _internal_mutable_tail();
  // @@protoc_insertion_point(field_mutable:proto_plan.List.tail)
  return _msg;
}
inline void List::set_allocated_tail(::proto_plan::ListCell* tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tail_;
  }
  if (tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::ListCell>::GetOwningArena(tail);
    if (message_arena != submessage_arena) {
      tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tail, submessage_arena);
    }
    
  } else {
    
  }
  tail_ = tail;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.List.tail)
}

// -------------------------------------------------------------------

// Distribution

// uint32 group_oid = 1;
inline void Distribution::clear_group_oid() {
  group_oid_ = 0u;
}
inline uint32_t Distribution::_internal_group_oid() const {
  return group_oid_;
}
inline uint32_t Distribution::group_oid() const {
  // @@protoc_insertion_point(field_get:proto_plan.Distribution.group_oid)
  return _internal_group_oid();
}
inline void Distribution::_internal_set_group_oid(uint32_t value) {
  
  group_oid_ = value;
}
inline void Distribution::set_group_oid(uint32_t value) {
  _internal_set_group_oid(value);
  // @@protoc_insertion_point(field_set:proto_plan.Distribution.group_oid)
}

// .proto_plan.Bitmapset bms_data_nodeids = 2;
inline bool Distribution::_internal_has_bms_data_nodeids() const {
  return this != internal_default_instance() && bms_data_nodeids_ != nullptr;
}
inline bool Distribution::has_bms_data_nodeids() const {
  return _internal_has_bms_data_nodeids();
}
inline void Distribution::clear_bms_data_nodeids() {
  if (GetArenaForAllocation() == nullptr && bms_data_nodeids_ != nullptr) {
    delete bms_data_nodeids_;
  }
  bms_data_nodeids_ = nullptr;
}
inline const ::proto_plan::Bitmapset& Distribution::_internal_bms_data_nodeids() const {
  const ::proto_plan::Bitmapset* p = bms_data_nodeids_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Bitmapset&>(
      ::proto_plan::_Bitmapset_default_instance_);
}
inline const ::proto_plan::Bitmapset& Distribution::bms_data_nodeids() const {
  // @@protoc_insertion_point(field_get:proto_plan.Distribution.bms_data_nodeids)
  return _internal_bms_data_nodeids();
}
inline void Distribution::unsafe_arena_set_allocated_bms_data_nodeids(
    ::proto_plan::Bitmapset* bms_data_nodeids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bms_data_nodeids_);
  }
  bms_data_nodeids_ = bms_data_nodeids;
  if (bms_data_nodeids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Distribution.bms_data_nodeids)
}
inline ::proto_plan::Bitmapset* Distribution::release_bms_data_nodeids() {
  
  ::proto_plan::Bitmapset* temp = bms_data_nodeids_;
  bms_data_nodeids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Bitmapset* Distribution::unsafe_arena_release_bms_data_nodeids() {
  // @@protoc_insertion_point(field_release:proto_plan.Distribution.bms_data_nodeids)
  
  ::proto_plan::Bitmapset* temp = bms_data_nodeids_;
  bms_data_nodeids_ = nullptr;
  return temp;
}
inline ::proto_plan::Bitmapset* Distribution::_internal_mutable_bms_data_nodeids() {
  
  if (bms_data_nodeids_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Bitmapset>(GetArenaForAllocation());
    bms_data_nodeids_ = p;
  }
  return bms_data_nodeids_;
}
inline ::proto_plan::Bitmapset* Distribution::mutable_bms_data_nodeids() {
  ::proto_plan::Bitmapset* _msg = _internal_mutable_bms_data_nodeids();
  // @@protoc_insertion_point(field_mutable:proto_plan.Distribution.bms_data_nodeids)
  return _msg;
}
inline void Distribution::set_allocated_bms_data_nodeids(::proto_plan::Bitmapset* bms_data_nodeids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bms_data_nodeids_;
  }
  if (bms_data_nodeids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::Bitmapset>::GetOwningArena(bms_data_nodeids);
    if (message_arena != submessage_arena) {
      bms_data_nodeids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bms_data_nodeids, submessage_arena);
    }
    
  } else {
    
  }
  bms_data_nodeids_ = bms_data_nodeids;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Distribution.bms_data_nodeids)
}

// -------------------------------------------------------------------

// Expr

// .proto_plan.NodeTag type = 1;
inline void Expr::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag Expr::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag Expr::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.Expr.type)
  return _internal_type();
}
inline void Expr::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void Expr::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.Expr.type)
}

// double selec = 2;
inline void Expr::clear_selec() {
  selec_ = 0;
}
inline double Expr::_internal_selec() const {
  return selec_;
}
inline double Expr::selec() const {
  // @@protoc_insertion_point(field_get:proto_plan.Expr.selec)
  return _internal_selec();
}
inline void Expr::_internal_set_selec(double value) {
  
  selec_ = value;
}
inline void Expr::set_selec(double value) {
  _internal_set_selec(value);
  // @@protoc_insertion_point(field_set:proto_plan.Expr.selec)
}

// -------------------------------------------------------------------

// Cursor_Data

// int32 row_count = 1;
inline void Cursor_Data::clear_row_count() {
  row_count_ = 0;
}
inline int32_t Cursor_Data::_internal_row_count() const {
  return row_count_;
}
inline int32_t Cursor_Data::row_count() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.row_count)
  return _internal_row_count();
}
inline void Cursor_Data::_internal_set_row_count(int32_t value) {
  
  row_count_ = value;
}
inline void Cursor_Data::set_row_count(int32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.row_count)
}

// int32 cur_dno = 2;
inline void Cursor_Data::clear_cur_dno() {
  cur_dno_ = 0;
}
inline int32_t Cursor_Data::_internal_cur_dno() const {
  return cur_dno_;
}
inline int32_t Cursor_Data::cur_dno() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.cur_dno)
  return _internal_cur_dno();
}
inline void Cursor_Data::_internal_set_cur_dno(int32_t value) {
  
  cur_dno_ = value;
}
inline void Cursor_Data::set_cur_dno(int32_t value) {
  _internal_set_cur_dno(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.cur_dno)
}

// bool is_open = 3;
inline void Cursor_Data::clear_is_open() {
  is_open_ = false;
}
inline bool Cursor_Data::_internal_is_open() const {
  return is_open_;
}
inline bool Cursor_Data::is_open() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.is_open)
  return _internal_is_open();
}
inline void Cursor_Data::_internal_set_is_open(bool value) {
  
  is_open_ = value;
}
inline void Cursor_Data::set_is_open(bool value) {
  _internal_set_is_open(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.is_open)
}

// bool found = 4;
inline void Cursor_Data::clear_found() {
  found_ = false;
}
inline bool Cursor_Data::_internal_found() const {
  return found_;
}
inline bool Cursor_Data::found() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.found)
  return _internal_found();
}
inline void Cursor_Data::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void Cursor_Data::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.found)
}

// bool not_found = 5;
inline void Cursor_Data::clear_not_found() {
  not_found_ = false;
}
inline bool Cursor_Data::_internal_not_found() const {
  return not_found_;
}
inline bool Cursor_Data::not_found() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.not_found)
  return _internal_not_found();
}
inline void Cursor_Data::_internal_set_not_found(bool value) {
  
  not_found_ = value;
}
inline void Cursor_Data::set_not_found(bool value) {
  _internal_set_not_found(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.not_found)
}

// bool null_open = 6;
inline void Cursor_Data::clear_null_open() {
  null_open_ = false;
}
inline bool Cursor_Data::_internal_null_open() const {
  return null_open_;
}
inline bool Cursor_Data::null_open() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.null_open)
  return _internal_null_open();
}
inline void Cursor_Data::_internal_set_null_open(bool value) {
  
  null_open_ = value;
}
inline void Cursor_Data::set_null_open(bool value) {
  _internal_set_null_open(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.null_open)
}

// bool null_fetch = 7;
inline void Cursor_Data::clear_null_fetch() {
  null_fetch_ = false;
}
inline bool Cursor_Data::_internal_null_fetch() const {
  return null_fetch_;
}
inline bool Cursor_Data::null_fetch() const {
  // @@protoc_insertion_point(field_get:proto_plan.Cursor_Data.null_fetch)
  return _internal_null_fetch();
}
inline void Cursor_Data::_internal_set_null_fetch(bool value) {
  
  null_fetch_ = value;
}
inline void Cursor_Data::set_null_fetch(bool value) {
  _internal_set_null_fetch(value);
  // @@protoc_insertion_point(field_set:proto_plan.Cursor_Data.null_fetch)
}

// -------------------------------------------------------------------

// Const

// .proto_plan.Expr xpr = 1;
inline bool Const::_internal_has_xpr() const {
  return this != internal_default_instance() && xpr_ != nullptr;
}
inline bool Const::has_xpr() const {
  return _internal_has_xpr();
}
inline void Const::clear_xpr() {
  if (GetArenaForAllocation() == nullptr && xpr_ != nullptr) {
    delete xpr_;
  }
  xpr_ = nullptr;
}
inline const ::proto_plan::Expr& Const::_internal_xpr() const {
  const ::proto_plan::Expr* p = xpr_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Expr&>(
      ::proto_plan::_Expr_default_instance_);
}
inline const ::proto_plan::Expr& Const::xpr() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.xpr)
  return _internal_xpr();
}
inline void Const::unsafe_arena_set_allocated_xpr(
    ::proto_plan::Expr* xpr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xpr_);
  }
  xpr_ = xpr;
  if (xpr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Const.xpr)
}
inline ::proto_plan::Expr* Const::release_xpr() {
  
  ::proto_plan::Expr* temp = xpr_;
  xpr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Expr* Const::unsafe_arena_release_xpr() {
  // @@protoc_insertion_point(field_release:proto_plan.Const.xpr)
  
  ::proto_plan::Expr* temp = xpr_;
  xpr_ = nullptr;
  return temp;
}
inline ::proto_plan::Expr* Const::_internal_mutable_xpr() {
  
  if (xpr_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Expr>(GetArenaForAllocation());
    xpr_ = p;
  }
  return xpr_;
}
inline ::proto_plan::Expr* Const::mutable_xpr() {
  ::proto_plan::Expr* _msg = _internal_mutable_xpr();
  // @@protoc_insertion_point(field_mutable:proto_plan.Const.xpr)
  return _msg;
}
inline void Const::set_allocated_xpr(::proto_plan::Expr* xpr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete xpr_;
  }
  if (xpr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::Expr>::GetOwningArena(xpr);
    if (message_arena != submessage_arena) {
      xpr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xpr, submessage_arena);
    }
    
  } else {
    
  }
  xpr_ = xpr;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Const.xpr)
}

// uint32 consttype = 2;
inline void Const::clear_consttype() {
  consttype_ = 0u;
}
inline uint32_t Const::_internal_consttype() const {
  return consttype_;
}
inline uint32_t Const::consttype() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.consttype)
  return _internal_consttype();
}
inline void Const::_internal_set_consttype(uint32_t value) {
  
  consttype_ = value;
}
inline void Const::set_consttype(uint32_t value) {
  _internal_set_consttype(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.consttype)
}

// int32 consttypmod = 3;
inline void Const::clear_consttypmod() {
  consttypmod_ = 0;
}
inline int32_t Const::_internal_consttypmod() const {
  return consttypmod_;
}
inline int32_t Const::consttypmod() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.consttypmod)
  return _internal_consttypmod();
}
inline void Const::_internal_set_consttypmod(int32_t value) {
  
  consttypmod_ = value;
}
inline void Const::set_consttypmod(int32_t value) {
  _internal_set_consttypmod(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.consttypmod)
}

// uint32 constcollid = 4;
inline void Const::clear_constcollid() {
  constcollid_ = 0u;
}
inline uint32_t Const::_internal_constcollid() const {
  return constcollid_;
}
inline uint32_t Const::constcollid() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.constcollid)
  return _internal_constcollid();
}
inline void Const::_internal_set_constcollid(uint32_t value) {
  
  constcollid_ = value;
}
inline void Const::set_constcollid(uint32_t value) {
  _internal_set_constcollid(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.constcollid)
}

// int32 constlen = 5;
inline void Const::clear_constlen() {
  constlen_ = 0;
}
inline int32_t Const::_internal_constlen() const {
  return constlen_;
}
inline int32_t Const::constlen() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.constlen)
  return _internal_constlen();
}
inline void Const::_internal_set_constlen(int32_t value) {
  
  constlen_ = value;
}
inline void Const::set_constlen(int32_t value) {
  _internal_set_constlen(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.constlen)
}

// uint64 constvalue = 6;
inline void Const::clear_constvalue() {
  constvalue_ = uint64_t{0u};
}
inline uint64_t Const::_internal_constvalue() const {
  return constvalue_;
}
inline uint64_t Const::constvalue() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.constvalue)
  return _internal_constvalue();
}
inline void Const::_internal_set_constvalue(uint64_t value) {
  
  constvalue_ = value;
}
inline void Const::set_constvalue(uint64_t value) {
  _internal_set_constvalue(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.constvalue)
}

// bool constisnull = 7;
inline void Const::clear_constisnull() {
  constisnull_ = false;
}
inline bool Const::_internal_constisnull() const {
  return constisnull_;
}
inline bool Const::constisnull() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.constisnull)
  return _internal_constisnull();
}
inline void Const::_internal_set_constisnull(bool value) {
  
  constisnull_ = value;
}
inline void Const::set_constisnull(bool value) {
  _internal_set_constisnull(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.constisnull)
}

// bool constbyval = 8;
inline void Const::clear_constbyval() {
  constbyval_ = false;
}
inline bool Const::_internal_constbyval() const {
  return constbyval_;
}
inline bool Const::constbyval() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.constbyval)
  return _internal_constbyval();
}
inline void Const::_internal_set_constbyval(bool value) {
  
  constbyval_ = value;
}
inline void Const::set_constbyval(bool value) {
  _internal_set_constbyval(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.constbyval)
}

// int32 location = 9;
inline void Const::clear_location() {
  location_ = 0;
}
inline int32_t Const::_internal_location() const {
  return location_;
}
inline int32_t Const::location() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.location)
  return _internal_location();
}
inline void Const::_internal_set_location(int32_t value) {
  
  location_ = value;
}
inline void Const::set_location(int32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.location)
}

// bool ismaxvalue = 10;
inline void Const::clear_ismaxvalue() {
  ismaxvalue_ = false;
}
inline bool Const::_internal_ismaxvalue() const {
  return ismaxvalue_;
}
inline bool Const::ismaxvalue() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.ismaxvalue)
  return _internal_ismaxvalue();
}
inline void Const::_internal_set_ismaxvalue(bool value) {
  
  ismaxvalue_ = value;
}
inline void Const::set_ismaxvalue(bool value) {
  _internal_set_ismaxvalue(value);
  // @@protoc_insertion_point(field_set:proto_plan.Const.ismaxvalue)
}

// .proto_plan.Cursor_Data cursor_data = 11;
inline bool Const::_internal_has_cursor_data() const {
  return this != internal_default_instance() && cursor_data_ != nullptr;
}
inline bool Const::has_cursor_data() const {
  return _internal_has_cursor_data();
}
inline void Const::clear_cursor_data() {
  if (GetArenaForAllocation() == nullptr && cursor_data_ != nullptr) {
    delete cursor_data_;
  }
  cursor_data_ = nullptr;
}
inline const ::proto_plan::Cursor_Data& Const::_internal_cursor_data() const {
  const ::proto_plan::Cursor_Data* p = cursor_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Cursor_Data&>(
      ::proto_plan::_Cursor_Data_default_instance_);
}
inline const ::proto_plan::Cursor_Data& Const::cursor_data() const {
  // @@protoc_insertion_point(field_get:proto_plan.Const.cursor_data)
  return _internal_cursor_data();
}
inline void Const::unsafe_arena_set_allocated_cursor_data(
    ::proto_plan::Cursor_Data* cursor_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_data_);
  }
  cursor_data_ = cursor_data;
  if (cursor_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.Const.cursor_data)
}
inline ::proto_plan::Cursor_Data* Const::release_cursor_data() {
  
  ::proto_plan::Cursor_Data* temp = cursor_data_;
  cursor_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Cursor_Data* Const::unsafe_arena_release_cursor_data() {
  // @@protoc_insertion_point(field_release:proto_plan.Const.cursor_data)
  
  ::proto_plan::Cursor_Data* temp = cursor_data_;
  cursor_data_ = nullptr;
  return temp;
}
inline ::proto_plan::Cursor_Data* Const::_internal_mutable_cursor_data() {
  
  if (cursor_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Cursor_Data>(GetArenaForAllocation());
    cursor_data_ = p;
  }
  return cursor_data_;
}
inline ::proto_plan::Cursor_Data* Const::mutable_cursor_data() {
  ::proto_plan::Cursor_Data* _msg = _internal_mutable_cursor_data();
  // @@protoc_insertion_point(field_mutable:proto_plan.Const.cursor_data)
  return _msg;
}
inline void Const::set_allocated_cursor_data(::proto_plan::Cursor_Data* cursor_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cursor_data_;
  }
  if (cursor_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::Cursor_Data>::GetOwningArena(cursor_data);
    if (message_arena != submessage_arena) {
      cursor_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor_data, submessage_arena);
    }
    
  } else {
    
  }
  cursor_data_ = cursor_data;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.Const.cursor_data)
}

// -------------------------------------------------------------------

// SliceBoundary

// .proto_plan.NodeTag type = 1;
inline void SliceBoundary::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag SliceBoundary::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag SliceBoundary::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.SliceBoundary.type)
  return _internal_type();
}
inline void SliceBoundary::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void SliceBoundary::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.SliceBoundary.type)
}

// int32 nodeIdx = 2;
inline void SliceBoundary::clear_nodeidx() {
  nodeidx_ = 0;
}
inline int32_t SliceBoundary::_internal_nodeidx() const {
  return nodeidx_;
}
inline int32_t SliceBoundary::nodeidx() const {
  // @@protoc_insertion_point(field_get:proto_plan.SliceBoundary.nodeIdx)
  return _internal_nodeidx();
}
inline void SliceBoundary::_internal_set_nodeidx(int32_t value) {
  
  nodeidx_ = value;
}
inline void SliceBoundary::set_nodeidx(int32_t value) {
  _internal_set_nodeidx(value);
  // @@protoc_insertion_point(field_set:proto_plan.SliceBoundary.nodeIdx)
}

// int32 len = 3;
inline void SliceBoundary::clear_len() {
  len_ = 0;
}
inline int32_t SliceBoundary::_internal_len() const {
  return len_;
}
inline int32_t SliceBoundary::len() const {
  // @@protoc_insertion_point(field_get:proto_plan.SliceBoundary.len)
  return _internal_len();
}
inline void SliceBoundary::_internal_set_len(int32_t value) {
  
  len_ = value;
}
inline void SliceBoundary::set_len(int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:proto_plan.SliceBoundary.len)
}

// repeated .proto_plan.Const boundary = 4;
inline int SliceBoundary::_internal_boundary_size() const {
  return boundary_.size();
}
inline int SliceBoundary::boundary_size() const {
  return _internal_boundary_size();
}
inline void SliceBoundary::clear_boundary() {
  boundary_.Clear();
}
inline ::proto_plan::Const* SliceBoundary::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:proto_plan.SliceBoundary.boundary)
  return boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >*
SliceBoundary::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.SliceBoundary.boundary)
  return &boundary_;
}
inline const ::proto_plan::Const& SliceBoundary::_internal_boundary(int index) const {
  return boundary_.Get(index);
}
inline const ::proto_plan::Const& SliceBoundary::boundary(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.SliceBoundary.boundary)
  return _internal_boundary(index);
}
inline ::proto_plan::Const* SliceBoundary::_internal_add_boundary() {
  return boundary_.Add();
}
inline ::proto_plan::Const* SliceBoundary::add_boundary() {
  ::proto_plan::Const* _add = _internal_add_boundary();
  // @@protoc_insertion_point(field_add:proto_plan.SliceBoundary.boundary)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::Const >&
SliceBoundary::boundary() const {
  // @@protoc_insertion_point(field_list:proto_plan.SliceBoundary.boundary)
  return boundary_;
}

// -------------------------------------------------------------------

// ExecBoundary

// .proto_plan.NodeTag type = 1;
inline void ExecBoundary::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag ExecBoundary::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag ExecBoundary::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecBoundary.type)
  return _internal_type();
}
inline void ExecBoundary::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void ExecBoundary::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecBoundary.type)
}

// string locatorType = 2;
inline void ExecBoundary::clear_locatortype() {
  locatortype_.ClearToEmpty();
}
inline const std::string& ExecBoundary::locatortype() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecBoundary.locatorType)
  return _internal_locatortype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecBoundary::set_locatortype(ArgT0&& arg0, ArgT... args) {
 
 locatortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_plan.ExecBoundary.locatorType)
}
inline std::string* ExecBoundary::mutable_locatortype() {
  std::string* _s = _internal_mutable_locatortype();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecBoundary.locatorType)
  return _s;
}
inline const std::string& ExecBoundary::_internal_locatortype() const {
  return locatortype_.Get();
}
inline void ExecBoundary::_internal_set_locatortype(const std::string& value) {
  
  locatortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecBoundary::_internal_mutable_locatortype() {
  
  return locatortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecBoundary::release_locatortype() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecBoundary.locatorType)
  return locatortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecBoundary::set_allocated_locatortype(std::string* locatortype) {
  if (locatortype != nullptr) {
    
  } else {
    
  }
  locatortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locatortype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locatortype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    locatortype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecBoundary.locatorType)
}

// int32 count = 3;
inline void ExecBoundary::clear_count() {
  count_ = 0;
}
inline int32_t ExecBoundary::_internal_count() const {
  return count_;
}
inline int32_t ExecBoundary::count() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecBoundary.count)
  return _internal_count();
}
inline void ExecBoundary::_internal_set_count(int32_t value) {
  
  count_ = value;
}
inline void ExecBoundary::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecBoundary.count)
}

// repeated .proto_plan.SliceBoundary eles = 4;
inline int ExecBoundary::_internal_eles_size() const {
  return eles_.size();
}
inline int ExecBoundary::eles_size() const {
  return _internal_eles_size();
}
inline void ExecBoundary::clear_eles() {
  eles_.Clear();
}
inline ::proto_plan::SliceBoundary* ExecBoundary::mutable_eles(int index) {
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecBoundary.eles)
  return eles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::SliceBoundary >*
ExecBoundary::mutable_eles() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.ExecBoundary.eles)
  return &eles_;
}
inline const ::proto_plan::SliceBoundary& ExecBoundary::_internal_eles(int index) const {
  return eles_.Get(index);
}
inline const ::proto_plan::SliceBoundary& ExecBoundary::eles(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecBoundary.eles)
  return _internal_eles(index);
}
inline ::proto_plan::SliceBoundary* ExecBoundary::_internal_add_eles() {
  return eles_.Add();
}
inline ::proto_plan::SliceBoundary* ExecBoundary::add_eles() {
  ::proto_plan::SliceBoundary* _add = _internal_add_eles();
  // @@protoc_insertion_point(field_add:proto_plan.ExecBoundary.eles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_plan::SliceBoundary >&
ExecBoundary::eles() const {
  // @@protoc_insertion_point(field_list:proto_plan.ExecBoundary.eles)
  return eles_;
}

// -------------------------------------------------------------------

// ExecNodes

// .proto_plan.NodeTag type = 1;
inline void ExecNodes::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag ExecNodes::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag ExecNodes::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.type)
  return _internal_type();
}
inline void ExecNodes::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void ExecNodes::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.type)
}

// .proto_plan.List primarynodelist = 2;
inline bool ExecNodes::_internal_has_primarynodelist() const {
  return this != internal_default_instance() && primarynodelist_ != nullptr;
}
inline bool ExecNodes::has_primarynodelist() const {
  return _internal_has_primarynodelist();
}
inline void ExecNodes::clear_primarynodelist() {
  if (GetArenaForAllocation() == nullptr && primarynodelist_ != nullptr) {
    delete primarynodelist_;
  }
  primarynodelist_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_primarynodelist() const {
  const ::proto_plan::List* p = primarynodelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::primarynodelist() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.primarynodelist)
  return _internal_primarynodelist();
}
inline void ExecNodes::unsafe_arena_set_allocated_primarynodelist(
    ::proto_plan::List* primarynodelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primarynodelist_);
  }
  primarynodelist_ = primarynodelist;
  if (primarynodelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.primarynodelist)
}
inline ::proto_plan::List* ExecNodes::release_primarynodelist() {
  
  ::proto_plan::List* temp = primarynodelist_;
  primarynodelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_primarynodelist() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.primarynodelist)
  
  ::proto_plan::List* temp = primarynodelist_;
  primarynodelist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_primarynodelist() {
  
  if (primarynodelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    primarynodelist_ = p;
  }
  return primarynodelist_;
}
inline ::proto_plan::List* ExecNodes::mutable_primarynodelist() {
  ::proto_plan::List* _msg = _internal_mutable_primarynodelist();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.primarynodelist)
  return _msg;
}
inline void ExecNodes::set_allocated_primarynodelist(::proto_plan::List* primarynodelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete primarynodelist_;
  }
  if (primarynodelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(primarynodelist);
    if (message_arena != submessage_arena) {
      primarynodelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primarynodelist, submessage_arena);
    }
    
  } else {
    
  }
  primarynodelist_ = primarynodelist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.primarynodelist)
}

// .proto_plan.List nodeList = 3;
inline bool ExecNodes::_internal_has_nodelist() const {
  return this != internal_default_instance() && nodelist_ != nullptr;
}
inline bool ExecNodes::has_nodelist() const {
  return _internal_has_nodelist();
}
inline void ExecNodes::clear_nodelist() {
  if (GetArenaForAllocation() == nullptr && nodelist_ != nullptr) {
    delete nodelist_;
  }
  nodelist_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_nodelist() const {
  const ::proto_plan::List* p = nodelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::nodelist() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.nodeList)
  return _internal_nodelist();
}
inline void ExecNodes::unsafe_arena_set_allocated_nodelist(
    ::proto_plan::List* nodelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodelist_);
  }
  nodelist_ = nodelist;
  if (nodelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.nodeList)
}
inline ::proto_plan::List* ExecNodes::release_nodelist() {
  
  ::proto_plan::List* temp = nodelist_;
  nodelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_nodelist() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.nodeList)
  
  ::proto_plan::List* temp = nodelist_;
  nodelist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_nodelist() {
  
  if (nodelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    nodelist_ = p;
  }
  return nodelist_;
}
inline ::proto_plan::List* ExecNodes::mutable_nodelist() {
  ::proto_plan::List* _msg = _internal_mutable_nodelist();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.nodeList)
  return _msg;
}
inline void ExecNodes::set_allocated_nodelist(::proto_plan::List* nodelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nodelist_;
  }
  if (nodelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(nodelist);
    if (message_arena != submessage_arena) {
      nodelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodelist, submessage_arena);
    }
    
  } else {
    
  }
  nodelist_ = nodelist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.nodeList)
}

// .proto_plan.Distribution distribution = 4;
inline bool ExecNodes::_internal_has_distribution() const {
  return this != internal_default_instance() && distribution_ != nullptr;
}
inline bool ExecNodes::has_distribution() const {
  return _internal_has_distribution();
}
inline void ExecNodes::clear_distribution() {
  if (GetArenaForAllocation() == nullptr && distribution_ != nullptr) {
    delete distribution_;
  }
  distribution_ = nullptr;
}
inline const ::proto_plan::Distribution& ExecNodes::_internal_distribution() const {
  const ::proto_plan::Distribution* p = distribution_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::Distribution&>(
      ::proto_plan::_Distribution_default_instance_);
}
inline const ::proto_plan::Distribution& ExecNodes::distribution() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.distribution)
  return _internal_distribution();
}
inline void ExecNodes::unsafe_arena_set_allocated_distribution(
    ::proto_plan::Distribution* distribution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distribution_);
  }
  distribution_ = distribution;
  if (distribution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.distribution)
}
inline ::proto_plan::Distribution* ExecNodes::release_distribution() {
  
  ::proto_plan::Distribution* temp = distribution_;
  distribution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::Distribution* ExecNodes::unsafe_arena_release_distribution() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.distribution)
  
  ::proto_plan::Distribution* temp = distribution_;
  distribution_ = nullptr;
  return temp;
}
inline ::proto_plan::Distribution* ExecNodes::_internal_mutable_distribution() {
  
  if (distribution_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Distribution>(GetArenaForAllocation());
    distribution_ = p;
  }
  return distribution_;
}
inline ::proto_plan::Distribution* ExecNodes::mutable_distribution() {
  ::proto_plan::Distribution* _msg = _internal_mutable_distribution();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.distribution)
  return _msg;
}
inline void ExecNodes::set_allocated_distribution(::proto_plan::Distribution* distribution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete distribution_;
  }
  if (distribution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::Distribution>::GetOwningArena(distribution);
    if (message_arena != submessage_arena) {
      distribution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distribution, submessage_arena);
    }
    
  } else {
    
  }
  distribution_ = distribution;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.distribution)
}

// string baselocatortype = 5;
inline void ExecNodes::clear_baselocatortype() {
  baselocatortype_.ClearToEmpty();
}
inline const std::string& ExecNodes::baselocatortype() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.baselocatortype)
  return _internal_baselocatortype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecNodes::set_baselocatortype(ArgT0&& arg0, ArgT... args) {
 
 baselocatortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.baselocatortype)
}
inline std::string* ExecNodes::mutable_baselocatortype() {
  std::string* _s = _internal_mutable_baselocatortype();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.baselocatortype)
  return _s;
}
inline const std::string& ExecNodes::_internal_baselocatortype() const {
  return baselocatortype_.Get();
}
inline void ExecNodes::_internal_set_baselocatortype(const std::string& value) {
  
  baselocatortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecNodes::_internal_mutable_baselocatortype() {
  
  return baselocatortype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecNodes::release_baselocatortype() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.baselocatortype)
  return baselocatortype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecNodes::set_allocated_baselocatortype(std::string* baselocatortype) {
  if (baselocatortype != nullptr) {
    
  } else {
    
  }
  baselocatortype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baselocatortype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (baselocatortype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    baselocatortype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.baselocatortype)
}

// .proto_plan.List en_expr = 6;
inline bool ExecNodes::_internal_has_en_expr() const {
  return this != internal_default_instance() && en_expr_ != nullptr;
}
inline bool ExecNodes::has_en_expr() const {
  return _internal_has_en_expr();
}
inline void ExecNodes::clear_en_expr() {
  if (GetArenaForAllocation() == nullptr && en_expr_ != nullptr) {
    delete en_expr_;
  }
  en_expr_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_en_expr() const {
  const ::proto_plan::List* p = en_expr_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::en_expr() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.en_expr)
  return _internal_en_expr();
}
inline void ExecNodes::unsafe_arena_set_allocated_en_expr(
    ::proto_plan::List* en_expr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(en_expr_);
  }
  en_expr_ = en_expr;
  if (en_expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.en_expr)
}
inline ::proto_plan::List* ExecNodes::release_en_expr() {
  
  ::proto_plan::List* temp = en_expr_;
  en_expr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_en_expr() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.en_expr)
  
  ::proto_plan::List* temp = en_expr_;
  en_expr_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_en_expr() {
  
  if (en_expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    en_expr_ = p;
  }
  return en_expr_;
}
inline ::proto_plan::List* ExecNodes::mutable_en_expr() {
  ::proto_plan::List* _msg = _internal_mutable_en_expr();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.en_expr)
  return _msg;
}
inline void ExecNodes::set_allocated_en_expr(::proto_plan::List* en_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete en_expr_;
  }
  if (en_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(en_expr);
    if (message_arena != submessage_arena) {
      en_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, en_expr, submessage_arena);
    }
    
  } else {
    
  }
  en_expr_ = en_expr;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.en_expr)
}

// uint32 en_relid = 7;
inline void ExecNodes::clear_en_relid() {
  en_relid_ = 0u;
}
inline uint32_t ExecNodes::_internal_en_relid() const {
  return en_relid_;
}
inline uint32_t ExecNodes::en_relid() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.en_relid)
  return _internal_en_relid();
}
inline void ExecNodes::_internal_set_en_relid(uint32_t value) {
  
  en_relid_ = value;
}
inline void ExecNodes::set_en_relid(uint32_t value) {
  _internal_set_en_relid(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.en_relid)
}

// uint32 rangelistOid = 8;
inline void ExecNodes::clear_rangelistoid() {
  rangelistoid_ = 0u;
}
inline uint32_t ExecNodes::_internal_rangelistoid() const {
  return rangelistoid_;
}
inline uint32_t ExecNodes::rangelistoid() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.rangelistOid)
  return _internal_rangelistoid();
}
inline void ExecNodes::_internal_set_rangelistoid(uint32_t value) {
  
  rangelistoid_ = value;
}
inline void ExecNodes::set_rangelistoid(uint32_t value) {
  _internal_set_rangelistoid(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.rangelistOid)
}

// bool need_range_prune = 9;
inline void ExecNodes::clear_need_range_prune() {
  need_range_prune_ = false;
}
inline bool ExecNodes::_internal_need_range_prune() const {
  return need_range_prune_;
}
inline bool ExecNodes::need_range_prune() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.need_range_prune)
  return _internal_need_range_prune();
}
inline void ExecNodes::_internal_set_need_range_prune(bool value) {
  
  need_range_prune_ = value;
}
inline void ExecNodes::set_need_range_prune(bool value) {
  _internal_set_need_range_prune(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.need_range_prune)
}

// int32 en_varno = 10;
inline void ExecNodes::clear_en_varno() {
  en_varno_ = 0;
}
inline int32_t ExecNodes::_internal_en_varno() const {
  return en_varno_;
}
inline int32_t ExecNodes::en_varno() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.en_varno)
  return _internal_en_varno();
}
inline void ExecNodes::_internal_set_en_varno(int32_t value) {
  
  en_varno_ = value;
}
inline void ExecNodes::set_en_varno(int32_t value) {
  _internal_set_en_varno(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.en_varno)
}

// .proto_plan.ExecBoundary boundaries = 11;
inline bool ExecNodes::_internal_has_boundaries() const {
  return this != internal_default_instance() && boundaries_ != nullptr;
}
inline bool ExecNodes::has_boundaries() const {
  return _internal_has_boundaries();
}
inline void ExecNodes::clear_boundaries() {
  if (GetArenaForAllocation() == nullptr && boundaries_ != nullptr) {
    delete boundaries_;
  }
  boundaries_ = nullptr;
}
inline const ::proto_plan::ExecBoundary& ExecNodes::_internal_boundaries() const {
  const ::proto_plan::ExecBoundary* p = boundaries_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::ExecBoundary&>(
      ::proto_plan::_ExecBoundary_default_instance_);
}
inline const ::proto_plan::ExecBoundary& ExecNodes::boundaries() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.boundaries)
  return _internal_boundaries();
}
inline void ExecNodes::unsafe_arena_set_allocated_boundaries(
    ::proto_plan::ExecBoundary* boundaries) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundaries_);
  }
  boundaries_ = boundaries;
  if (boundaries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.boundaries)
}
inline ::proto_plan::ExecBoundary* ExecNodes::release_boundaries() {
  
  ::proto_plan::ExecBoundary* temp = boundaries_;
  boundaries_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::ExecBoundary* ExecNodes::unsafe_arena_release_boundaries() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.boundaries)
  
  ::proto_plan::ExecBoundary* temp = boundaries_;
  boundaries_ = nullptr;
  return temp;
}
inline ::proto_plan::ExecBoundary* ExecNodes::_internal_mutable_boundaries() {
  
  if (boundaries_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::ExecBoundary>(GetArenaForAllocation());
    boundaries_ = p;
  }
  return boundaries_;
}
inline ::proto_plan::ExecBoundary* ExecNodes::mutable_boundaries() {
  ::proto_plan::ExecBoundary* _msg = _internal_mutable_boundaries();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.boundaries)
  return _msg;
}
inline void ExecNodes::set_allocated_boundaries(::proto_plan::ExecBoundary* boundaries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete boundaries_;
  }
  if (boundaries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::ExecBoundary>::GetOwningArena(boundaries);
    if (message_arena != submessage_arena) {
      boundaries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundaries, submessage_arena);
    }
    
  } else {
    
  }
  boundaries_ = boundaries;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.boundaries)
}

// .proto_plan.RelationAccessType accesstype = 12;
inline void ExecNodes::clear_accesstype() {
  accesstype_ = 0;
}
inline ::proto_plan::RelationAccessType ExecNodes::_internal_accesstype() const {
  return static_cast< ::proto_plan::RelationAccessType >(accesstype_);
}
inline ::proto_plan::RelationAccessType ExecNodes::accesstype() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.accesstype)
  return _internal_accesstype();
}
inline void ExecNodes::_internal_set_accesstype(::proto_plan::RelationAccessType value) {
  
  accesstype_ = value;
}
inline void ExecNodes::set_accesstype(::proto_plan::RelationAccessType value) {
  _internal_set_accesstype(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.accesstype)
}

// .proto_plan.List en_dist_vars = 13;
inline bool ExecNodes::_internal_has_en_dist_vars() const {
  return this != internal_default_instance() && en_dist_vars_ != nullptr;
}
inline bool ExecNodes::has_en_dist_vars() const {
  return _internal_has_en_dist_vars();
}
inline void ExecNodes::clear_en_dist_vars() {
  if (GetArenaForAllocation() == nullptr && en_dist_vars_ != nullptr) {
    delete en_dist_vars_;
  }
  en_dist_vars_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_en_dist_vars() const {
  const ::proto_plan::List* p = en_dist_vars_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::en_dist_vars() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.en_dist_vars)
  return _internal_en_dist_vars();
}
inline void ExecNodes::unsafe_arena_set_allocated_en_dist_vars(
    ::proto_plan::List* en_dist_vars) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(en_dist_vars_);
  }
  en_dist_vars_ = en_dist_vars;
  if (en_dist_vars) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.en_dist_vars)
}
inline ::proto_plan::List* ExecNodes::release_en_dist_vars() {
  
  ::proto_plan::List* temp = en_dist_vars_;
  en_dist_vars_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_en_dist_vars() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.en_dist_vars)
  
  ::proto_plan::List* temp = en_dist_vars_;
  en_dist_vars_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_en_dist_vars() {
  
  if (en_dist_vars_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    en_dist_vars_ = p;
  }
  return en_dist_vars_;
}
inline ::proto_plan::List* ExecNodes::mutable_en_dist_vars() {
  ::proto_plan::List* _msg = _internal_mutable_en_dist_vars();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.en_dist_vars)
  return _msg;
}
inline void ExecNodes::set_allocated_en_dist_vars(::proto_plan::List* en_dist_vars) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete en_dist_vars_;
  }
  if (en_dist_vars) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(en_dist_vars);
    if (message_arena != submessage_arena) {
      en_dist_vars = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, en_dist_vars, submessage_arena);
    }
    
  } else {
    
  }
  en_dist_vars_ = en_dist_vars;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.en_dist_vars)
}

// int32 bucketmapIdx = 14;
inline void ExecNodes::clear_bucketmapidx() {
  bucketmapidx_ = 0;
}
inline int32_t ExecNodes::_internal_bucketmapidx() const {
  return bucketmapidx_;
}
inline int32_t ExecNodes::bucketmapidx() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.bucketmapIdx)
  return _internal_bucketmapidx();
}
inline void ExecNodes::_internal_set_bucketmapidx(int32_t value) {
  
  bucketmapidx_ = value;
}
inline void ExecNodes::set_bucketmapidx(int32_t value) {
  _internal_set_bucketmapidx(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.bucketmapIdx)
}

// bool nodelist_is_nil = 15;
inline void ExecNodes::clear_nodelist_is_nil() {
  nodelist_is_nil_ = false;
}
inline bool ExecNodes::_internal_nodelist_is_nil() const {
  return nodelist_is_nil_;
}
inline bool ExecNodes::nodelist_is_nil() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.nodelist_is_nil)
  return _internal_nodelist_is_nil();
}
inline void ExecNodes::_internal_set_nodelist_is_nil(bool value) {
  
  nodelist_is_nil_ = value;
}
inline void ExecNodes::set_nodelist_is_nil(bool value) {
  _internal_set_nodelist_is_nil(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.nodelist_is_nil)
}

// .proto_plan.List original_nodeList = 16;
inline bool ExecNodes::_internal_has_original_nodelist() const {
  return this != internal_default_instance() && original_nodelist_ != nullptr;
}
inline bool ExecNodes::has_original_nodelist() const {
  return _internal_has_original_nodelist();
}
inline void ExecNodes::clear_original_nodelist() {
  if (GetArenaForAllocation() == nullptr && original_nodelist_ != nullptr) {
    delete original_nodelist_;
  }
  original_nodelist_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_original_nodelist() const {
  const ::proto_plan::List* p = original_nodelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::original_nodelist() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.original_nodeList)
  return _internal_original_nodelist();
}
inline void ExecNodes::unsafe_arena_set_allocated_original_nodelist(
    ::proto_plan::List* original_nodelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_nodelist_);
  }
  original_nodelist_ = original_nodelist;
  if (original_nodelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.original_nodeList)
}
inline ::proto_plan::List* ExecNodes::release_original_nodelist() {
  
  ::proto_plan::List* temp = original_nodelist_;
  original_nodelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_original_nodelist() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.original_nodeList)
  
  ::proto_plan::List* temp = original_nodelist_;
  original_nodelist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_original_nodelist() {
  
  if (original_nodelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    original_nodelist_ = p;
  }
  return original_nodelist_;
}
inline ::proto_plan::List* ExecNodes::mutable_original_nodelist() {
  ::proto_plan::List* _msg = _internal_mutable_original_nodelist();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.original_nodeList)
  return _msg;
}
inline void ExecNodes::set_allocated_original_nodelist(::proto_plan::List* original_nodelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete original_nodelist_;
  }
  if (original_nodelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(original_nodelist);
    if (message_arena != submessage_arena) {
      original_nodelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_nodelist, submessage_arena);
    }
    
  } else {
    
  }
  original_nodelist_ = original_nodelist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.original_nodeList)
}

// .proto_plan.List dynamic_en_expr = 17;
inline bool ExecNodes::_internal_has_dynamic_en_expr() const {
  return this != internal_default_instance() && dynamic_en_expr_ != nullptr;
}
inline bool ExecNodes::has_dynamic_en_expr() const {
  return _internal_has_dynamic_en_expr();
}
inline void ExecNodes::clear_dynamic_en_expr() {
  if (GetArenaForAllocation() == nullptr && dynamic_en_expr_ != nullptr) {
    delete dynamic_en_expr_;
  }
  dynamic_en_expr_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_dynamic_en_expr() const {
  const ::proto_plan::List* p = dynamic_en_expr_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::dynamic_en_expr() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.dynamic_en_expr)
  return _internal_dynamic_en_expr();
}
inline void ExecNodes::unsafe_arena_set_allocated_dynamic_en_expr(
    ::proto_plan::List* dynamic_en_expr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamic_en_expr_);
  }
  dynamic_en_expr_ = dynamic_en_expr;
  if (dynamic_en_expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.dynamic_en_expr)
}
inline ::proto_plan::List* ExecNodes::release_dynamic_en_expr() {
  
  ::proto_plan::List* temp = dynamic_en_expr_;
  dynamic_en_expr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_dynamic_en_expr() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.dynamic_en_expr)
  
  ::proto_plan::List* temp = dynamic_en_expr_;
  dynamic_en_expr_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_dynamic_en_expr() {
  
  if (dynamic_en_expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    dynamic_en_expr_ = p;
  }
  return dynamic_en_expr_;
}
inline ::proto_plan::List* ExecNodes::mutable_dynamic_en_expr() {
  ::proto_plan::List* _msg = _internal_mutable_dynamic_en_expr();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.dynamic_en_expr)
  return _msg;
}
inline void ExecNodes::set_allocated_dynamic_en_expr(::proto_plan::List* dynamic_en_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dynamic_en_expr_;
  }
  if (dynamic_en_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(dynamic_en_expr);
    if (message_arena != submessage_arena) {
      dynamic_en_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_en_expr, submessage_arena);
    }
    
  } else {
    
  }
  dynamic_en_expr_ = dynamic_en_expr;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.dynamic_en_expr)
}

// int32 bucketid = 18;
inline void ExecNodes::clear_bucketid() {
  bucketid_ = 0;
}
inline int32_t ExecNodes::_internal_bucketid() const {
  return bucketid_;
}
inline int32_t ExecNodes::bucketid() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.bucketid)
  return _internal_bucketid();
}
inline void ExecNodes::_internal_set_bucketid(int32_t value) {
  
  bucketid_ = value;
}
inline void ExecNodes::set_bucketid(int32_t value) {
  _internal_set_bucketid(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.bucketid)
}

// .proto_plan.List bucketexpr = 19;
inline bool ExecNodes::_internal_has_bucketexpr() const {
  return this != internal_default_instance() && bucketexpr_ != nullptr;
}
inline bool ExecNodes::has_bucketexpr() const {
  return _internal_has_bucketexpr();
}
inline void ExecNodes::clear_bucketexpr() {
  if (GetArenaForAllocation() == nullptr && bucketexpr_ != nullptr) {
    delete bucketexpr_;
  }
  bucketexpr_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_bucketexpr() const {
  const ::proto_plan::List* p = bucketexpr_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::bucketexpr() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.bucketexpr)
  return _internal_bucketexpr();
}
inline void ExecNodes::unsafe_arena_set_allocated_bucketexpr(
    ::proto_plan::List* bucketexpr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bucketexpr_);
  }
  bucketexpr_ = bucketexpr;
  if (bucketexpr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.bucketexpr)
}
inline ::proto_plan::List* ExecNodes::release_bucketexpr() {
  
  ::proto_plan::List* temp = bucketexpr_;
  bucketexpr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_bucketexpr() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.bucketexpr)
  
  ::proto_plan::List* temp = bucketexpr_;
  bucketexpr_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_bucketexpr() {
  
  if (bucketexpr_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    bucketexpr_ = p;
  }
  return bucketexpr_;
}
inline ::proto_plan::List* ExecNodes::mutable_bucketexpr() {
  ::proto_plan::List* _msg = _internal_mutable_bucketexpr();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.bucketexpr)
  return _msg;
}
inline void ExecNodes::set_allocated_bucketexpr(::proto_plan::List* bucketexpr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bucketexpr_;
  }
  if (bucketexpr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(bucketexpr);
    if (message_arena != submessage_arena) {
      bucketexpr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketexpr, submessage_arena);
    }
    
  } else {
    
  }
  bucketexpr_ = bucketexpr;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.bucketexpr)
}

// uint32 bucketrelid = 20;
inline void ExecNodes::clear_bucketrelid() {
  bucketrelid_ = 0u;
}
inline uint32_t ExecNodes::_internal_bucketrelid() const {
  return bucketrelid_;
}
inline uint32_t ExecNodes::bucketrelid() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.bucketrelid)
  return _internal_bucketrelid();
}
inline void ExecNodes::_internal_set_bucketrelid(uint32_t value) {
  
  bucketrelid_ = value;
}
inline void ExecNodes::set_bucketrelid(uint32_t value) {
  _internal_set_bucketrelid(value);
  // @@protoc_insertion_point(field_set:proto_plan.ExecNodes.bucketrelid)
}

// .proto_plan.List hotkeys = 21;
inline bool ExecNodes::_internal_has_hotkeys() const {
  return this != internal_default_instance() && hotkeys_ != nullptr;
}
inline bool ExecNodes::has_hotkeys() const {
  return _internal_has_hotkeys();
}
inline void ExecNodes::clear_hotkeys() {
  if (GetArenaForAllocation() == nullptr && hotkeys_ != nullptr) {
    delete hotkeys_;
  }
  hotkeys_ = nullptr;
}
inline const ::proto_plan::List& ExecNodes::_internal_hotkeys() const {
  const ::proto_plan::List* p = hotkeys_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_plan::List&>(
      ::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& ExecNodes::hotkeys() const {
  // @@protoc_insertion_point(field_get:proto_plan.ExecNodes.hotkeys)
  return _internal_hotkeys();
}
inline void ExecNodes::unsafe_arena_set_allocated_hotkeys(
    ::proto_plan::List* hotkeys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hotkeys_);
  }
  hotkeys_ = hotkeys;
  if (hotkeys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_plan.ExecNodes.hotkeys)
}
inline ::proto_plan::List* ExecNodes::release_hotkeys() {
  
  ::proto_plan::List* temp = hotkeys_;
  hotkeys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_plan::List* ExecNodes::unsafe_arena_release_hotkeys() {
  // @@protoc_insertion_point(field_release:proto_plan.ExecNodes.hotkeys)
  
  ::proto_plan::List* temp = hotkeys_;
  hotkeys_ = nullptr;
  return temp;
}
inline ::proto_plan::List* ExecNodes::_internal_mutable_hotkeys() {
  
  if (hotkeys_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaForAllocation());
    hotkeys_ = p;
  }
  return hotkeys_;
}
inline ::proto_plan::List* ExecNodes::mutable_hotkeys() {
  ::proto_plan::List* _msg = _internal_mutable_hotkeys();
  // @@protoc_insertion_point(field_mutable:proto_plan.ExecNodes.hotkeys)
  return _msg;
}
inline void ExecNodes::set_allocated_hotkeys(::proto_plan::List* hotkeys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hotkeys_;
  }
  if (hotkeys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto_plan::List>::GetOwningArena(hotkeys);
    if (message_arena != submessage_arena) {
      hotkeys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hotkeys, submessage_arena);
    }
    
  } else {
    
  }
  hotkeys_ = hotkeys;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.ExecNodes.hotkeys)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_plan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_execNodes_2eproto
